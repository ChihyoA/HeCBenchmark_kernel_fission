Emitting fn: cudaFuncGetAttributes
cudaFuncGetAttributes
CompoundStmt 0x56167438f148
`-ReturnStmt 0x56167438f138
  `-DeclRefExpr 0x56167438f118 'enum cudaError' EnumConstant 0x5616743579b0 'cudaErrorUnknown' 'enum cudaError'
Emitting fn: cudaDeviceGetAttribute
cudaDeviceGetAttribute
CompoundStmt 0x56167438f540
`-ReturnStmt 0x56167438f530
  `-DeclRefExpr 0x56167438f510 'enum cudaError' EnumConstant 0x5616743579b0 'cudaErrorUnknown' 'enum cudaError'
Emitting fn: cudaOccupancyMaxActiveBlocksPerMultiprocessor
cudaOccupancyMaxActiveBlocksPerMultiprocessor
CompoundStmt 0x56167438fc18
`-ReturnStmt 0x56167438fc08
  `-DeclRefExpr 0x56167438fbe8 'enum cudaError' EnumConstant 0x5616743579b0 'cudaErrorUnknown' 'enum cudaError'
Emitting fn: cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags
cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags
CompoundStmt 0x561674390110
`-ReturnStmt 0x561674390100
  `-DeclRefExpr 0x5616743900e0 'enum cudaError' EnumConstant 0x5616743579b0 'cudaErrorUnknown' 'enum cudaError'
Emitting fn: _Z21__device_stub__euclidP7latLongPfiff
euclid
CompoundStmt 0x561674e7c998
|-DeclStmt 0x561674e7be28
| `-VarDecl 0x561674e7b6f0  used globalId 'int' cinit
|   `-ImplicitCastExpr 0x561674e7be10 'int' <IntegralCast>
|     `-BinaryOperator 0x561674e7bdf0 'unsigned int' '+'
|       |-BinaryOperator 0x561674e7bc98 'unsigned int' '*'
|       | |-PseudoObjectExpr 0x561674e7bc70 'unsigned int'
|       | | |-MSPropertyRefExpr 0x561674e7bbd0 '<pseudo-object type>' lvalue
|       | | | `-OpaqueValueExpr 0x561674e7bbb8 'const struct __cuda_builtin_blockDim_t' lvalue
|       | | |   `-DeclRefExpr 0x561674e7b758 'const struct __cuda_builtin_blockDim_t' lvalue Var 0x561674a05958 'blockDim' 'const struct __cuda_builtin_blockDim_t'
|       | | |-OpaqueValueExpr 0x561674e7bbb8 'const struct __cuda_builtin_blockDim_t' lvalue
|       | | | `-DeclRefExpr 0x561674e7b758 'const struct __cuda_builtin_blockDim_t' lvalue Var 0x561674a05958 'blockDim' 'const struct __cuda_builtin_blockDim_t'
|       | | `-CallExpr 0x561674e7bc50 'unsigned int'
|       | |   `-ImplicitCastExpr 0x561674e7bc38 'unsigned int (*)(void)' <FunctionToPointerDecay>
|       | |     `-MemberExpr 0x561674e7bc08 'unsigned int (void)' lvalue .__fetch_builtin_x 0x5616742fca40
|       | |       `-OpaqueValueExpr 0x561674e7bbb8 'const struct __cuda_builtin_blockDim_t' lvalue
|       | |         `-DeclRefExpr 0x561674e7b758 'const struct __cuda_builtin_blockDim_t' lvalue Var 0x561674a05958 'blockDim' 'const struct __cuda_builtin_blockDim_t'
|       | `-ParenExpr 0x561674e7bb98 'unsigned int'
|       |   `-BinaryOperator 0x561674e7bb78 'unsigned int' '+'
|       |     |-BinaryOperator 0x561674e7ba20 'unsigned int' '*'
|       |     | |-PseudoObjectExpr 0x561674e7b918 'unsigned int'
|       |     | | |-MSPropertyRefExpr 0x561674e7b878 '<pseudo-object type>' lvalue
|       |     | | | `-OpaqueValueExpr 0x561674e7b860 'const struct __cuda_builtin_gridDim_t' lvalue
|       |     | | |   `-DeclRefExpr 0x561674e7b7b0 'const struct __cuda_builtin_gridDim_t' lvalue Var 0x561674300478 'gridDim' 'const struct __cuda_builtin_gridDim_t'
|       |     | | |-OpaqueValueExpr 0x561674e7b860 'const struct __cuda_builtin_gridDim_t' lvalue
|       |     | | | `-DeclRefExpr 0x561674e7b7b0 'const struct __cuda_builtin_gridDim_t' lvalue Var 0x561674300478 'gridDim' 'const struct __cuda_builtin_gridDim_t'
|       |     | | `-CallExpr 0x561674e7b8f8 'unsigned int'
|       |     | |   `-ImplicitCastExpr 0x561674e7b8e0 'unsigned int (*)(void)' <FunctionToPointerDecay>
|       |     | |     `-MemberExpr 0x561674e7b8b0 'unsigned int (void)' lvalue .__fetch_builtin_x 0x5616742febb0
|       |     | |       `-OpaqueValueExpr 0x561674e7b860 'const struct __cuda_builtin_gridDim_t' lvalue
|       |     | |         `-DeclRefExpr 0x561674e7b7b0 'const struct __cuda_builtin_gridDim_t' lvalue Var 0x561674300478 'gridDim' 'const struct __cuda_builtin_gridDim_t'
|       |     | `-PseudoObjectExpr 0x561674e7b9f8 'unsigned int'
|       |     |   |-MSPropertyRefExpr 0x561674e7b958 '<pseudo-object type>' lvalue
|       |     |   | `-OpaqueValueExpr 0x561674e7b940 'const struct __cuda_builtin_blockIdx_t' lvalue
|       |     |   |   `-DeclRefExpr 0x561674e7b808 'const struct __cuda_builtin_blockIdx_t' lvalue Var 0x561674300288 'blockIdx' 'const struct __cuda_builtin_blockIdx_t'
|       |     |   |-OpaqueValueExpr 0x561674e7b940 'const struct __cuda_builtin_blockIdx_t' lvalue
|       |     |   | `-DeclRefExpr 0x561674e7b808 'const struct __cuda_builtin_blockIdx_t' lvalue Var 0x561674300288 'blockIdx' 'const struct __cuda_builtin_blockIdx_t'
|       |     |   `-CallExpr 0x561674e7b9d8 'unsigned int'
|       |     |     `-ImplicitCastExpr 0x561674e7b9c0 'unsigned int (*)(void)' <FunctionToPointerDecay>
|       |     |       `-MemberExpr 0x561674e7b990 'unsigned int (void)' lvalue .__fetch_builtin_y 0x5616742fb3c0
|       |     |         `-OpaqueValueExpr 0x561674e7b940 'const struct __cuda_builtin_blockIdx_t' lvalue
|       |     |           `-DeclRefExpr 0x561674e7b808 'const struct __cuda_builtin_blockIdx_t' lvalue Var 0x561674300288 'blockIdx' 'const struct __cuda_builtin_blockIdx_t'
|       |     `-PseudoObjectExpr 0x561674e7bb50 'unsigned int'
|       |       |-MSPropertyRefExpr 0x561674e7bab0 '<pseudo-object type>' lvalue
|       |       | `-OpaqueValueExpr 0x561674e7ba98 'const struct __cuda_builtin_blockIdx_t' lvalue
|       |       |   `-DeclRefExpr 0x561674e7ba40 'const struct __cuda_builtin_blockIdx_t' lvalue Var 0x561674300288 'blockIdx' 'const struct __cuda_builtin_blockIdx_t'
|       |       |-OpaqueValueExpr 0x561674e7ba98 'const struct __cuda_builtin_blockIdx_t' lvalue
|       |       | `-DeclRefExpr 0x561674e7ba40 'const struct __cuda_builtin_blockIdx_t' lvalue Var 0x561674300288 'blockIdx' 'const struct __cuda_builtin_blockIdx_t'
|       |       `-CallExpr 0x561674e7bb30 'unsigned int'
|       |         `-ImplicitCastExpr 0x561674e7bb18 'unsigned int (*)(void)' <FunctionToPointerDecay>
|       |           `-MemberExpr 0x561674e7bae8 'unsigned int (void)' lvalue .__fetch_builtin_x 0x5616742fb190
|       |             `-OpaqueValueExpr 0x561674e7ba98 'const struct __cuda_builtin_blockIdx_t' lvalue
|       |               `-DeclRefExpr 0x561674e7ba40 'const struct __cuda_builtin_blockIdx_t' lvalue Var 0x561674300288 'blockIdx' 'const struct __cuda_builtin_blockIdx_t'
|       `-PseudoObjectExpr 0x561674e7bdc8 'unsigned int'
|         |-MSPropertyRefExpr 0x561674e7bd28 '<pseudo-object type>' lvalue
|         | `-OpaqueValueExpr 0x561674e7bd10 'const struct __cuda_builtin_threadIdx_t' lvalue
|         |   `-DeclRefExpr 0x561674e7bcb8 'const struct __cuda_builtin_threadIdx_t' lvalue Var 0x561674a05a50 'threadIdx' 'const struct __cuda_builtin_threadIdx_t'
|         |-OpaqueValueExpr 0x561674e7bd10 'const struct __cuda_builtin_threadIdx_t' lvalue
|         | `-DeclRefExpr 0x561674e7bcb8 'const struct __cuda_builtin_threadIdx_t' lvalue Var 0x561674a05a50 'threadIdx' 'const struct __cuda_builtin_threadIdx_t'
|         `-CallExpr 0x561674e7bda8 'unsigned int'
|           `-ImplicitCastExpr 0x561674e7bd90 'unsigned int (*)(void)' <FunctionToPointerDecay>
|             `-MemberExpr 0x561674e7bd60 'unsigned int (void)' lvalue .__fetch_builtin_x 0x5616742f97c0
|               `-OpaqueValueExpr 0x561674e7bd10 'const struct __cuda_builtin_threadIdx_t' lvalue
|                 `-DeclRefExpr 0x561674e7bcb8 'const struct __cuda_builtin_threadIdx_t' lvalue Var 0x561674a05a50 'threadIdx' 'const struct __cuda_builtin_threadIdx_t'
|-DeclStmt 0x561674e7bf48
| `-VarDecl 0x561674e7be50  used latLong 'LatLong *' cinit
|   `-BinaryOperator 0x561674e7bf28 'LatLong *' '+'
|     |-ImplicitCastExpr 0x561674e7bef8 'LatLong *' <LValueToRValue>
|     | `-DeclRefExpr 0x561674e7beb8 'LatLong *' lvalue ParmVar 0x561674e7b268 'd_locations' 'LatLong *'
|     `-ImplicitCastExpr 0x561674e7bf10 'int' <LValueToRValue>
|       `-DeclRefExpr 0x561674e7bed8 'int' lvalue Var 0x561674e7b6f0 'globalId' 'int'
`-IfStmt 0x561674e7c948
  |-BinaryOperator 0x561674e7bfd0 '_Bool' '<'
  | |-ImplicitCastExpr 0x561674e7bfa0 'int' <LValueToRValue>
  | | `-DeclRefExpr 0x561674e7bf60 'int' lvalue Var 0x561674e7b6f0 'globalId' 'int'
  | `-ImplicitCastExpr 0x561674e7bfb8 'int' <LValueToRValue>
  |   `-DeclRefExpr 0x561674e7bf80 'int' lvalue ParmVar 0x561674e7b368 'numRecords' 'int'
  `-CompoundStmt 0x561674e7c928
    |-DeclStmt 0x561674e7c100
    | `-VarDecl 0x561674e7c008  used dist 'float *' cinit
    |   `-BinaryOperator 0x561674e7c0e0 'float *' '+'
    |     |-ImplicitCastExpr 0x561674e7c0b0 'float *' <LValueToRValue>
    |     | `-DeclRefExpr 0x561674e7c070 'float *' lvalue ParmVar 0x561674e7b2e8 'd_distances' 'float *'
    |     `-ImplicitCastExpr 0x561674e7c0c8 'int' <LValueToRValue>
    |       `-DeclRefExpr 0x561674e7c090 'int' lvalue Var 0x561674e7b6f0 'globalId' 'int'
    `-BinaryOperator 0x561674e7c908 'float' lvalue '='
      |-UnaryOperator 0x561674e7c150 'float' lvalue prefix '*' cannot overflow
      | `-ImplicitCastExpr 0x561674e7c138 'float *' <LValueToRValue>
      |   `-DeclRefExpr 0x561674e7c118 'float *' lvalue Var 0x561674e7c008 'dist' 'float *'
      `-CStyleCastExpr 0x561674e7c8e0 'float' <NoOp>
        `-CallExpr 0x561674e7c8a0 'float'
          |-ImplicitCastExpr 0x561674e7c888 'float (*)(float)' <FunctionToPointerDecay>
          | `-DeclRefExpr 0x561674e7c868 'float (float)' lvalue Function 0x56167490cf30 'sqrt' 'float (float)'
          `-BinaryOperator 0x561674e7c5e8 'float' '+'
            |-BinaryOperator 0x561674e7c3b8 'float' '*'
            | |-ParenExpr 0x561674e7c2a0 'float'
            | | `-BinaryOperator 0x561674e7c280 'float' '-'
            | |   |-ImplicitCastExpr 0x561674e7c250 'float' <LValueToRValue>
            | |   | `-DeclRefExpr 0x561674e7c1c8 'float' lvalue ParmVar 0x561674e7b3e8 'lat' 'float'
            | |   `-ImplicitCastExpr 0x561674e7c268 'float' <LValueToRValue>
            | |     `-MemberExpr 0x561674e7c220 'float' lvalue ->lat 0x561674e792d0
            | |       `-ImplicitCastExpr 0x561674e7c208 'LatLong *' <LValueToRValue>
            | |         `-DeclRefExpr 0x561674e7c1e8 'LatLong *' lvalue Var 0x561674e7be50 'latLong' 'LatLong *'
            | `-ParenExpr 0x561674e7c398 'float'
            |   `-BinaryOperator 0x561674e7c378 'float' '-'
            |     |-ImplicitCastExpr 0x561674e7c348 'float' <LValueToRValue>
            |     | `-DeclRefExpr 0x561674e7c2c0 'float' lvalue ParmVar 0x561674e7b3e8 'lat' 'float'
            |     `-ImplicitCastExpr 0x561674e7c360 'float' <LValueToRValue>
            |       `-MemberExpr 0x561674e7c318 'float' lvalue ->lat 0x561674e792d0
            |         `-ImplicitCastExpr 0x561674e7c300 'LatLong *' <LValueToRValue>
            |           `-DeclRefExpr 0x561674e7c2e0 'LatLong *' lvalue Var 0x561674e7be50 'latLong' 'LatLong *'
            `-BinaryOperator 0x561674e7c5c8 'float' '*'
              |-ParenExpr 0x561674e7c4b0 'float'
              | `-BinaryOperator 0x561674e7c490 'float' '-'
              |   |-ImplicitCastExpr 0x561674e7c460 'float' <LValueToRValue>
              |   | `-DeclRefExpr 0x561674e7c3d8 'float' lvalue ParmVar 0x561674e7b468 'lng' 'float'
              |   `-ImplicitCastExpr 0x561674e7c478 'float' <LValueToRValue>
              |     `-MemberExpr 0x561674e7c430 'float' lvalue ->lng 0x561674e79338
              |       `-ImplicitCastExpr 0x561674e7c418 'LatLong *' <LValueToRValue>
              |         `-DeclRefExpr 0x561674e7c3f8 'LatLong *' lvalue Var 0x561674e7be50 'latLong' 'LatLong *'
              `-ParenExpr 0x561674e7c5a8 'float'
                `-BinaryOperator 0x561674e7c588 'float' '-'
                  |-ImplicitCastExpr 0x561674e7c558 'float' <LValueToRValue>
                  | `-DeclRefExpr 0x561674e7c4d0 'float' lvalue ParmVar 0x561674e7b468 'lng' 'float'
                  `-ImplicitCastExpr 0x561674e7c570 'float' <LValueToRValue>
                    `-MemberExpr 0x561674e7c528 'float' lvalue ->lng 0x561674e79338
                      `-ImplicitCastExpr 0x561674e7c510 'LatLong *' <LValueToRValue>
                        `-DeclRefExpr 0x561674e7c4f0 'LatLong *' lvalue Var 0x561674e7be50 'latLong' 'LatLong *'
nn_cuda.cu:114:2: warning: 'cudaThreadSynchronize' is deprecated [-Wdeprecated-declarations]
        cudaThreadSynchronize();
        ^
/usr/local/cuda-11.2//include/cuda_runtime_api.h:1011:8: note: 'cudaThreadSynchronize' has been explicitly marked deprecated here
extern __CUDA_DEPRECATED __host__ cudaError_t CUDARTAPI cudaThreadSynchronize(void);
       ^
/usr/local/cuda-11.2//include/cuda_runtime_api.h:255:42: note: expanded from macro '__CUDA_DEPRECATED'
#define __CUDA_DEPRECATED __attribute__((deprecated))
                                         ^
nn_cuda.cu:120:2: warning: 'cudaThreadSynchronize' is deprecated [-Wdeprecated-declarations]
        cudaThreadSynchronize();
        ^
/usr/local/cuda-11.2//include/cuda_runtime_api.h:1011:8: note: 'cudaThreadSynchronize' has been explicitly marked deprecated here
extern __CUDA_DEPRECATED __host__ cudaError_t CUDARTAPI cudaThreadSynchronize(void);
       ^
/usr/local/cuda-11.2//include/cuda_runtime_api.h:255:42: note: expanded from macro '__CUDA_DEPRECATED'
#define __CUDA_DEPRECATED __attribute__((deprecated))
                                         ^
nn_cuda.cu:171:5: warning: 'cudaThreadSynchronize' is deprecated [-Wdeprecated-declarations]
    cudaThreadSynchronize();
    ^
/usr/local/cuda-11.2//include/cuda_runtime_api.h:1011:8: note: 'cudaThreadSynchronize' has been explicitly marked deprecated here
extern __CUDA_DEPRECATED __host__ cudaError_t CUDARTAPI cudaThreadSynchronize(void);
       ^
/usr/local/cuda-11.2//include/cuda_runtime_api.h:255:42: note: expanded from macro '__CUDA_DEPRECATED'
#define __CUDA_DEPRECATED __attribute__((deprecated))
                                         ^
Emitting fn: main
main
CompoundStmt 0x561674f0d158
|-DeclStmt 0x561674e7ced0
| `-VarDecl 0x561674e7ce48  used i 'int' cinit
|   `-IntegerLiteral 0x561674e7ceb0 'int' 0
|-DeclStmt 0x561674e7d000
| |-VarDecl 0x561674e7cf00  used lat 'float'
| `-VarDecl 0x561674e7cf80  used lng 'float'
|-DeclStmt 0x561674e7d2c0
| |-VarDecl 0x561674e7d030  used quiet 'int' cinit
| | `-IntegerLiteral 0x561674e7d098 'int' 0
| |-VarDecl 0x561674e7d0d0  used timing 'int' cinit
| | `-IntegerLiteral 0x561674e7d138 'int' 0
| |-VarDecl 0x561674e7d170  used platform 'int' cinit
| | `-IntegerLiteral 0x561674e7d1d8 'int' 0
| `-VarDecl 0x561674e7d210  used device 'int' cinit
|   `-IntegerLiteral 0x561674e7d278 'int' 0
|-DeclStmt 0x561674eaf888
| `-VarDecl 0x561674e7d478  used records 'std::vector<Record>':'class std::vector<struct record>' callinit destroyed
|   `-CXXConstructExpr 0x561674eaf860 'std::vector<Record>':'class std::vector<struct record>' 'void (void) noexcept(is_nothrow_default_constructible<class allocator<struct record> >::value)'
|-DeclStmt 0x561674edde28
| `-VarDecl 0x561674eafa38  used locations 'std::vector<LatLong>':'class std::vector<struct latLong>' callinit destroyed
|   `-CXXConstructExpr 0x561674edde00 'std::vector<LatLong>':'class std::vector<struct latLong>' 'void (void) noexcept(is_nothrow_default_constructible<class allocator<struct latLong> >::value)'
|-DeclStmt 0x561674eddf40
| `-VarDecl 0x561674edded8  used filename 'char[100]'
|-DeclStmt 0x561674eddff8
| `-VarDecl 0x561674eddf70  used resultsCount 'int' cinit
|   `-IntegerLiteral 0x561674eddfd8 'int' 10
|-IfStmt 0x561674ede490
| |-ImplicitCastExpr 0x561674ede388 '_Bool' <IntegralToBoolean>
| | `-CallExpr 0x561674ede2d0 'int'
| |   |-ImplicitCastExpr 0x561674ede2b8 'int (*)(int, char **, char *, int *, float *, float *, int *, int *, int *, int *)' <FunctionToPointerDecay>
| |   | `-DeclRefExpr 0x561674ede240 'int (int, char **, char *, int *, float *, float *, int *, int *, int *, int *)' lvalue Function 0x561674e7b0e0 'parseCommandline' 'int (int, char **, char *, int *, float *, float *, int *, int *, int *, int *)'
| |   |-ImplicitCastExpr 0x561674ede340 'int' <LValueToRValue>
| |   | `-DeclRefExpr 0x561674ede058 'int' lvalue ParmVar 0x561674e7cbd0 'argc' 'int'
| |   |-ImplicitCastExpr 0x561674ede358 'char **':'char **' <LValueToRValue>
| |   | `-DeclRefExpr 0x561674ede078 'char **':'char **' lvalue ParmVar 0x561674e7cc60 'argv' 'char **':'char **'
| |   |-ImplicitCastExpr 0x561674ede370 'char *' <ArrayToPointerDecay>
| |   | `-DeclRefExpr 0x561674ede098 'char[100]' lvalue Var 0x561674edded8 'filename' 'char[100]'
| |   |-UnaryOperator 0x561674ede0d8 'int *' prefix '&' cannot overflow
| |   | `-DeclRefExpr 0x561674ede0b8 'int' lvalue Var 0x561674eddf70 'resultsCount' 'int'
| |   |-UnaryOperator 0x561674ede110 'float *' prefix '&' cannot overflow
| |   | `-DeclRefExpr 0x561674ede0f0 'float' lvalue Var 0x561674e7cf00 'lat' 'float'
| |   |-UnaryOperator 0x561674ede148 'float *' prefix '&' cannot overflow
| |   | `-DeclRefExpr 0x561674ede128 'float' lvalue Var 0x561674e7cf80 'lng' 'float'
| |   |-UnaryOperator 0x561674ede180 'int *' prefix '&' cannot overflow
| |   | `-DeclRefExpr 0x561674ede160 'int' lvalue Var 0x561674e7d030 'quiet' 'int'
| |   |-UnaryOperator 0x561674ede1b8 'int *' prefix '&' cannot overflow
| |   | `-DeclRefExpr 0x561674ede198 'int' lvalue Var 0x561674e7d0d0 'timing' 'int'
| |   |-UnaryOperator 0x561674ede1f0 'int *' prefix '&' cannot overflow
| |   | `-DeclRefExpr 0x561674ede1d0 'int' lvalue Var 0x561674e7d170 'platform' 'int'
| |   `-UnaryOperator 0x561674ede228 'int *' prefix '&' cannot overflow
| |     `-DeclRefExpr 0x561674ede208 'int' lvalue Var 0x561674e7d210 'device' 'int'
| `-CompoundStmt 0x561674ede470
|   |-CallExpr 0x561674ede420 'void'
|   | `-ImplicitCastExpr 0x561674ede408 'void (*)(void)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x561674ede3e8 'void (void)' lvalue Function 0x561674e7a958 'printUsage' 'void (void)'
|   `-ReturnStmt 0x561674ede460
|     `-IntegerLiteral 0x561674ede440 'int' 0
|-DeclStmt 0x561674edeb60
| `-VarDecl 0x561674ede4d0  used ___my_clock_starttotal 'struct timespec':'struct timespec' callinit
|   `-CXXConstructExpr 0x561674edeb38 'struct timespec':'struct timespec' 'void (void) noexcept'
|-DeclStmt 0x561674edec28
| `-VarDecl 0x561674edeb98  used ___my_clock_endtotal 'struct timespec':'struct timespec' callinit
|   `-CXXConstructExpr 0x561674edec00 'struct timespec':'struct timespec' 'void (void) noexcept'
|-CallExpr 0x561674eded20 'cudaError_t':'enum cudaError'
| `-ImplicitCastExpr 0x561674eded08 'cudaError_t (*)(void)' <FunctionToPointerDecay>
|   `-DeclRefExpr 0x561674edec90 'cudaError_t (void)' lvalue Function 0x5616743de7d0 'cudaDeviceSynchronize' 'cudaError_t (void)'
|-CallExpr 0x561674edeed0 'int'
| |-ImplicitCastExpr 0x561674edeeb8 'int (*)(clockid_t, struct timespec *) throw()' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x561674edee38 'int (clockid_t, struct timespec *) throw()' lvalue Function 0x561674a52830 'clock_gettime' 'int (clockid_t, struct timespec *) throw()'
| |-IntegerLiteral 0x561674eded88 'int' 1
| `-UnaryOperator 0x561674ededc8 'struct timespec *' prefix '&' cannot overflow
|   `-DeclRefExpr 0x561674ededa8 'struct timespec':'struct timespec' lvalue Var 0x561674ede4d0 '___my_clock_starttotal' 'struct timespec':'struct timespec'
|-DeclStmt 0x561674edf110
| `-VarDecl 0x561674edef18  used numRecords 'int' cinit
|   `-CallExpr 0x561674edf0c0 'int'
|     |-ImplicitCastExpr 0x561674edf0a8 'int (*)(char *, std::vector<Record> &, std::vector<LatLong> &)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x561674edf028 'int (char *, std::vector<Record> &, std::vector<LatLong> &)' lvalue Function 0x561674e7a320 'loadData' 'int (char *, std::vector<Record> &, std::vector<LatLong> &)'
|     |-ImplicitCastExpr 0x561674edf0f8 'char *' <ArrayToPointerDecay>
|     | `-DeclRefExpr 0x561674edefc8 'char[100]' lvalue Var 0x561674edded8 'filename' 'char[100]'
|     |-DeclRefExpr 0x561674edefe8 'std::vector<Record>':'class std::vector<struct record>' lvalue Var 0x561674e7d478 'records' 'std::vector<Record>':'class std::vector<struct record>'
|     `-DeclRefExpr 0x561674edf008 'std::vector<LatLong>':'class std::vector<struct latLong>' lvalue Var 0x561674eafa38 'locations' 'std::vector<LatLong>':'class std::vector<struct latLong>'
|-IfStmt 0x561674edf230
| |-BinaryOperator 0x561674edf198 '_Bool' '>'
| | |-ImplicitCastExpr 0x561674edf168 'int' <LValueToRValue>
| | | `-DeclRefExpr 0x561674edf128 'int' lvalue Var 0x561674eddf70 'resultsCount' 'int'
| | `-ImplicitCastExpr 0x561674edf180 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x561674edf148 'int' lvalue Var 0x561674edef18 'numRecords' 'int'
| `-BinaryOperator 0x561674edf210 'int' lvalue '='
|   |-DeclRefExpr 0x561674edf1b8 'int' lvalue Var 0x561674eddf70 'resultsCount' 'int'
|   `-ImplicitCastExpr 0x561674edf1f8 'int' <LValueToRValue>
|     `-DeclRefExpr 0x561674edf1d8 'int' lvalue Var 0x561674edef18 'numRecords' 'int'
|-DeclStmt 0x561674edf2d0
| `-VarDecl 0x561674edf268  used distances 'float *'
|-DeclStmt 0x561674edf360
| `-VarDecl 0x561674edf2f8  used d_locations 'LatLong *'
|-DeclStmt 0x561674edf3f8
| `-VarDecl 0x561674edf390  used d_distances 'float *'
|-DeclStmt 0x561674ee06b8
| `-VarDecl 0x561674edf420  used deviceProp 'struct cudaDeviceProp' callinit
|   `-CXXConstructExpr 0x561674ee0690 'struct cudaDeviceProp' 'void (void) noexcept'
|-CallExpr 0x561674ee0830 'cudaError_t':'enum cudaError'
| |-ImplicitCastExpr 0x561674ee0818 'cudaError_t (*)(struct cudaDeviceProp *, int)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x561674ee0798 'cudaError_t (struct cudaDeviceProp *, int)' lvalue Function 0x5616743e4fb8 'cudaGetDeviceProperties' 'cudaError_t (struct cudaDeviceProp *, int)'
| |-UnaryOperator 0x561674ee0738 'struct cudaDeviceProp *' prefix '&' cannot overflow
| | `-DeclRefExpr 0x561674ee0718 'struct cudaDeviceProp' lvalue Var 0x561674edf420 'deviceProp' 'struct cudaDeviceProp'
| `-IntegerLiteral 0x561674ee0778 'int' 0
|-CallExpr 0x561674ee08e0 'cudaError_t':'enum cudaError'
| `-ImplicitCastExpr 0x561674ee08c8 'cudaError_t (*)(void)' <FunctionToPointerDecay>
|   `-DeclRefExpr 0x561674ee08a8 'cudaError_t (void)' lvalue Function 0x5616743e1238 'cudaThreadSynchronize' 'cudaError_t (void)'
|-DeclStmt 0x561674ee0a58
| `-VarDecl 0x561674ee0918  used maxGridX 'unsigned long' cinit
|   `-ImplicitCastExpr 0x561674ee0a40 'unsigned long' <IntegralCast>
|     `-ImplicitCastExpr 0x561674ee0a28 'int' <LValueToRValue>
|       `-ArraySubscriptExpr 0x561674ee0a08 'int' lvalue
|         |-ImplicitCastExpr 0x561674ee09f0 'int *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x561674ee09a0 'int[3]' lvalue .maxGridSize 0x56167436a510
|         |   `-DeclRefExpr 0x561674ee0980 'struct cudaDeviceProp' lvalue Var 0x561674edf420 'deviceProp' 'struct cudaDeviceProp'
|         `-IntegerLiteral 0x561674ee09d0 'int' 0
|-DeclStmt 0x561674ee0c68
| `-VarDecl 0x561674ee0a88  used threadsPerBlock 'unsigned long' cinit
|   `-ImplicitCastExpr 0x561674ee0c50 'unsigned long' <IntegralCast>
|     `-ConditionalOperator 0x561674ee0c20 'int'
|       |-BinaryOperator 0x561674ee0b78 '_Bool' '>'
|       | |-ImplicitCastExpr 0x561674ee0b60 'int' <LValueToRValue>
|       | | `-MemberExpr 0x561674ee0b10 'int' lvalue .maxThreadsPerBlock 0x56167436a3a0
|       | |   `-DeclRefExpr 0x561674ee0af0 'struct cudaDeviceProp' lvalue Var 0x561674edf420 'deviceProp' 'struct cudaDeviceProp'
|       | `-IntegerLiteral 0x561674ee0b40 'int' 256
|       |-IntegerLiteral 0x561674ee0b98 'int' 256
|       `-ImplicitCastExpr 0x561674ee0c08 'int' <LValueToRValue>
|         `-MemberExpr 0x561674ee0bd8 'int' lvalue .maxThreadsPerBlock 0x56167436a3a0
|           `-DeclRefExpr 0x561674ee0bb8 'struct cudaDeviceProp' lvalue Var 0x561674edf420 'deviceProp' 'struct cudaDeviceProp'
|-DeclStmt 0x561674ee0cf8
| `-VarDecl 0x561674ee0c90  used totalDeviceMemory 'size_t':'unsigned long'
|-DeclStmt 0x561674ee0d88
| `-VarDecl 0x561674ee0d20  used freeDeviceMemory 'size_t':'unsigned long'
|-CallExpr 0x561674ee0f10 'cudaError_t':'enum cudaError'
| |-ImplicitCastExpr 0x561674ee0ef8 'cudaError_t (*)(size_t *, size_t *)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x561674ee0e80 'cudaError_t (size_t *, size_t *)' lvalue Function 0x5616744045f8 'cudaMemGetInfo' 'cudaError_t (size_t *, size_t *)'
| |-UnaryOperator 0x561674ee0e08 'size_t *' prefix '&' cannot overflow
| | `-DeclRefExpr 0x561674ee0de8 'size_t':'unsigned long' lvalue Var 0x561674ee0d20 'freeDeviceMemory' 'size_t':'unsigned long'
| `-UnaryOperator 0x561674ee0e68 'size_t *' prefix '&' cannot overflow
|   `-DeclRefExpr 0x561674ee0e48 'size_t':'unsigned long' lvalue Var 0x561674ee0c90 'totalDeviceMemory' 'size_t':'unsigned long'
|-CallExpr 0x561674ee0fc0 'cudaError_t':'enum cudaError'
| `-ImplicitCastExpr 0x561674ee0fa8 'cudaError_t (*)(void)' <FunctionToPointerDecay>
|   `-DeclRefExpr 0x561674ee0f88 'cudaError_t (void)' lvalue Function 0x5616743e1238 'cudaThreadSynchronize' 'cudaError_t (void)'
|-DeclStmt 0x561674ee1148
| `-VarDecl 0x561674ee0ff8  used usableDeviceMemory 'unsigned long' cinit
|   `-BinaryOperator 0x561674ee1128 'unsigned long' '/'
|     |-BinaryOperator 0x561674ee10d0 'unsigned long' '*'
|     | |-ImplicitCastExpr 0x561674ee10a0 'size_t':'unsigned long' <LValueToRValue>
|     | | `-DeclRefExpr 0x561674ee1060 'size_t':'unsigned long' lvalue Var 0x561674ee0d20 'freeDeviceMemory' 'size_t':'unsigned long'
|     | `-ImplicitCastExpr 0x561674ee10b8 'unsigned long' <IntegralCast>
|     |   `-IntegerLiteral 0x561674ee1080 'int' 85
|     `-ImplicitCastExpr 0x561674ee1110 'unsigned long' <IntegralCast>
|       `-IntegerLiteral 0x561674ee10f0 'int' 100
|-DeclStmt 0x561674ee1270
| `-VarDecl 0x561674ee1178  used maxThreads 'unsigned long' cinit
|   `-BinaryOperator 0x561674ee1250 'unsigned long' '/'
|     |-ImplicitCastExpr 0x561674ee1220 'unsigned long' <LValueToRValue>
|     | `-DeclRefExpr 0x561674ee11e0 'unsigned long' lvalue Var 0x561674ee0ff8 'usableDeviceMemory' 'unsigned long'
|     `-ImplicitCastExpr 0x561674ee1238 'unsigned long' <IntegralCast>
|       `-IntegerLiteral 0x561674ee1200 'int' 12
|-IfStmt 0x561674ee1550
| |-BinaryOperator 0x561674ee1310 '_Bool' '>'
| | |-ImplicitCastExpr 0x561674ee12f8 'unsigned long' <IntegralCast>
| | | `-ImplicitCastExpr 0x561674ee12c8 'int' <LValueToRValue>
| | |   `-DeclRefExpr 0x561674ee1288 'int' lvalue Var 0x561674edef18 'numRecords' 'int'
| | `-ImplicitCastExpr 0x561674ee12e0 'unsigned long' <LValueToRValue>
| |   `-DeclRefExpr 0x561674ee12a8 'unsigned long' lvalue Var 0x561674ee1178 'maxThreads' 'unsigned long'
| `-CompoundStmt 0x561674ee1530
|   |-CallExpr 0x561674ee1400 'int'
|   | |-ImplicitCastExpr 0x561674ee13e8 'int (*)(FILE *__restrict, const char *__restrict, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x561674ee13c8 'int (FILE *__restrict, const char *__restrict, ...)' lvalue Function 0x561674a2fda8 'fprintf' 'int (FILE *__restrict, const char *__restrict, ...)'
|   | |-ImplicitCastExpr 0x561674ee1430 'struct _IO_FILE *' <LValueToRValue>
|   | | `-DeclRefExpr 0x561674ee1378 'struct _IO_FILE *' lvalue Var 0x561674a17050 'stderr' 'struct _IO_FILE *'
|   | `-ImplicitCastExpr 0x561674ee1448 'const char *' <ArrayToPointerDecay>
|   |   `-StringLiteral 0x561674ee1398 'const char[25]' lvalue "Error: Input too large.\n"
|   `-CallExpr 0x561674ee1508 'void'
|     |-ImplicitCastExpr 0x561674ee14f0 'void (*)(int) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x561674ee14c8 'void (int) __attribute__((noreturn)) throw()' lvalue Function 0x5616741764c0 'exit' 'void (int) __attribute__((noreturn)) throw()' (UsingShadow 0x561674215210 'exit')
|     `-IntegerLiteral 0x561674ee14a8 'int' 1
|-DeclStmt 0x561674ee1768
| `-VarDecl 0x561674ee1588  used blocks 'unsigned long' cinit
|   `-BinaryOperator 0x561674ee1748 'unsigned long' '/'
|     |-ParenExpr 0x561674ee16f0 'unsigned long'
|     | `-BinaryOperator 0x561674ee16d0 'unsigned long' '-'
|     |   |-BinaryOperator 0x561674ee1678 'unsigned long' '+'
|     |   | |-ImplicitCastExpr 0x561674ee1660 'unsigned long' <IntegralCast>
|     |   | | `-ImplicitCastExpr 0x561674ee1630 'int' <LValueToRValue>
|     |   | |   `-DeclRefExpr 0x561674ee15f0 'int' lvalue Var 0x561674edef18 'numRecords' 'int'
|     |   | `-ImplicitCastExpr 0x561674ee1648 'unsigned long' <LValueToRValue>
|     |   |   `-DeclRefExpr 0x561674ee1610 'unsigned long' lvalue Var 0x561674ee0a88 'threadsPerBlock' 'unsigned long'
|     |   `-ImplicitCastExpr 0x561674ee16b8 'unsigned long' <IntegralCast>
|     |     `-IntegerLiteral 0x561674ee1698 'int' 1
|     `-ImplicitCastExpr 0x561674ee1730 'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x561674ee1710 'unsigned long' lvalue Var 0x561674ee0a88 'threadsPerBlock' 'unsigned long'
|-DeclStmt 0x561674ee1960
| `-VarDecl 0x561674ee1798  used gridY 'unsigned long' cinit
|   `-BinaryOperator 0x561674ee1940 'unsigned long' '/'
|     |-ParenExpr 0x561674ee18e8 'unsigned long'
|     | `-BinaryOperator 0x561674ee18c8 'unsigned long' '-'
|     |   |-BinaryOperator 0x561674ee1870 'unsigned long' '+'
|     |   | |-ImplicitCastExpr 0x561674ee1840 'unsigned long' <LValueToRValue>
|     |   | | `-DeclRefExpr 0x561674ee1800 'unsigned long' lvalue Var 0x561674ee1588 'blocks' 'unsigned long'
|     |   | `-ImplicitCastExpr 0x561674ee1858 'unsigned long' <LValueToRValue>
|     |   |   `-DeclRefExpr 0x561674ee1820 'unsigned long' lvalue Var 0x561674ee0918 'maxGridX' 'unsigned long'
|     |   `-ImplicitCastExpr 0x561674ee18b0 'unsigned long' <IntegralCast>
|     |     `-IntegerLiteral 0x561674ee1890 'int' 1
|     `-ImplicitCastExpr 0x561674ee1928 'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x561674ee1908 'unsigned long' lvalue Var 0x561674ee0918 'maxGridX' 'unsigned long'
|-DeclStmt 0x561674ee1b58
| `-VarDecl 0x561674ee1990  used gridX 'unsigned long' cinit
|   `-BinaryOperator 0x561674ee1b38 'unsigned long' '/'
|     |-ParenExpr 0x561674ee1ae0 'unsigned long'
|     | `-BinaryOperator 0x561674ee1ac0 'unsigned long' '-'
|     |   |-BinaryOperator 0x561674ee1a68 'unsigned long' '+'
|     |   | |-ImplicitCastExpr 0x561674ee1a38 'unsigned long' <LValueToRValue>
|     |   | | `-DeclRefExpr 0x561674ee19f8 'unsigned long' lvalue Var 0x561674ee1588 'blocks' 'unsigned long'
|     |   | `-ImplicitCastExpr 0x561674ee1a50 'unsigned long' <LValueToRValue>
|     |   |   `-DeclRefExpr 0x561674ee1a18 'unsigned long' lvalue Var 0x561674ee1798 'gridY' 'unsigned long'
|     |   `-ImplicitCastExpr 0x561674ee1aa8 'unsigned long' <IntegralCast>
|     |     `-IntegerLiteral 0x561674ee1a88 'int' 1
|     `-ImplicitCastExpr 0x561674ee1b20 'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x561674ee1b00 'unsigned long' lvalue Var 0x561674ee1798 'gridY' 'unsigned long'
|-DeclStmt 0x561674ee1d10
| `-VarDecl 0x561674ee1b80  used gridDim 'dim3':'struct dim3' callinit
|   `-CXXConstructExpr 0x561674ee1cd0 'dim3':'struct dim3' 'void (unsigned int, unsigned int, unsigned int)'
|     |-ImplicitCastExpr 0x561674ee1c68 'unsigned int' <IntegralCast>
|     | `-ImplicitCastExpr 0x561674ee1c50 'unsigned long' <LValueToRValue>
|     |   `-DeclRefExpr 0x561674ee1be8 'unsigned long' lvalue Var 0x561674ee1990 'gridX' 'unsigned long'
|     |-ImplicitCastExpr 0x561674ee1c98 'unsigned int' <IntegralCast>
|     | `-ImplicitCastExpr 0x561674ee1c80 'unsigned long' <LValueToRValue>
|     |   `-DeclRefExpr 0x561674ee1c08 'unsigned long' lvalue Var 0x561674ee1798 'gridY' 'unsigned long'
|     `-CXXDefaultArgExpr 0x561674ee1cb0 'unsigned int'
|-IfStmt 0x561674ee2da8
| |-CXXBoolLiteralExpr 0x561674ee1d28 '_Bool' false
| `-CompoundStmt 0x561674ee2d48
|   |-CallExpr 0x561674ee1ed0 'int'
|   | |-ImplicitCastExpr 0x561674ee1eb8 'int (*)(const char *__restrict, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x561674ee1e38 'int (const char *__restrict, ...)' lvalue Function 0x561674a30018 'printf' 'int (const char *__restrict, ...)'
|   | |-ImplicitCastExpr 0x561674ee1f00 'const char *' <ArrayToPointerDecay>
|   | | `-StringLiteral 0x561674ee1d88 'const char[24]' lvalue "totalDeviceMemory: %lu\n"
|   | `-CStyleCastExpr 0x561674ee1e10 'unsigned long' <NoOp>
|   |   `-ImplicitCastExpr 0x561674ee1df8 'size_t':'unsigned long' <LValueToRValue> part_of_explicit_cast
|   |     `-DeclRefExpr 0x561674ee1dc0 'size_t':'unsigned long' lvalue Var 0x561674ee0c90 'totalDeviceMemory' 'size_t':'unsigned long'
|   |-CallExpr 0x561674ee2050 'int'
|   | |-ImplicitCastExpr 0x561674ee2038 'int (*)(const char *__restrict, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x561674ee2018 'int (const char *__restrict, ...)' lvalue Function 0x561674a30018 'printf' 'int (const char *__restrict, ...)'
|   | |-ImplicitCastExpr 0x561674ee2080 'const char *' <ArrayToPointerDecay>
|   | | `-StringLiteral 0x561674ee1f68 'const char[23]' lvalue "freeDeviceMemory: %lu\n"
|   | `-CStyleCastExpr 0x561674ee1ff0 'unsigned long' <NoOp>
|   |   `-ImplicitCastExpr 0x561674ee1fd8 'size_t':'unsigned long' <LValueToRValue> part_of_explicit_cast
|   |     `-DeclRefExpr 0x561674ee1fa0 'size_t':'unsigned long' lvalue Var 0x561674ee0d20 'freeDeviceMemory' 'size_t':'unsigned long'
|   |-CallExpr 0x561674ee21d0 'int'
|   | |-ImplicitCastExpr 0x561674ee21b8 'int (*)(const char *__restrict, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x561674ee2198 'int (const char *__restrict, ...)' lvalue Function 0x561674a30018 'printf' 'int (const char *__restrict, ...)'
|   | |-ImplicitCastExpr 0x561674ee2200 'const char *' <ArrayToPointerDecay>
|   | | `-StringLiteral 0x561674ee20e8 'const char[25]' lvalue "usableDeviceMemory: %lu\n"
|   | `-CStyleCastExpr 0x561674ee2170 'unsigned long' <NoOp>
|   |   `-ImplicitCastExpr 0x561674ee2158 'unsigned long' <LValueToRValue> part_of_explicit_cast
|   |     `-DeclRefExpr 0x561674ee2120 'unsigned long' lvalue Var 0x561674ee0ff8 'usableDeviceMemory' 'unsigned long'
|   |-CallExpr 0x561674ee2348 'int'
|   | |-ImplicitCastExpr 0x561674ee2330 'int (*)(const char *__restrict, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x561674ee2310 'int (const char *__restrict, ...)' lvalue Function 0x561674a30018 'printf' 'int (const char *__restrict, ...)'
|   | |-ImplicitCastExpr 0x561674ee2378 'const char *' <ArrayToPointerDecay>
|   | | `-StringLiteral 0x561674ee2268 'const char[15]' lvalue "maxGridX: %lu\n"
|   | `-CStyleCastExpr 0x561674ee22e8 'unsigned long' <NoOp>
|   |   `-ImplicitCastExpr 0x561674ee22d0 'unsigned long' <LValueToRValue> part_of_explicit_cast
|   |     `-DeclRefExpr 0x561674ee2298 'unsigned long' lvalue Var 0x561674ee0918 'maxGridX' 'unsigned long'
|   |-CallExpr 0x561674ee2590 'int'
|   | |-ImplicitCastExpr 0x561674ee2578 'int (*)(const char *__restrict, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x561674ee2558 'int (const char *__restrict, ...)' lvalue Function 0x561674a30018 'printf' 'int (const char *__restrict, ...)'
|   | |-ImplicitCastExpr 0x561674ee25c0 'const char *' <ArrayToPointerDecay>
|   | | `-StringLiteral 0x561674ee2458 'const char[36]' lvalue "deviceProp.maxThreadsPerBlock: %lu\n"
|   | `-CStyleCastExpr 0x561674ee2530 'unsigned long' <NoOp>
|   |   `-ImplicitCastExpr 0x561674ee2518 'unsigned long' <IntegralCast> part_of_explicit_cast
|   |     `-ImplicitCastExpr 0x561674ee2500 'int' <LValueToRValue> part_of_explicit_cast
|   |       `-MemberExpr 0x561674ee24b8 'int' lvalue .maxThreadsPerBlock 0x56167436a3a0
|   |         `-DeclRefExpr 0x561674ee2498 'struct cudaDeviceProp' lvalue Var 0x561674edf420 'deviceProp' 'struct cudaDeviceProp'
|   |-CallExpr 0x561674ee2710 'int'
|   | |-ImplicitCastExpr 0x561674ee26f8 'int (*)(const char *__restrict, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x561674ee26d8 'int (const char *__restrict, ...)' lvalue Function 0x561674a30018 'printf' 'int (const char *__restrict, ...)'
|   | |-ImplicitCastExpr 0x561674ee2740 'const char *' <ArrayToPointerDecay>
|   | | `-StringLiteral 0x561674ee2628 'const char[22]' lvalue "threadsPerBlock: %lu\n"
|   | `-CStyleCastExpr 0x561674ee26b0 'unsigned long' <NoOp>
|   |   `-ImplicitCastExpr 0x561674ee2698 'unsigned long' <LValueToRValue> part_of_explicit_cast
|   |     `-DeclRefExpr 0x561674ee2660 'unsigned long' lvalue Var 0x561674ee0a88 'threadsPerBlock' 'unsigned long'
|   |-CallExpr 0x561674ee2888 'int'
|   | |-ImplicitCastExpr 0x561674ee2870 'int (*)(const char *__restrict, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x561674ee2850 'int (const char *__restrict, ...)' lvalue Function 0x561674a30018 'printf' 'int (const char *__restrict, ...)'
|   | |-ImplicitCastExpr 0x561674ee28b8 'const char *' <ArrayToPointerDecay>
|   | | `-StringLiteral 0x561674ee27a8 'const char[17]' lvalue "maxThreads: %lu\n"
|   | `-CStyleCastExpr 0x561674ee2828 'unsigned long' <NoOp>
|   |   `-ImplicitCastExpr 0x561674ee2810 'unsigned long' <LValueToRValue> part_of_explicit_cast
|   |     `-DeclRefExpr 0x561674ee27d8 'unsigned long' lvalue Var 0x561674ee1178 'maxThreads' 'unsigned long'
|   |-CallExpr 0x561674ee29f8 'int'
|   | |-ImplicitCastExpr 0x561674ee29e0 'int (*)(const char *__restrict, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x561674ee29c0 'int (const char *__restrict, ...)' lvalue Function 0x561674a30018 'printf' 'int (const char *__restrict, ...)'
|   | |-ImplicitCastExpr 0x561674ee2a28 'const char *' <ArrayToPointerDecay>
|   | | `-StringLiteral 0x561674ee2920 'const char[13]' lvalue "blocks: %lu\n"
|   | `-CStyleCastExpr 0x561674ee2998 'unsigned long' <NoOp>
|   |   `-ImplicitCastExpr 0x561674ee2980 'unsigned long' <LValueToRValue> part_of_explicit_cast
|   |     `-DeclRefExpr 0x561674ee2948 'unsigned long' lvalue Var 0x561674ee1588 'blocks' 'unsigned long'
|   |-CallExpr 0x561674ee2b68 'int'
|   | |-ImplicitCastExpr 0x561674ee2b50 'int (*)(const char *__restrict, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x561674ee2b30 'int (const char *__restrict, ...)' lvalue Function 0x561674a30018 'printf' 'int (const char *__restrict, ...)'
|   | |-ImplicitCastExpr 0x561674ee2b98 'const char *' <ArrayToPointerDecay>
|   | | `-StringLiteral 0x561674ee2a90 'const char[12]' lvalue "gridY: %lu\n"
|   | `-CStyleCastExpr 0x561674ee2b08 'unsigned long' <NoOp>
|   |   `-ImplicitCastExpr 0x561674ee2af0 'unsigned long' <LValueToRValue> part_of_explicit_cast
|   |     `-DeclRefExpr 0x561674ee2ab8 'unsigned long' lvalue Var 0x561674ee1798 'gridY' 'unsigned long'
|   `-CallExpr 0x561674ee2cd8 'int'
|     |-ImplicitCastExpr 0x561674ee2cc0 'int (*)(const char *__restrict, ...)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x561674ee2ca0 'int (const char *__restrict, ...)' lvalue Function 0x561674a30018 'printf' 'int (const char *__restrict, ...)'
|     |-ImplicitCastExpr 0x561674ee2d08 'const char *' <ArrayToPointerDecay>
|     | `-StringLiteral 0x561674ee2c00 'const char[12]' lvalue "gridX: %lu\n"
|     `-CStyleCastExpr 0x561674ee2c78 'unsigned long' <NoOp>
|       `-ImplicitCastExpr 0x561674ee2c60 'unsigned long' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x561674ee2c28 'unsigned long' lvalue Var 0x561674ee1990 'gridX' 'unsigned long'
|-BinaryOperator 0x561674ee2fb8 'float *' lvalue '='
| |-DeclRefExpr 0x561674ee2dc8 'float *' lvalue Var 0x561674edf268 'distances' 'float *'
| `-CStyleCastExpr 0x561674ee2f90 'float *' <BitCast>
|   `-CallExpr 0x561674ee2f50 'void *'
|     |-ImplicitCastExpr 0x561674ee2f38 'void *(*)(size_t) throw()' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x561674ee2ee0 'void *(size_t) throw()' lvalue Function 0x561674173d18 'malloc' 'void *(size_t) throw()' (UsingShadow 0x561674216400 'malloc')
|     `-BinaryOperator 0x561674ee2ec0 'unsigned long' '*'
|       |-UnaryExprOrTypeTraitExpr 0x561674ee2e50 'unsigned long' sizeof 'float'
|       `-ImplicitCastExpr 0x561674ee2ea8 'unsigned long' <IntegralCast>
|         `-ImplicitCastExpr 0x561674ee2e90 'int' <LValueToRValue>
|           `-DeclRefExpr 0x561674ee2e70 'int' lvalue Var 0x561674edef18 'numRecords' 'int'
|-CallExpr 0x561674ee31f8 'cudaError_t':'enum cudaError'
| |-ImplicitCastExpr 0x561674ee31e0 'cudaError_t (*)(void **, size_t)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x561674ee31c0 'cudaError_t (void **, size_t)' lvalue Function 0x5616744008f0 'cudaMalloc' 'cudaError_t (void **, size_t)'
| |-CStyleCastExpr 0x561674ee3088 'void **' <BitCast>
| | `-UnaryOperator 0x561674ee3058 'LatLong **' prefix '&' cannot overflow
| |   `-DeclRefExpr 0x561674ee3038 'LatLong *' lvalue Var 0x561674edf2f8 'd_locations' 'LatLong *'
| `-BinaryOperator 0x561674ee3130 'unsigned long' '*'
|   |-UnaryExprOrTypeTraitExpr 0x561674ee30c0 'unsigned long' sizeof 'LatLong':'struct latLong'
|   `-ImplicitCastExpr 0x561674ee3118 'unsigned long' <IntegralCast>
|     `-ImplicitCastExpr 0x561674ee3100 'int' <LValueToRValue>
|       `-DeclRefExpr 0x561674ee30e0 'int' lvalue Var 0x561674edef18 'numRecords' 'int'
|-CallExpr 0x561674ee3450 'cudaError_t':'enum cudaError'
| |-ImplicitCastExpr 0x561674ee3438 'cudaError_t (*)(void **, size_t)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x561674ee3418 'cudaError_t (void **, size_t)' lvalue Function 0x5616744008f0 'cudaMalloc' 'cudaError_t (void **, size_t)'
| |-CStyleCastExpr 0x561674ee32d8 'void **' <BitCast>
| | `-UnaryOperator 0x561674ee32a8 'float **' prefix '&' cannot overflow
| |   `-DeclRefExpr 0x561674ee3288 'float *' lvalue Var 0x561674edf390 'd_distances' 'float *'
| `-BinaryOperator 0x561674ee3388 'unsigned long' '*'
|   |-UnaryExprOrTypeTraitExpr 0x561674ee3318 'unsigned long' sizeof 'float'
|   `-ImplicitCastExpr 0x561674ee3370 'unsigned long' <IntegralCast>
|     `-ImplicitCastExpr 0x561674ee3358 'int' <LValueToRValue>
|       `-DeclRefExpr 0x561674ee3338 'int' lvalue Var 0x561674edef18 'numRecords' 'int'
|-CallExpr 0x561674ee37d0 'cudaError_t':'enum cudaError'
| |-ImplicitCastExpr 0x561674ee37b8 'cudaError_t (*)(void *, const void *, size_t, enum cudaMemcpyKind)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x561674ee3740 'cudaError_t (void *, const void *, size_t, enum cudaMemcpyKind)' lvalue Function 0x5616744057d8 'cudaMemcpy' 'cudaError_t (void *, const void *, size_t, enum cudaMemcpyKind)'
| |-ImplicitCastExpr 0x561674ee3828 'void *' <BitCast>
| | `-ImplicitCastExpr 0x561674ee3810 'LatLong *' <LValueToRValue>
| |   `-DeclRefExpr 0x561674ee34f0 'LatLong *' lvalue Var 0x561674edf2f8 'd_locations' 'LatLong *'
| |-ImplicitCastExpr 0x561674ee3840 'const void *' <BitCast>
| | `-UnaryOperator 0x561674ee3668 '__gnu_cxx::__alloc_traits<class std::allocator<struct latLong> >::value_type *' prefix '&' cannot overflow
| |   `-CXXOperatorCallExpr 0x561674ee3600 '__gnu_cxx::__alloc_traits<class std::allocator<struct latLong> >::value_type':'struct latLong' lvalue '[]'
| |     |-ImplicitCastExpr 0x561674ee35e8 'std::vector<struct latLong>::reference (*)(std::vector::size_type) noexcept' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x561674ee3568 'std::vector<struct latLong>::reference (std::vector::size_type) noexcept' lvalue CXXMethod 0x561674ec8980 'operator[]' 'std::vector<struct latLong>::reference (std::vector::size_type) noexcept'
| |     |-DeclRefExpr 0x561674ee3510 'std::vector<LatLong>':'class std::vector<struct latLong>' lvalue Var 0x561674eafa38 'locations' 'std::vector<LatLong>':'class std::vector<struct latLong>'
| |     `-ImplicitCastExpr 0x561674ee3550 'std::vector::size_type':'unsigned long' <IntegralCast>
| |       `-IntegerLiteral 0x561674ee3530 'int' 0
| |-BinaryOperator 0x561674ee3700 'unsigned long' '*'
| | |-UnaryExprOrTypeTraitExpr 0x561674ee3690 'unsigned long' sizeof 'LatLong':'struct latLong'
| | `-ImplicitCastExpr 0x561674ee36e8 'unsigned long' <IntegralCast>
| |   `-ImplicitCastExpr 0x561674ee36d0 'int' <LValueToRValue>
| |     `-DeclRefExpr 0x561674ee36b0 'int' lvalue Var 0x561674edef18 'numRecords' 'int'
| `-DeclRefExpr 0x561674ee3720 'enum cudaMemcpyKind' EnumConstant 0x56167435a070 'cudaMemcpyHostToDevice' 'enum cudaMemcpyKind'
|-DeclStmt 0x561674ee3938
| `-VarDecl 0x561674ee38a8  used ___my_clock_starteuclid 'struct timespec':'struct timespec' callinit
|   `-CXXConstructExpr 0x561674ee3910 'struct timespec':'struct timespec' 'void (void) noexcept'
|-DeclStmt 0x561674ee3a00
| `-VarDecl 0x561674ee3970  used ___my_clock_endeuclid 'struct timespec':'struct timespec' callinit
|   `-CXXConstructExpr 0x561674ee39d8 'struct timespec':'struct timespec' 'void (void) noexcept'
|-CallExpr 0x561674ee3aa0 'cudaError_t':'enum cudaError'
| `-ImplicitCastExpr 0x561674ee3a88 'cudaError_t (*)(void)' <FunctionToPointerDecay>
|   `-DeclRefExpr 0x561674ee3a68 'cudaError_t (void)' lvalue Function 0x5616743de7d0 'cudaDeviceSynchronize' 'cudaError_t (void)'
|-CallExpr 0x561674ee3b98 'int'
| |-ImplicitCastExpr 0x561674ee3b80 'int (*)(clockid_t, struct timespec *) throw()' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x561674ee3b60 'int (clockid_t, struct timespec *) throw()' lvalue Function 0x561674a52830 'clock_gettime' 'int (clockid_t, struct timespec *) throw()'
| |-IntegerLiteral 0x561674ee3b08 'int' 1
| `-UnaryOperator 0x561674ee3b48 'struct timespec *' prefix '&' cannot overflow
|   `-DeclRefExpr 0x561674ee3b28 'struct timespec':'struct timespec' lvalue Var 0x561674ee38a8 '___my_clock_starteuclid' 'struct timespec':'struct timespec'
|-ExprWithCleanups 0x561674f00ec8 'void'
| `-CUDAKernelCallExpr 0x561674f00e00 'void'
|   |-ImplicitCastExpr 0x561674f00de8 'void (*)(LatLong *, float *, int, float, float)' <FunctionToPointerDecay>
|   | `-DeclRefExpr 0x561674ee3bc8 'void (LatLong *, float *, int, float, float)' lvalue Function 0x561674e7b5b8 'euclid' 'void (LatLong *, float *, int, float, float)'
|   |-CallExpr 0x561674f00b10 'unsigned int'
|   | |-ImplicitCastExpr 0x561674f00af8 'unsigned int (*)(dim3, dim3, size_t, void *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x561674ee3c28 'unsigned int (dim3, dim3, size_t, void *)' lvalue Function 0x561674a10870 '__cudaPushCallConfiguration' 'unsigned int (dim3, dim3, size_t, void *)'
|   | |-CXXConstructExpr 0x561674f00b68 'dim3':'struct dim3' 'void (const struct dim3 &) noexcept'
|   | | `-ImplicitCastExpr 0x561674f00b50 'const struct dim3' lvalue <NoOp>
|   | |   `-DeclRefExpr 0x561674ee3be8 'dim3':'struct dim3' lvalue Var 0x561674ee1b80 'gridDim' 'dim3':'struct dim3'
|   | |-CXXConstructExpr 0x561674f00c78 'dim3':'struct dim3' 'void (struct dim3 &&) noexcept' elidable
|   | | `-MaterializeTemporaryExpr 0x561674f00c60 'dim3':'struct dim3' xvalue
|   | |   `-ImplicitCastExpr 0x561674f00c48 'dim3':'struct dim3' <ConstructorConversion>
|   | |     `-CXXConstructExpr 0x561674f00c08 'dim3':'struct dim3' 'void (unsigned int, unsigned int, unsigned int)'
|   | |       |-ImplicitCastExpr 0x561674f00bb0 'unsigned int' <IntegralCast>
|   | |       | `-ImplicitCastExpr 0x561674f00b98 'unsigned long' <LValueToRValue>
|   | |       |   `-DeclRefExpr 0x561674ee3c08 'unsigned long' lvalue Var 0x561674ee0a88 'threadsPerBlock' 'unsigned long'
|   | |       |-CXXDefaultArgExpr 0x561674f00bc8 'unsigned int'
|   | |       `-CXXDefaultArgExpr 0x561674f00be8 'unsigned int'
|   | |-CXXDefaultArgExpr 0x561674f00ca8 'size_t':'unsigned long'
|   | `-CXXDefaultArgExpr 0x561674f00cc8 'void *'
|   |-ImplicitCastExpr 0x561674f00e50 'LatLong *' <LValueToRValue>
|   | `-DeclRefExpr 0x561674f00ce8 'LatLong *' lvalue Var 0x561674edf2f8 'd_locations' 'LatLong *'
|   |-ImplicitCastExpr 0x561674f00e68 'float *' <LValueToRValue>
|   | `-DeclRefExpr 0x561674f00d08 'float *' lvalue Var 0x561674edf390 'd_distances' 'float *'
|   |-ImplicitCastExpr 0x561674f00e80 'int' <LValueToRValue>
|   | `-DeclRefExpr 0x561674f00d28 'int' lvalue Var 0x561674edef18 'numRecords' 'int'
|   |-ImplicitCastExpr 0x561674f00e98 'float' <LValueToRValue>
|   | `-DeclRefExpr 0x561674f00d48 'float' lvalue Var 0x561674e7cf00 'lat' 'float'
|   `-ImplicitCastExpr 0x561674f00eb0 'float' <LValueToRValue>
|     `-DeclRefExpr 0x561674f00d68 'float' lvalue Var 0x561674e7cf80 'lng' 'float'
|-DoStmt 0x561674f01820
| |-CompoundStmt 0x561674f017b0
| | |-CallExpr 0x561674f00f68 'cudaError_t':'enum cudaError'
| | | `-ImplicitCastExpr 0x561674f00f50 'cudaError_t (*)(void)' <FunctionToPointerDecay>
| | |   `-DeclRefExpr 0x561674f00f30 'cudaError_t (void)' lvalue Function 0x5616743de7d0 'cudaDeviceSynchronize' 'cudaError_t (void)'
| | |-CallExpr 0x561674f01060 'int'
| | | |-ImplicitCastExpr 0x561674f01048 'int (*)(clockid_t, struct timespec *) throw()' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x561674f01028 'int (clockid_t, struct timespec *) throw()' lvalue Function 0x561674a52830 'clock_gettime' 'int (clockid_t, struct timespec *) throw()'
| | | |-IntegerLiteral 0x561674f00fd0 'int' 1
| | | `-UnaryOperator 0x561674f01010 'struct timespec *' prefix '&' cannot overflow
| | |   `-DeclRefExpr 0x561674f00ff0 'struct timespec':'struct timespec' lvalue Var 0x561674ee3970 '___my_clock_endeuclid' 'struct timespec':'struct timespec'
| | |-DeclStmt 0x561674f01398
| | | `-VarDecl 0x561674f010b0  used ___my_clock_tmpeuclid 'struct timespec':'struct timespec' cinit
| | |   `-InitListExpr 0x561674f01348 'struct timespec':'struct timespec'
| | |     |-BinaryOperator 0x561674f011e8 'long' '-'
| | |     | |-ImplicitCastExpr 0x561674f011b8 '__time_t':'long' <LValueToRValue>
| | |     | | `-MemberExpr 0x561674f01138 '__time_t':'long' lvalue .tv_sec 0x561674144408
| | |     | |   `-DeclRefExpr 0x561674f01118 'struct timespec':'struct timespec' lvalue Var 0x561674ee3970 '___my_clock_endeuclid' 'struct timespec':'struct timespec'
| | |     | `-ImplicitCastExpr 0x561674f011d0 '__time_t':'long' <LValueToRValue>
| | |     |   `-MemberExpr 0x561674f01188 '__time_t':'long' lvalue .tv_sec 0x561674144408
| | |     |     `-DeclRefExpr 0x561674f01168 'struct timespec':'struct timespec' lvalue Var 0x561674ee38a8 '___my_clock_starteuclid' 'struct timespec':'struct timespec'
| | |     `-BinaryOperator 0x561674f012d8 'long' '-'
| | |       |-ImplicitCastExpr 0x561674f012a8 '__syscall_slong_t':'long' <LValueToRValue>
| | |       | `-MemberExpr 0x561674f01228 '__syscall_slong_t':'long' lvalue .tv_nsec 0x561674144490
| | |       |   `-DeclRefExpr 0x561674f01208 'struct timespec':'struct timespec' lvalue Var 0x561674ee3970 '___my_clock_endeuclid' 'struct timespec':'struct timespec'
| | |       `-ImplicitCastExpr 0x561674f012c0 '__syscall_slong_t':'long' <LValueToRValue>
| | |         `-MemberExpr 0x561674f01278 '__syscall_slong_t':'long' lvalue .tv_nsec 0x561674144490
| | |           `-DeclRefExpr 0x561674f01258 'struct timespec':'struct timespec' lvalue Var 0x561674ee38a8 '___my_clock_starteuclid' 'struct timespec':'struct timespec'
| | |-DeclStmt 0x561674f01610
| | | `-VarDecl 0x561674f013c8  used ___my_clock_elapsedeuclid 'double' cinit
| | |   `-ParenExpr 0x561674f015f0 'double'
| | |     `-BinaryOperator 0x561674f015d0 'double' '+'
| | |       |-ImplicitCastExpr 0x561674f015b8 'double' <IntegralToFloating>
| | |       | `-ImplicitCastExpr 0x561674f015a0 '__time_t':'long' <LValueToRValue>
| | |       |   `-MemberExpr 0x561674f01450 '__time_t':'long' lvalue .tv_sec 0x561674144408
| | |       |     `-DeclRefExpr 0x561674f01430 'struct timespec':'struct timespec' lvalue Var 0x561674f010b0 '___my_clock_tmpeuclid' 'struct timespec':'struct timespec'
| | |       `-BinaryOperator 0x561674f01580 'double' '*'
| | |         |-ParenExpr 0x561674f01540 'double'
| | |         | `-CStyleCastExpr 0x561674f01518 'double' <NoOp>
| | |         |   `-ImplicitCastExpr 0x561674f01500 'double' <IntegralToFloating> part_of_explicit_cast
| | |         |     `-ImplicitCastExpr 0x561674f014e8 '__syscall_slong_t':'long' <LValueToRValue> part_of_explicit_cast
| | |         |       `-MemberExpr 0x561674f014a0 '__syscall_slong_t':'long' lvalue .tv_nsec 0x561674144490
| | |         |         `-DeclRefExpr 0x561674f01480 'struct timespec':'struct timespec' lvalue Var 0x561674f010b0 '___my_clock_tmpeuclid' 'struct timespec':'struct timespec'
| | |         `-FloatingLiteral 0x561674f01560 'double' 1.000000e-09
| | `-CallExpr 0x561674f01730 'void'
| |   |-ImplicitCastExpr 0x561674f01718 'void (*)(const char *, const char *, double)' <FunctionToPointerDecay>
| |   | `-DeclRefExpr 0x561674f016d0 'void (const char *, const char *, double)' lvalue Function 0x561674a874a8 'MY_WRITE_TIME_TO_FILE' 'void (const char *, const char *, double)'
| |   |-ImplicitCastExpr 0x561674f01768 'const char *' <ArrayToPointerDecay>
| |   | `-StringLiteral 0x561674f01670 'const char[3]' lvalue "nn"
| |   |-ImplicitCastExpr 0x561674f01780 'const char *' <ArrayToPointerDecay>
| |   | `-StringLiteral 0x561674f01690 'const char[7]' lvalue "euclid"
| |   `-ImplicitCastExpr 0x561674f01798 'double' <LValueToRValue>
| |     `-DeclRefExpr 0x561674f016b0 'double' lvalue Var 0x561674f013c8 '___my_clock_elapsedeuclid' 'double'
| `-ImplicitCastExpr 0x561674f01808 '_Bool' <IntegralToBoolean>
|   `-IntegerLiteral 0x561674f017e8 'int' 0
|-CallExpr 0x561674f018c0 'cudaError_t':'enum cudaError'
| `-ImplicitCastExpr 0x561674f018a8 'cudaError_t (*)(void)' <FunctionToPointerDecay>
|   `-DeclRefExpr 0x561674f01888 'cudaError_t (void)' lvalue Function 0x5616743e1238 'cudaThreadSynchronize' 'cudaError_t (void)'
|-CallExpr 0x561674f01a68 'cudaError_t':'enum cudaError'
| |-ImplicitCastExpr 0x561674f01a50 'cudaError_t (*)(void *, const void *, size_t, enum cudaMemcpyKind)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x561674f01a30 'cudaError_t (void *, const void *, size_t, enum cudaMemcpyKind)' lvalue Function 0x5616744057d8 'cudaMemcpy' 'cudaError_t (void *, const void *, size_t, enum cudaMemcpyKind)'
| |-ImplicitCastExpr 0x561674f01ac0 'void *' <BitCast>
| | `-ImplicitCastExpr 0x561674f01aa8 'float *' <LValueToRValue>
| |   `-DeclRefExpr 0x561674f01928 'float *' lvalue Var 0x561674edf268 'distances' 'float *'
| |-ImplicitCastExpr 0x561674f01af0 'const void *' <BitCast>
| | `-ImplicitCastExpr 0x561674f01ad8 'float *' <LValueToRValue>
| |   `-DeclRefExpr 0x561674f01948 'float *' lvalue Var 0x561674edf390 'd_distances' 'float *'
| |-BinaryOperator 0x561674f019f0 'unsigned long' '*'
| | |-UnaryExprOrTypeTraitExpr 0x561674f01980 'unsigned long' sizeof 'float'
| | `-ImplicitCastExpr 0x561674f019d8 'unsigned long' <IntegralCast>
| |   `-ImplicitCastExpr 0x561674f019c0 'int' <LValueToRValue>
| |     `-DeclRefExpr 0x561674f019a0 'int' lvalue Var 0x561674edef18 'numRecords' 'int'
| `-DeclRefExpr 0x561674f01a10 'enum cudaMemcpyKind' EnumConstant 0x56167435a100 'cudaMemcpyDeviceToHost' 'enum cudaMemcpyKind'
|-DoStmt 0x561674f0bcf0
| |-CompoundStmt 0x561674f0bc88
| | |-DeclStmt 0x561674f01c00
| | | `-VarDecl 0x561674f01b20  used done 'int' static cinit
| | |   `-IntegerLiteral 0x561674f01b88 'int' 0
| | |-IfStmt 0x561674f01cd0 has_else
| | | |-ImplicitCastExpr 0x561674f01c50 '_Bool' <IntegralToBoolean>
| | | | `-ImplicitCastExpr 0x561674f01c38 'int' <LValueToRValue>
| | | |   `-DeclRefExpr 0x561674f01c18 'int' lvalue Var 0x561674f01b20 'done' 'int'
| | | |-BreakStmt 0x561674f01c68
| | | `-BinaryOperator 0x561674f01cb0 'int' lvalue '='
| | |   |-DeclRefExpr 0x561674f01c70 'int' lvalue Var 0x561674f01b20 'done' 'int'
| | |   `-IntegerLiteral 0x561674f01c90 'int' 1
| | |-DeclStmt 0x561674f01e78
| | | `-VarDecl 0x561674f01d18  used verification_dir 'char *' cinit
| | |   `-CallExpr 0x561674f01e38 'char *'
| | |     |-ImplicitCastExpr 0x561674f01e20 'char *(*)(const char *) throw()' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 0x561674f01df8 'char *(const char *) throw()' lvalue Function 0x561674176a08 'getenv' 'char *(const char *) throw()' (UsingShadow 0x561674216130 'getenv')
| | |     `-ImplicitCastExpr 0x561674f01e60 'const char *' <ArrayToPointerDecay>
| | |       `-StringLiteral 0x561674f01dc8 'const char[20]' lvalue "MY_VERIFICATION_DIR"
| | `-IfStmt 0x561674f0bc68
| |   |-BinaryOperator 0x561674f02028 '_Bool' '&&'
| |   | |-ImplicitCastExpr 0x561674f01ff8 '_Bool' <PointerToBoolean>
| |   | | `-ImplicitCastExpr 0x561674f01fe0 'char *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x561674f01e90 'char *' lvalue Var 0x561674f01d18 'verification_dir' 'char *'
| |   | `-ImplicitCastExpr 0x561674f02010 '_Bool' <IntegralToBoolean>
| |   |   `-CallExpr 0x561674f01f68 'int'
| |   |     |-ImplicitCastExpr 0x561674f01f50 'int (*)(const char *, const char *) throw()' <FunctionToPointerDecay>
| |   |     | `-DeclRefExpr 0x561674f01f30 'int (const char *, const char *) throw()' lvalue Function 0x561674219c68 'strcmp' 'int (const char *, const char *) throw()'
| |   |     |-ImplicitCastExpr 0x561674f01fb0 'const char *' <NoOp>
| |   |     | `-ImplicitCastExpr 0x561674f01f98 'char *' <LValueToRValue>
| |   |     |   `-DeclRefExpr 0x561674f01ef8 'char *' lvalue Var 0x561674f01d18 'verification_dir' 'char *'
| |   |     `-ImplicitCastExpr 0x561674f01fc8 'const char *' <ArrayToPointerDecay>
| |   |       `-StringLiteral 0x561674f01f18 'const char[1]' lvalue ""
| |   `-CompoundStmt 0x561674f0bbd0
| |     |-DeclStmt 0x561674f021d0
| |     | `-VarDecl 0x561674f02060  used halt_when_incorrect 'char *' cinit
| |     |   `-CallExpr 0x561674f02190 'char *'
| |     |     |-ImplicitCastExpr 0x561674f02178 'char *(*)(const char *) throw()' <FunctionToPointerDecay>
| |     |     | `-DeclRefExpr 0x561674f02150 'char *(const char *) throw()' lvalue Function 0x561674176a08 'getenv' 'char *(const char *) throw()' (UsingShadow 0x561674216130 'getenv')
| |     |     `-ImplicitCastExpr 0x561674f021b8 'const char *' <ArrayToPointerDecay>
| |     |       `-StringLiteral 0x561674f02110 'const char[36]' lvalue "MY_VERIFICATION_HALT_WHEN_INCORRECT"
| |     |-DeclStmt 0x561674f022d0
| |     | `-VarDecl 0x561674f021f8  used size 'size_t':'unsigned long' cinit
| |     |   `-ImplicitCastExpr 0x561674f022b8 'size_t':'unsigned long' <IntegralCast>
| |     |     `-ImplicitCastExpr 0x561674f022a0 'int' <LValueToRValue>
| |     |       `-ParenExpr 0x561674f02280 'int' lvalue
| |     |         `-DeclRefExpr 0x561674f02260 'int' lvalue Var 0x561674edef18 'numRecords' 'int'
| |     |-DeclStmt 0x561674f02398
| |     | `-VarDecl 0x561674f022f8  used type_size 'size_t':'unsigned long' cinit
| |     |   `-UnaryExprOrTypeTraitExpr 0x561674f02378 'unsigned long' sizeof 'float'
| |     |-DeclStmt 0x561674f024b8
| |     | `-VarDecl 0x561674f023c0  used array_size 'size_t':'unsigned long' cinit
| |     |   `-BinaryOperator 0x561674f02498 'unsigned long' '*'
| |     |     |-ImplicitCastExpr 0x561674f02468 'size_t':'unsigned long' <LValueToRValue>
| |     |     | `-DeclRefExpr 0x561674f02428 'size_t':'unsigned long' lvalue Var 0x561674f022f8 'type_size' 'size_t':'unsigned long'
| |     |     `-ImplicitCastExpr 0x561674f02480 'size_t':'unsigned long' <LValueToRValue>
| |     |       `-DeclRefExpr 0x561674f02448 'size_t':'unsigned long' lvalue Var 0x561674f021f8 'size' 'size_t':'unsigned long'
| |     |-DeclStmt 0x561674f02608
| |     | `-VarDecl 0x561674f024e8  used array 'float *' cinit
| |     |   `-CStyleCastExpr 0x561674f025e0 'float *' <NoOp>
| |     |     `-ImplicitCastExpr 0x561674f025c8 'float *' <LValueToRValue> part_of_explicit_cast
| |     |       `-ParenExpr 0x561674f025a8 'float *' lvalue
| |     |         `-DeclRefExpr 0x561674f02550 'float *' lvalue Var 0x561674edf268 'distances' 'float *'
| |     |-DeclStmt 0x561674f02838
| |     | `-VarDecl 0x561674f02638  used src_filename 'const char *' cinit
| |     |   `-ImplicitCastExpr 0x561674f02820 'const char *' <NoOp>
| |     |     `-CallExpr 0x561674f027c0 'char *'
| |     |       |-ImplicitCastExpr 0x561674f027a8 'char *(*)(const char *, int) throw()' <FunctionToPointerDecay>
| |     |       | `-DeclRefExpr 0x561674f02728 'char *(const char *, int) throw()' lvalue Function 0x56167421ba70 'strrchr' 'char *(const char *, int) throw()'
| |     |       |-ImplicitCastExpr 0x561674f027f0 'const char *' <ArrayToPointerDecay>
| |     |       | `-StringLiteral 0x561674f026e8 'const char[11]' lvalue "nn_cuda.cu"
| |     |       `-ImplicitCastExpr 0x561674f02808 'int' <IntegralCast>
| |     |         `-CharacterLiteral 0x561674f02710 'char' 47
| |     |-IfStmt 0x561674f02938
| |     | |-UnaryOperator 0x561674f028a0 '_Bool' prefix '!' cannot overflow
| |     | | `-ImplicitCastExpr 0x561674f02888 '_Bool' <PointerToBoolean>
| |     | |   `-ImplicitCastExpr 0x561674f02870 'const char *' <LValueToRValue>
| |     | |     `-DeclRefExpr 0x561674f02850 'const char *' lvalue Var 0x561674f02638 'src_filename' 'const char *'
| |     | `-BinaryOperator 0x561674f02918 'const char *' lvalue '='
| |     |   |-DeclRefExpr 0x561674f028b8 'const char *' lvalue Var 0x561674f02638 'src_filename' 'const char *'
| |     |   `-ImplicitCastExpr 0x561674f02900 'const char *' <ArrayToPointerDecay>
| |     |     `-StringLiteral 0x561674f028d8 'const char[11]' lvalue "nn_cuda.cu"
| |     |-DeclStmt 0x561674f02ac8
| |     | `-VarDecl 0x561674f02970  used app_name 'char *' cinit
| |     |   `-CallExpr 0x561674f02a88 'char *'
| |     |     |-ImplicitCastExpr 0x561674f02a70 'char *(*)(const char *) throw()' <FunctionToPointerDecay>
| |     |     | `-DeclRefExpr 0x561674f02a48 'char *(const char *) throw()' lvalue Function 0x561674176a08 'getenv' 'char *(const char *) throw()' (UsingShadow 0x561674216130 'getenv')
| |     |     `-ImplicitCastExpr 0x561674f02ab0 'const char *' <ArrayToPointerDecay>
| |     |       `-StringLiteral 0x561674f02a20 'const char[12]' lvalue "MY_APP_NAME"
| |     |-DeclStmt 0x561674f02bc0
| |     | `-VarDecl 0x561674f02b40  used empty 'char[1]' cinit
| |     |   `-StringLiteral 0x561674f02ba8 'char[1]' ""
| |     |-IfStmt 0x561674f02e20
| |     | |-UnaryOperator 0x561674f02c28 '_Bool' prefix '!' cannot overflow
| |     | | `-ImplicitCastExpr 0x561674f02c10 '_Bool' <PointerToBoolean>
| |     | |   `-ImplicitCastExpr 0x561674f02bf8 'char *' <LValueToRValue>
| |     | |     `-DeclRefExpr 0x561674f02bd8 'char *' lvalue Var 0x561674f02970 'app_name' 'char *'
| |     | `-CompoundStmt 0x561674f02e00
| |     |   |-CallExpr 0x561674f02d28 'int'
| |     |   | |-ImplicitCastExpr 0x561674f02d10 'int (*)(FILE *__restrict, const char *__restrict, ...)' <FunctionToPointerDecay>
| |     |   | | `-DeclRefExpr 0x561674f02cf0 'int (FILE *__restrict, const char *__restrict, ...)' lvalue Function 0x561674a2fda8 'fprintf' 'int (FILE *__restrict, const char *__restrict, ...)'
| |     |   | |-ImplicitCastExpr 0x561674f02d58 'struct _IO_FILE *' <LValueToRValue>
| |     |   | | `-DeclRefExpr 0x561674f02c88 'struct _IO_FILE *' lvalue Var 0x561674a17050 'stderr' 'struct _IO_FILE *'
| |     |   | `-ImplicitCastExpr 0x561674f02d70 'const char *' <ArrayToPointerDecay>
| |     |   |   `-StringLiteral 0x561674f02ca8 'const char[45]' lvalue "MY_APP_NAME not defined, using empty string\n"
| |     |   `-BinaryOperator 0x561674f02de0 'char *' lvalue '='
| |     |     |-DeclRefExpr 0x561674f02d88 'char *' lvalue Var 0x561674f02970 'app_name' 'char *'
| |     |     `-ImplicitCastExpr 0x561674f02dc8 'char *' <ArrayToPointerDecay>
| |     |       `-DeclRefExpr 0x561674f02da8 'char[1]' lvalue Var 0x561674f02b40 'empty' 'char[1]'
| |     |-DeclStmt 0x561674f03180
| |     | `-VarDecl 0x561674f03118  used verification_id 'char[strlen(src_filename) + strlen("182") + 2]'
| |     |-CallExpr 0x561674f032f0 'int'
| |     | |-ImplicitCastExpr 0x561674f032d8 'int (*)(char *__restrict, const char *__restrict, ...) throw()' <FunctionToPointerDecay>
| |     | | `-DeclRefExpr 0x561674f03260 'int (char *__restrict, const char *__restrict, ...) throw()' lvalue Function 0x561674a30320 'sprintf' 'int (char *__restrict, const char *__restrict, ...) throw()'
| |     | |-ImplicitCastExpr 0x561674f03330 'char *' <ArrayToPointerDecay>
| |     | | `-DeclRefExpr 0x561674f031e0 'char[strlen(src_filename) + strlen("182") + 2]' lvalue Var 0x561674f03118 'verification_id' 'char[strlen(src_filename) + strlen("182") + 2]'
| |     | |-ImplicitCastExpr 0x561674f03348 'const char *' <ArrayToPointerDecay>
| |     | | `-StringLiteral 0x561674f03200 'const char[6]' lvalue "%s:%s"
| |     | |-ImplicitCastExpr 0x561674f03360 'const char *' <LValueToRValue>
| |     | | `-DeclRefExpr 0x561674f03220 'const char *' lvalue Var 0x561674f02638 'src_filename' 'const char *'
| |     | `-ImplicitCastExpr 0x561674f03378 'const char *' <ArrayToPointerDecay>
| |     |   `-StringLiteral 0x561674f03240 'const char[4]' lvalue "182"
| |     |-DeclStmt 0x561674f037f0
| |     | `-VarDecl 0x561674f03788  used verification_file 'char[strlen(verification_id) + strlen(verification_dir) + strlen(app_name) + 3]'
| |     |-CallExpr 0x561674f03928 'int'
| |     | |-ImplicitCastExpr 0x561674f03910 'int (*)(char *__restrict, const char *__restrict, ...) throw()' <FunctionToPointerDecay>
| |     | | `-DeclRefExpr 0x561674f038f0 'int (char *__restrict, const char *__restrict, ...) throw()' lvalue Function 0x561674a30320 'sprintf' 'int (char *__restrict, const char *__restrict, ...) throw()'
| |     | |-ImplicitCastExpr 0x561674f03970 'char *' <ArrayToPointerDecay>
| |     | | `-DeclRefExpr 0x561674f03850 'char[strlen(verification_id) + strlen(verification_dir) + strlen(app_name) + 3]' lvalue Var 0x561674f03788 'verification_file' 'char[strlen(verification_id) + strlen(verification_dir) + strlen(app_name) + 3]'
| |     | |-ImplicitCastExpr 0x561674f03988 'const char *' <ArrayToPointerDecay>
| |     | | `-StringLiteral 0x561674f03870 'const char[9]' lvalue "%s/%s/%s"
| |     | |-ImplicitCastExpr 0x561674f039a0 'char *' <LValueToRValue>
| |     | | `-DeclRefExpr 0x561674f03890 'char *' lvalue Var 0x561674f01d18 'verification_dir' 'char *'
| |     | |-ImplicitCastExpr 0x561674f039b8 'char *' <LValueToRValue>
| |     | | `-DeclRefExpr 0x561674f038b0 'char *' lvalue Var 0x561674f02970 'app_name' 'char *'
| |     | `-ImplicitCastExpr 0x561674f039d0 'char *' <ArrayToPointerDecay>
| |     |   `-DeclRefExpr 0x561674f038d0 'char[strlen(src_filename) + strlen("182") + 2]' lvalue Var 0x561674f03118 'verification_id' 'char[strlen(src_filename) + strlen("182") + 2]'
| |     |-DeclStmt 0x561674f03d30
| |     | `-VarDecl 0x561674f03cc8  used verification_app_dir 'char[strlen(verification_dir) + strlen(app_name) + 2]'
| |     |-CallExpr 0x561674f03e48 'int'
| |     | |-ImplicitCastExpr 0x561674f03e30 'int (*)(char *__restrict, const char *__restrict, ...) throw()' <FunctionToPointerDecay>
| |     | | `-DeclRefExpr 0x561674f03e10 'int (char *__restrict, const char *__restrict, ...) throw()' lvalue Function 0x561674a30320 'sprintf' 'int (char *__restrict, const char *__restrict, ...) throw()'
| |     | |-ImplicitCastExpr 0x561674f03e88 'char *' <ArrayToPointerDecay>
| |     | | `-DeclRefExpr 0x561674f03d90 'char[strlen(verification_dir) + strlen(app_name) + 2]' lvalue Var 0x561674f03cc8 'verification_app_dir' 'char[strlen(verification_dir) + strlen(app_name) + 2]'
| |     | |-ImplicitCastExpr 0x561674f03ea0 'const char *' <ArrayToPointerDecay>
| |     | | `-StringLiteral 0x561674f03db0 'const char[6]' lvalue "%s/%s"
| |     | |-ImplicitCastExpr 0x561674f03eb8 'char *' <LValueToRValue>
| |     | | `-DeclRefExpr 0x561674f03dd0 'char *' lvalue Var 0x561674f01d18 'verification_dir' 'char *'
| |     | `-ImplicitCastExpr 0x561674f03ed0 'char *' <LValueToRValue>
| |     |   `-DeclRefExpr 0x561674f03df0 'char *' lvalue Var 0x561674f02970 'app_name' 'char *'
| |     `-IfStmt 0x561674f0bba0 has_else
| |       |-ImplicitCastExpr 0x561674f03fe0 '_Bool' <PointerToBoolean>
| |       | `-CallExpr 0x561674f03fa0 'char *'
| |       |   |-ImplicitCastExpr 0x561674f03f88 'char *(*)(const char *) throw()' <FunctionToPointerDecay>
| |       |   | `-DeclRefExpr 0x561674f03f60 'char *(const char *) throw()' lvalue Function 0x561674176a08 'getenv' 'char *(const char *) throw()' (UsingShadow 0x561674216130 'getenv')
| |       |   `-ImplicitCastExpr 0x561674f03fc8 'const char *' <ArrayToPointerDecay>
| |       |     `-StringLiteral 0x561674f03f30 'const char[21]' lvalue "MY_VERIFICATION_DUMP"
| |       |-CompoundStmt 0x561674f04ec0
| |       | |-CallExpr 0x561674f04110 'int'
| |       | | |-ImplicitCastExpr 0x561674f040f8 'int (*)(const char *, __mode_t) throw()' <FunctionToPointerDecay>
| |       | | | `-DeclRefExpr 0x561674f04080 'int (const char *, __mode_t) throw()' lvalue Function 0x561674ab3a28 'mkdir' 'int (const char *, __mode_t) throw()'
| |       | | |-ImplicitCastExpr 0x561674f04158 'const char *' <NoOp>
| |       | | | `-ImplicitCastExpr 0x561674f04140 'char *' <ArrayToPointerDecay>
| |       | | |   `-DeclRefExpr 0x561674f04040 'char[strlen(verification_dir) + strlen(app_name) + 2]' lvalue Var 0x561674f03cc8 'verification_app_dir' 'char[strlen(verification_dir) + strlen(app_name) + 2]'
| |       | | `-ImplicitCastExpr 0x561674f04170 '__mode_t':'unsigned int' <IntegralCast>
| |       | |   `-IntegerLiteral 0x561674f04060 'int' 511
| |       | |-CallExpr 0x561674f042e0 'int'
| |       | | |-ImplicitCastExpr 0x561674f042c8 'int (*)(FILE *__restrict, const char *__restrict, ...)' <FunctionToPointerDecay>
| |       | | | `-DeclRefExpr 0x561674f042a8 'int (FILE *__restrict, const char *__restrict, ...)' lvalue Function 0x561674a2fda8 'fprintf' 'int (FILE *__restrict, const char *__restrict, ...)'
| |       | | |-ImplicitCastExpr 0x561674f04328 'struct _IO_FILE *' <LValueToRValue>
| |       | | | `-DeclRefExpr 0x561674f041d0 'struct _IO_FILE *' lvalue Var 0x561674a17050 'stderr' 'struct _IO_FILE *'
| |       | | |-ImplicitCastExpr 0x561674f04340 'const char *' <ArrayToPointerDecay>
| |       | | | `-StringLiteral 0x561674f041f0 'const char[55]' lvalue "Dumping verification info of %s of type %s to file %s\n"
| |       | | |-ImplicitCastExpr 0x561674f04358 'const char *' <ArrayToPointerDecay>
| |       | | | `-StringLiteral 0x561674f04240 'const char[10]' lvalue "distances"
| |       | | |-ImplicitCastExpr 0x561674f04370 'const char *' <ArrayToPointerDecay>
| |       | | | `-StringLiteral 0x561674f04268 'const char[6]' lvalue "float"
| |       | | `-ImplicitCastExpr 0x561674f04388 'char *' <ArrayToPointerDecay>
| |       | |   `-DeclRefExpr 0x561674f04288 'char[strlen(verification_id) + strlen(verification_dir) + strlen(app_name) + 3]' lvalue Var 0x561674f03788 'verification_file' 'char[strlen(verification_id) + strlen(verification_dir) + strlen(app_name) + 3]'
| |       | |-DeclStmt 0x561674f04550
| |       | | `-VarDecl 0x561674f043b0  used f 'FILE *' cinit
| |       | |   `-CallExpr 0x561674f044d8 'FILE *'
| |       | |     |-ImplicitCastExpr 0x561674f044c0 'FILE *(*)(const char *__restrict, const char *__restrict)' <FunctionToPointerDecay>
| |       | |     | `-DeclRefExpr 0x561674f044a0 'FILE *(const char *__restrict, const char *__restrict)' lvalue Function 0x561674a2de68 'fopen' 'FILE *(const char *__restrict, const char *__restrict)'
| |       | |     |-ImplicitCastExpr 0x561674f04520 'const char *' <NoOp>
| |       | |     | `-ImplicitCastExpr 0x561674f04508 'char *' <ArrayToPointerDecay>
| |       | |     |   `-DeclRefExpr 0x561674f04460 'char[strlen(verification_id) + strlen(verification_dir) + strlen(app_name) + 3]' lvalue Var 0x561674f03788 'verification_file' 'char[strlen(verification_id) + strlen(verification_dir) + strlen(app_name) + 3]'
| |       | |     `-ImplicitCastExpr 0x561674f04538 'const char *' <ArrayToPointerDecay>
| |       | |       `-StringLiteral 0x561674f04480 'const char[3]' lvalue "wb"
| |       | |-IfStmt 0x561674f04b58
| |       | | |-UnaryOperator 0x561674f045b8 '_Bool' prefix '!' cannot overflow
| |       | | | `-ImplicitCastExpr 0x561674f045a0 '_Bool' <PointerToBoolean>
| |       | | |   `-ImplicitCastExpr 0x561674f04588 'FILE *' <LValueToRValue>
| |       | | |     `-DeclRefExpr 0x561674f04568 'FILE *' lvalue Var 0x561674f043b0 'f' 'FILE *'
| |       | | `-CompoundStmt 0x561674f04b38
| |       | |   |-CallExpr 0x561674f049c0 'int'
| |       | |   | |-ImplicitCastExpr 0x561674f049a8 'int (*)(FILE *__restrict, const char *__restrict, ...)' <FunctionToPointerDecay>
| |       | |   | | `-DeclRefExpr 0x561674f04988 'int (FILE *__restrict, const char *__restrict, ...)' lvalue Function 0x561674a2fda8 'fprintf' 'int (FILE *__restrict, const char *__restrict, ...)'
| |       | |   | |-ImplicitCastExpr 0x561674f04a08 'struct _IO_FILE *' <LValueToRValue>
| |       | |   | | `-DeclRefExpr 0x561674f04618 'struct _IO_FILE *' lvalue Var 0x561674a17050 'stderr' 'struct _IO_FILE *'
| |       | |   | |-ImplicitCastExpr 0x561674f04a20 'const char *' <ArrayToPointerDecay>
| |       | |   | | `-StringLiteral 0x561674f046b8 'const char[38]' lvalue "Could not open file %s, errno %d, %s\n"
| |       | |   | |-ImplicitCastExpr 0x561674f04a38 'char *' <ArrayToPointerDecay>
| |       | |   | | `-DeclRefExpr 0x561674f046f8 'char[strlen(verification_id) + strlen(verification_dir) + strlen(app_name) + 3]' lvalue Var 0x561674f03788 'verification_file' 'char[strlen(verification_id) + strlen(verification_dir) + strlen(app_name) + 3]'
| |       | |   | |-ImplicitCastExpr 0x561674f04a50 'int' <LValueToRValue>
| |       | |   | | `-ParenExpr 0x561674f047d0 'int' lvalue
| |       | |   | |   `-UnaryOperator 0x561674f047b8 'int' lvalue prefix '*' cannot overflow
| |       | |   | |     `-CallExpr 0x561674f04798 'int *'
| |       | |   | |       `-ImplicitCastExpr 0x561674f04780 'int *(*)(void) throw()' <FunctionToPointerDecay>
| |       | |   | |         `-DeclRefExpr 0x561674f04760 'int *(void) throw()' lvalue Function 0x561674a87048 '__errno_location' 'int *(void) throw()'
| |       | |   | `-CallExpr 0x561674f04948 'char *'
| |       | |   |   |-ImplicitCastExpr 0x561674f04930 'char *(*)(int) throw()' <FunctionToPointerDecay>
| |       | |   |   | `-DeclRefExpr 0x561674f04910 'char *(int) throw()' lvalue Function 0x56167421e8e0 'strerror' 'char *(int) throw()'
| |       | |   |   `-ImplicitCastExpr 0x561674f04970 'int' <LValueToRValue>
| |       | |   |     `-ParenExpr 0x561674f048f0 'int' lvalue
| |       | |   |       `-UnaryOperator 0x561674f048d8 'int' lvalue prefix '*' cannot overflow
| |       | |   |         `-CallExpr 0x561674f048b8 'int *'
| |       | |   |           `-ImplicitCastExpr 0x561674f048a0 'int *(*)(void) throw()' <FunctionToPointerDecay>
| |       | |   |             `-DeclRefExpr 0x561674f04880 'int *(void) throw()' lvalue Function 0x561674a87048 '__errno_location' 'int *(void) throw()'
| |       | |   `-CallExpr 0x561674f04b10 'void'
| |       | |     |-ImplicitCastExpr 0x561674f04af8 'void (*)(int) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
| |       | |     | `-DeclRefExpr 0x561674f04ad0 'void (int) __attribute__((noreturn)) throw()' lvalue Function 0x5616741764c0 'exit' 'void (int) __attribute__((noreturn)) throw()' (UsingShadow 0x561674215210 'exit')
| |       | |     `-IntegerLiteral 0x561674f04ab0 'int' 1
| |       | |-CallExpr 0x561674f04d40 'size_t':'unsigned long'
| |       | | |-ImplicitCastExpr 0x561674f04d28 'size_t (*)(const void *__restrict, size_t, size_t, FILE *__restrict)' <FunctionToPointerDecay>
| |       | | | `-DeclRefExpr 0x561674f04cb0 'size_t (const void *__restrict, size_t, size_t, FILE *__restrict)' lvalue Function 0x561674a390b8 'fwrite' 'size_t (const void *__restrict, size_t, size_t, FILE *__restrict)'
| |       | | |-ImplicitCastExpr 0x561674f04d80 'const void *' <NoOp>
| |       | | | `-CStyleCastExpr 0x561674f04c28 'void *' <NoOp>
| |       | | |   `-ImplicitCastExpr 0x561674f04c10 'void *' <BitCast> part_of_explicit_cast
| |       | | |     `-ImplicitCastExpr 0x561674f04bf8 'float *' <LValueToRValue> part_of_explicit_cast
| |       | | |       `-DeclRefExpr 0x561674f04bc0 'float *' lvalue Var 0x561674f024e8 'array' 'float *'
| |       | | |-ImplicitCastExpr 0x561674f04d98 'size_t':'unsigned long' <LValueToRValue>
| |       | | | `-DeclRefExpr 0x561674f04c50 'size_t':'unsigned long' lvalue Var 0x561674f022f8 'type_size' 'size_t':'unsigned long'
| |       | | |-ImplicitCastExpr 0x561674f04db0 'size_t':'unsigned long' <LValueToRValue>
| |       | | | `-DeclRefExpr 0x561674f04c70 'size_t':'unsigned long' lvalue Var 0x561674f021f8 'size' 'size_t':'unsigned long'
| |       | | `-ImplicitCastExpr 0x561674f04dc8 'FILE *' <LValueToRValue>
| |       | |   `-DeclRefExpr 0x561674f04c90 'FILE *' lvalue Var 0x561674f043b0 'f' 'FILE *'
| |       | `-CallExpr 0x561674f04e80 'int'
| |       |   |-ImplicitCastExpr 0x561674f04e68 'int (*)(FILE *)' <FunctionToPointerDecay>
| |       |   | `-DeclRefExpr 0x561674f04e48 'int (FILE *)' lvalue Function 0x561674a2d830 'fclose' 'int (FILE *)'
| |       |   `-ImplicitCastExpr 0x561674f04ea8 'FILE *' <LValueToRValue>
| |       |     `-DeclRefExpr 0x561674f04e28 'FILE *' lvalue Var 0x561674f043b0 'f' 'FILE *'
| |       `-CompoundStmt 0x561674f0bb20
| |         |-CallExpr 0x561674f05058 'int'
| |         | |-ImplicitCastExpr 0x561674f05040 'int (*)(FILE *__restrict, const char *__restrict, ...)' <FunctionToPointerDecay>
| |         | | `-DeclRefExpr 0x561674f05020 'int (FILE *__restrict, const char *__restrict, ...)' lvalue Function 0x561674a2fda8 'fprintf' 'int (FILE *__restrict, const char *__restrict, ...)'
| |         | |-ImplicitCastExpr 0x561674f050a0 'struct _IO_FILE *' <LValueToRValue>
| |         | | `-DeclRefExpr 0x561674f04f48 'struct _IO_FILE *' lvalue Var 0x561674a17050 'stderr' 'struct _IO_FILE *'
| |         | |-ImplicitCastExpr 0x561674f050b8 'const char *' <ArrayToPointerDecay>
| |         | | `-StringLiteral 0x561674f04f68 'const char[53]' lvalue "Starting verification of %s of type %s from file %s\n"
| |         | |-ImplicitCastExpr 0x561674f050d0 'const char *' <ArrayToPointerDecay>
| |         | | `-StringLiteral 0x561674f04fb8 'const char[10]' lvalue "distances"
| |         | |-ImplicitCastExpr 0x561674f050e8 'const char *' <ArrayToPointerDecay>
| |         | | `-StringLiteral 0x561674f04fe0 'const char[6]' lvalue "float"
| |         | `-ImplicitCastExpr 0x561674f05100 'char *' <ArrayToPointerDecay>
| |         |   `-DeclRefExpr 0x561674f05000 'char[strlen(verification_id) + strlen(verification_dir) + strlen(app_name) + 3]' lvalue Var 0x561674f03788 'verification_file' 'char[strlen(verification_id) + strlen(verification_dir) + strlen(app_name) + 3]'
| |         |-DeclStmt 0x561674f052c8
| |         | `-VarDecl 0x561674f05128  used f 'FILE *' cinit
| |         |   `-CallExpr 0x561674f05250 'FILE *'
| |         |     |-ImplicitCastExpr 0x561674f05238 'FILE *(*)(const char *__restrict, const char *__restrict)' <FunctionToPointerDecay>
| |         |     | `-DeclRefExpr 0x561674f05218 'FILE *(const char *__restrict, const char *__restrict)' lvalue Function 0x561674a2de68 'fopen' 'FILE *(const char *__restrict, const char *__restrict)'
| |         |     |-ImplicitCastExpr 0x561674f05298 'const char *' <NoOp>
| |         |     | `-ImplicitCastExpr 0x561674f05280 'char *' <ArrayToPointerDecay>
| |         |     |   `-DeclRefExpr 0x561674f051d8 'char[strlen(verification_id) + strlen(verification_dir) + strlen(app_name) + 3]' lvalue Var 0x561674f03788 'verification_file' 'char[strlen(verification_id) + strlen(verification_dir) + strlen(app_name) + 3]'
| |         |     `-ImplicitCastExpr 0x561674f052b0 'const char *' <ArrayToPointerDecay>
| |         |       `-StringLiteral 0x561674f051f8 'const char[3]' lvalue "rb"
| |         |-IfStmt 0x561674f05850
| |         | |-UnaryOperator 0x561674f05330 '_Bool' prefix '!' cannot overflow
| |         | | `-ImplicitCastExpr 0x561674f05318 '_Bool' <PointerToBoolean>
| |         | |   `-ImplicitCastExpr 0x561674f05300 'FILE *' <LValueToRValue>
| |         | |     `-DeclRefExpr 0x561674f052e0 'FILE *' lvalue Var 0x561674f05128 'f' 'FILE *'
| |         | `-CompoundStmt 0x561674f05830
| |         |   |-CallExpr 0x561674f056b8 'int'
| |         |   | |-ImplicitCastExpr 0x561674f056a0 'int (*)(FILE *__restrict, const char *__restrict, ...)' <FunctionToPointerDecay>
| |         |   | | `-DeclRefExpr 0x561674f05680 'int (FILE *__restrict, const char *__restrict, ...)' lvalue Function 0x561674a2fda8 'fprintf' 'int (FILE *__restrict, const char *__restrict, ...)'
| |         |   | |-ImplicitCastExpr 0x561674f05700 'struct _IO_FILE *' <LValueToRValue>
| |         |   | | `-DeclRefExpr 0x561674f05390 'struct _IO_FILE *' lvalue Var 0x561674a17050 'stderr' 'struct _IO_FILE *'
| |         |   | |-ImplicitCastExpr 0x561674f05718 'const char *' <ArrayToPointerDecay>
| |         |   | | `-StringLiteral 0x561674f053b0 'const char[38]' lvalue "Could not open file %s, errno %d, %s\n"
| |         |   | |-ImplicitCastExpr 0x561674f05730 'char *' <ArrayToPointerDecay>
| |         |   | | `-DeclRefExpr 0x561674f053f0 'char[strlen(verification_id) + strlen(verification_dir) + strlen(app_name) + 3]' lvalue Var 0x561674f03788 'verification_file' 'char[strlen(verification_id) + strlen(verification_dir) + strlen(app_name) + 3]'
| |         |   | |-ImplicitCastExpr 0x561674f05748 'int' <LValueToRValue>
| |         |   | | `-ParenExpr 0x561674f054c8 'int' lvalue
| |         |   | |   `-UnaryOperator 0x561674f054b0 'int' lvalue prefix '*' cannot overflow
| |         |   | |     `-CallExpr 0x561674f05490 'int *'
| |         |   | |       `-ImplicitCastExpr 0x561674f05478 'int *(*)(void) throw()' <FunctionToPointerDecay>
| |         |   | |         `-DeclRefExpr 0x561674f05458 'int *(void) throw()' lvalue Function 0x561674a87048 '__errno_location' 'int *(void) throw()'
| |         |   | `-CallExpr 0x561674f05640 'char *'
| |         |   |   |-ImplicitCastExpr 0x561674f05628 'char *(*)(int) throw()' <FunctionToPointerDecay>
| |         |   |   | `-DeclRefExpr 0x561674f05608 'char *(int) throw()' lvalue Function 0x56167421e8e0 'strerror' 'char *(int) throw()'
| |         |   |   `-ImplicitCastExpr 0x561674f05668 'int' <LValueToRValue>
| |         |   |     `-ParenExpr 0x561674f055e8 'int' lvalue
| |         |   |       `-UnaryOperator 0x561674f055d0 'int' lvalue prefix '*' cannot overflow
| |         |   |         `-CallExpr 0x561674f055b0 'int *'
| |         |   |           `-ImplicitCastExpr 0x561674f05598 'int *(*)(void) throw()' <FunctionToPointerDecay>
| |         |   |             `-DeclRefExpr 0x561674f05578 'int *(void) throw()' lvalue Function 0x561674a87048 '__errno_location' 'int *(void) throw()'
| |         |   `-CallExpr 0x561674f05808 'void'
| |         |     |-ImplicitCastExpr 0x561674f057f0 'void (*)(int) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
| |         |     | `-DeclRefExpr 0x561674f057c8 'void (int) __attribute__((noreturn)) throw()' lvalue Function 0x5616741764c0 'exit' 'void (int) __attribute__((noreturn)) throw()' (UsingShadow 0x561674215210 'exit')
| |         |     `-IntegerLiteral 0x561674f057a8 'int' 1
| |         |-DeclStmt 0x561674f059e0
| |         | `-VarDecl 0x561674f05888  used data 'void *' cinit
| |         |   `-CallExpr 0x561674f059a0 'void *'
| |         |     |-ImplicitCastExpr 0x561674f05988 'void *(*)(size_t) throw()' <FunctionToPointerDecay>
| |         |     | `-DeclRefExpr 0x561674f05960 'void *(size_t) throw()' lvalue Function 0x561674173d18 'malloc' 'void *(size_t) throw()' (UsingShadow 0x561674216400 'malloc')
| |         |     `-ImplicitCastExpr 0x561674f059c8 'size_t':'unsigned long' <LValueToRValue>
| |         |       `-DeclRefExpr 0x561674f05940 'size_t':'unsigned long' lvalue Var 0x561674f023c0 'array_size' 'size_t':'unsigned long'
| |         |-CallExpr 0x561674f05bb0 'size_t':'unsigned long'
| |         | |-ImplicitCastExpr 0x561674f05b98 'size_t (*)(void *__restrict, size_t, size_t, FILE *__restrict)' <FunctionToPointerDecay>
| |         | | `-DeclRefExpr 0x561674f05b18 'size_t (void *__restrict, size_t, size_t, FILE *__restrict)' lvalue Function 0x561674a38c88 'fread' 'size_t (void *__restrict, size_t, size_t, FILE *__restrict)'
| |         | |-CStyleCastExpr 0x561674f05a90 'void *' <NoOp>
| |         | | `-ImplicitCastExpr 0x561674f05a78 'void *' <LValueToRValue> part_of_explicit_cast
| |         | |   `-DeclRefExpr 0x561674f05a40 'void *' lvalue Var 0x561674f05888 'data' 'void *'
| |         | |-ImplicitCastExpr 0x561674f05bf0 'size_t':'unsigned long' <LValueToRValue>
| |         | | `-DeclRefExpr 0x561674f05ab8 'size_t':'unsigned long' lvalue Var 0x561674f022f8 'type_size' 'size_t':'unsigned long'
| |         | |-ImplicitCastExpr 0x561674f05c08 'size_t':'unsigned long' <LValueToRValue>
| |         | | `-DeclRefExpr 0x561674f05ad8 'size_t':'unsigned long' lvalue Var 0x561674f021f8 'size' 'size_t':'unsigned long'
| |         | `-ImplicitCastExpr 0x561674f05c20 'FILE *' <LValueToRValue>
| |         |   `-DeclRefExpr 0x561674f05af8 'FILE *' lvalue Var 0x561674f05128 'f' 'FILE *'
| |         |-DeclStmt 0x561674f05cd8
| |         | `-VarDecl 0x561674f05c50  used pass 'int' cinit
| |         |   `-IntegerLiteral 0x561674f05cb8 'int' 1
| |         |-DeclStmt 0x561674f05e08
| |         | |-VarDecl 0x561674f05d08  used el 'float *'
| |         | `-VarDecl 0x561674f05d88  used correct 'float *'
| |         |-DeclStmt 0x561674f06068
| |         | |-VarDecl 0x561674f05e38  used largest_absolute_error 'double' cinit
| |         | | `-ImplicitCastExpr 0x561674f05ec0 'double' <IntegralToFloating>
| |         | |   `-IntegerLiteral 0x561674f05ea0 'int' 0
| |         | |-VarDecl 0x561674f05ef0  used largest_relative_error 'double' cinit
| |         | | `-ImplicitCastExpr 0x561674f05f78 'double' <IntegralToFloating>
| |         | |   `-IntegerLiteral 0x561674f05f58 'int' 0
| |         | `-VarDecl 0x561674f05fa8  used largest_relative_error_nonzero 'double' cinit
| |         |   `-ImplicitCastExpr 0x561674f06030 'double' <IntegralToFloating>
| |         |     `-IntegerLiteral 0x561674f06010 'int' 0
| |         |-ForStmt 0x561674f0b2f8
| |         | |-BinaryOperator 0x561674f061f0 'float *' lvalue ','
| |         | | |-BinaryOperator 0x561674f06118 'float *' lvalue '='
| |         | | | |-DeclRefExpr 0x561674f06080 'float *' lvalue Var 0x561674f05d08 'el' 'float *'
| |         | | | `-CStyleCastExpr 0x561674f060f0 'float *' <NoOp>
| |         | | |   `-ImplicitCastExpr 0x561674f060d8 'float *' <LValueToRValue> part_of_explicit_cast
| |         | | |     `-DeclRefExpr 0x561674f060a0 'float *' lvalue Var 0x561674f024e8 'array' 'float *'
| |         | | `-BinaryOperator 0x561674f061d0 'float *' lvalue '='
| |         | |   |-DeclRefExpr 0x561674f06138 'float *' lvalue Var 0x561674f05d88 'correct' 'float *'
| |         | |   `-CStyleCastExpr 0x561674f061a8 'float *' <BitCast>
| |         | |     `-ImplicitCastExpr 0x561674f06190 'void *' <LValueToRValue> part_of_explicit_cast
| |         | |       `-DeclRefExpr 0x561674f06158 'void *' lvalue Var 0x561674f05888 'data' 'void *'
| |         | |-<<<NULL>>>
| |         | |-BinaryOperator 0x561674f06338 '_Bool' '<'
| |         | | |-ImplicitCastExpr 0x561674f06320 'float *' <LValueToRValue>
| |         | | | `-DeclRefExpr 0x561674f06210 'float *' lvalue Var 0x561674f05d08 'el' 'float *'
| |         | | `-BinaryOperator 0x561674f06300 'float *' '+'
| |         | |   |-ParenExpr 0x561674f062a8 'float *'
| |         | |   | `-CStyleCastExpr 0x561674f06280 'float *' <NoOp>
| |         | |   |   `-ImplicitCastExpr 0x561674f06268 'float *' <LValueToRValue> part_of_explicit_cast
| |         | |   |     `-DeclRefExpr 0x561674f06230 'float *' lvalue Var 0x561674f024e8 'array' 'float *'
| |         | |   `-ImplicitCastExpr 0x561674f062e8 'size_t':'unsigned long' <LValueToRValue>
| |         | |     `-DeclRefExpr 0x561674f062c8 'size_t':'unsigned long' lvalue Var 0x561674f021f8 'size' 'size_t':'unsigned long'
| |         | |-BinaryOperator 0x561674f063c8 'float *' ','
| |         | | |-UnaryOperator 0x561674f06378 'float *' postfix '++'
| |         | | | `-DeclRefExpr 0x561674f06358 'float *' lvalue Var 0x561674f05d08 'el' 'float *'
| |         | | `-UnaryOperator 0x561674f063b0 'float *' postfix '++'
| |         | |   `-DeclRefExpr 0x561674f06390 'float *' lvalue Var 0x561674f05d88 'correct' 'float *'
| |         | `-CompoundStmt 0x561674f0b2e0
| |         |   `-IfStmt 0x561674f0b2c0
| |         |     |-UnaryOperator 0x561674f08408 '_Bool' prefix '!' cannot overflow
| |         |     | `-ParenExpr 0x561674f083e8 '_Bool'
| |         |     |   `-BinaryOperator 0x561674f083c8 '_Bool' '||'
| |         |     |     |-ParenExpr 0x561674f06518 '_Bool'
| |         |     |     | `-BinaryOperator 0x561674f064f8 '_Bool' '=='
| |         |     |     |   |-ImplicitCastExpr 0x561674f064c8 'float' <LValueToRValue>
| |         |     |     |   | `-ParenExpr 0x561674f06438 'float' lvalue
| |         |     |     |   |   `-UnaryOperator 0x561674f06420 'float' lvalue prefix '*' cannot overflow
| |         |     |     |   |     `-ImplicitCastExpr 0x561674f06408 'float *' <LValueToRValue>
| |         |     |     |   |       `-DeclRefExpr 0x561674f063e8 'float *' lvalue Var 0x561674f05d08 'el' 'float *'
| |         |     |     |   `-ImplicitCastExpr 0x561674f064e0 'float' <LValueToRValue>
| |         |     |     |     `-ParenExpr 0x561674f064a8 'float' lvalue
| |         |     |     |       `-UnaryOperator 0x561674f06490 'float' lvalue prefix '*' cannot overflow
| |         |     |     |         `-ImplicitCastExpr 0x561674f06478 'float *' <LValueToRValue>
| |         |     |     |           `-DeclRefExpr 0x561674f06458 'float *' lvalue Var 0x561674f05d88 'correct' 'float *'
| |         |     |     `-ParenExpr 0x561674f083a8 '_Bool'
| |         |     |       `-BinaryOperator 0x561674f08388 '_Bool' '<'
| |         |     |         |-ParenExpr 0x561674f069c8 'float'
| |         |     |         | `-ConditionalOperator 0x561674f06998 'float'
| |         |     |         |   |-BinaryOperator 0x561674f066c0 '_Bool' '>'
| |         |     |         |   | |-ParenExpr 0x561674f06668 'float'
| |         |     |         |   | | `-BinaryOperator 0x561674f06648 'float' '-'
| |         |     |         |   | |   |-ImplicitCastExpr 0x561674f06618 'float' <LValueToRValue>
| |         |     |         |   | |   | `-ParenExpr 0x561674f06588 'float' lvalue
| |         |     |         |   | |   |   `-UnaryOperator 0x561674f06570 'float' lvalue prefix '*' cannot overflow
| |         |     |         |   | |   |     `-ImplicitCastExpr 0x561674f06558 'float *' <LValueToRValue>
| |         |     |         |   | |   |       `-DeclRefExpr 0x561674f06538 'float *' lvalue Var 0x561674f05d08 'el' 'float *'
| |         |     |         |   | |   `-ImplicitCastExpr 0x561674f06630 'float' <LValueToRValue>
| |         |     |         |   | |     `-ParenExpr 0x561674f065f8 'float' lvalue
| |         |     |         |   | |       `-UnaryOperator 0x561674f065e0 'float' lvalue prefix '*' cannot overflow
| |         |     |         |   | |         `-ImplicitCastExpr 0x561674f065c8 'float *' <LValueToRValue>
| |         |     |         |   | |           `-DeclRefExpr 0x561674f065a8 'float *' lvalue Var 0x561674f05d88 'correct' 'float *'
| |         |     |         |   | `-ImplicitCastExpr 0x561674f066a8 'float' <IntegralToFloating>
| |         |     |         |   |   `-IntegerLiteral 0x561674f06688 'int' 0
| |         |     |         |   |-ParenExpr 0x561674f06810 'float'
| |         |     |         |   | `-BinaryOperator 0x561674f067f0 'float' '-'
| |         |     |         |   |   |-ImplicitCastExpr 0x561674f067c0 'float' <LValueToRValue>
| |         |     |         |   |   | `-ParenExpr 0x561674f06730 'float' lvalue
| |         |     |         |   |   |   `-UnaryOperator 0x561674f06718 'float' lvalue prefix '*' cannot overflow
| |         |     |         |   |   |     `-ImplicitCastExpr 0x561674f06700 'float *' <LValueToRValue>
| |         |     |         |   |   |       `-DeclRefExpr 0x561674f066e0 'float *' lvalue Var 0x561674f05d08 'el' 'float *'
| |         |     |         |   |   `-ImplicitCastExpr 0x561674f067d8 'float' <LValueToRValue>
| |         |     |         |   |     `-ParenExpr 0x561674f067a0 'float' lvalue
| |         |     |         |   |       `-UnaryOperator 0x561674f06788 'float' lvalue prefix '*' cannot overflow
| |         |     |         |   |         `-ImplicitCastExpr 0x561674f06770 'float *' <LValueToRValue>
| |         |     |         |   |           `-DeclRefExpr 0x561674f06750 'float *' lvalue Var 0x561674f05d88 'correct' 'float *'
| |         |     |         |   `-UnaryOperator 0x561674f06980 'float' prefix '-'
| |         |     |         |     `-ParenExpr 0x561674f06960 'float'
| |         |     |         |       `-BinaryOperator 0x561674f06940 'float' '-'
| |         |     |         |         |-ImplicitCastExpr 0x561674f06910 'float' <LValueToRValue>
| |         |     |         |         | `-ParenExpr 0x561674f06880 'float' lvalue
| |         |     |         |         |   `-UnaryOperator 0x561674f06868 'float' lvalue prefix '*' cannot overflow
| |         |     |         |         |     `-ImplicitCastExpr 0x561674f06850 'float *' <LValueToRValue>
| |         |     |         |         |       `-DeclRefExpr 0x561674f06830 'float *' lvalue Var 0x561674f05d08 'el' 'float *'
| |         |     |         |         `-ImplicitCastExpr 0x561674f06928 'float' <LValueToRValue>
| |         |     |         |           `-ParenExpr 0x561674f068f0 'float' lvalue
| |         |     |         |             `-UnaryOperator 0x561674f068d8 'float' lvalue prefix '*' cannot overflow
| |         |     |         |               `-ImplicitCastExpr 0x561674f068c0 'float *' <LValueToRValue>
| |         |     |         |                 `-DeclRefExpr 0x561674f068a0 'float *' lvalue Var 0x561674f05d88 'correct' 'float *'
| |         |     |         `-ParenExpr 0x561674f08368 'float'
| |         |     |           `-ConditionalOperator 0x561674f08338 'float'
| |         |     |             |-ParenExpr 0x561674f07690 '_Bool'
| |         |     |             | `-BinaryOperator 0x561674f07670 '_Bool' '>'
| |         |     |             |   |-ParenExpr 0x561674f06a28 'float'
| |         |     |             |   | `-ParenExpr 0x561674f06a08 'float'
| |         |     |             |   |   `-FloatingLiteral 0x561674f069e8 'float' 1.175494e-38
| |         |     |             |   `-ParenExpr 0x561674f07650 'float'
| |         |     |             |     `-BinaryOperator 0x561674f07630 'float' '*'
| |         |     |             |       |-ParenExpr 0x561674f06ae0 'float'
| |         |     |             |       | `-ParenExpr 0x561674f06ac0 'float'
| |         |     |             |       |   `-BinaryOperator 0x561674f06aa0 'float' '*'
| |         |     |             |       |     |-FloatingLiteral 0x561674f06a48 'float' 1.192093e-07
| |         |     |             |       |     `-ImplicitCastExpr 0x561674f06a88 'float' <IntegralToFloating>
| |         |     |             |       |       `-IntegerLiteral 0x561674f06a68 'int' 256
| |         |     |             |       `-ParenExpr 0x561674f07610 'float'
| |         |     |             |         `-ConditionalOperator 0x561674f075e0 'float'
| |         |     |             |           |-ParenExpr 0x561674f07070 '_Bool'
| |         |     |             |           | `-BinaryOperator 0x561674f07050 '_Bool' '>'
| |         |     |             |           |   |-ParenExpr 0x561674f06ff0 'float'
| |         |     |             |           |   | `-ParenExpr 0x561674f06fd0 'float'
| |         |     |             |           |   |   `-BinaryOperator 0x561674f06fb0 'float' '+'
| |         |     |             |           |   |     |-ParenExpr 0x561674f06d38 'float'
| |         |     |             |           |   |     | `-ConditionalOperator 0x561674f06d08 'float'
| |         |     |             |           |   |     |   |-BinaryOperator 0x561674f06bc0 '_Bool' '>'
| |         |     |             |           |   |     |   | |-ImplicitCastExpr 0x561674f06b90 'float' <LValueToRValue>
| |         |     |             |           |   |     |   | | `-ParenExpr 0x561674f06b50 'float' lvalue
| |         |     |             |           |   |     |   | |   `-UnaryOperator 0x561674f06b38 'float' lvalue prefix '*' cannot overflow
| |         |     |             |           |   |     |   | |     `-ImplicitCastExpr 0x561674f06b20 'float *' <LValueToRValue>
| |         |     |             |           |   |     |   | |       `-DeclRefExpr 0x561674f06b00 'float *' lvalue Var 0x561674f05d08 'el' 'float *'
| |         |     |             |           |   |     |   | `-ImplicitCastExpr 0x561674f06ba8 'float' <IntegralToFloating>
| |         |     |             |           |   |     |   |   `-IntegerLiteral 0x561674f06b70 'int' 0
| |         |     |             |           |   |     |   |-ImplicitCastExpr 0x561674f06cf0 'float' <LValueToRValue>
| |         |     |             |           |   |     |   | `-ParenExpr 0x561674f06c30 'float' lvalue
| |         |     |             |           |   |     |   |   `-UnaryOperator 0x561674f06c18 'float' lvalue prefix '*' cannot overflow
| |         |     |             |           |   |     |   |     `-ImplicitCastExpr 0x561674f06c00 'float *' <LValueToRValue>
| |         |     |             |           |   |     |   |       `-DeclRefExpr 0x561674f06be0 'float *' lvalue Var 0x561674f05d08 'el' 'float *'
| |         |     |             |           |   |     |   `-UnaryOperator 0x561674f06cd8 'float' prefix '-'
| |         |     |             |           |   |     |     `-ImplicitCastExpr 0x561674f06cc0 'float' <LValueToRValue>
| |         |     |             |           |   |     |       `-ParenExpr 0x561674f06ca0 'float' lvalue
| |         |     |             |           |   |     |         `-UnaryOperator 0x561674f06c88 'float' lvalue prefix '*' cannot overflow
| |         |     |             |           |   |     |           `-ImplicitCastExpr 0x561674f06c70 'float *' <LValueToRValue>
| |         |     |             |           |   |     |             `-DeclRefExpr 0x561674f06c50 'float *' lvalue Var 0x561674f05d08 'el' 'float *'
| |         |     |             |           |   |     `-ParenExpr 0x561674f06f90 'float'
| |         |     |             |           |   |       `-ConditionalOperator 0x561674f06f60 'float'
| |         |     |             |           |   |         |-BinaryOperator 0x561674f06e18 '_Bool' '>'
| |         |     |             |           |   |         | |-ImplicitCastExpr 0x561674f06de8 'float' <LValueToRValue>
| |         |     |             |           |   |         | | `-ParenExpr 0x561674f06da8 'float' lvalue
| |         |     |             |           |   |         | |   `-UnaryOperator 0x561674f06d90 'float' lvalue prefix '*' cannot overflow
| |         |     |             |           |   |         | |     `-ImplicitCastExpr 0x561674f06d78 'float *' <LValueToRValue>
| |         |     |             |           |   |         | |       `-DeclRefExpr 0x561674f06d58 'float *' lvalue Var 0x561674f05d88 'correct' 'float *'
| |         |     |             |           |   |         | `-ImplicitCastExpr 0x561674f06e00 'float' <IntegralToFloating>
| |         |     |             |           |   |         |   `-IntegerLiteral 0x561674f06dc8 'int' 0
| |         |     |             |           |   |         |-ImplicitCastExpr 0x561674f06f48 'float' <LValueToRValue>
| |         |     |             |           |   |         | `-ParenExpr 0x561674f06e88 'float' lvalue
| |         |     |             |           |   |         |   `-UnaryOperator 0x561674f06e70 'float' lvalue prefix '*' cannot overflow
| |         |     |             |           |   |         |     `-ImplicitCastExpr 0x561674f06e58 'float *' <LValueToRValue>
| |         |     |             |           |   |         |       `-DeclRefExpr 0x561674f06e38 'float *' lvalue Var 0x561674f05d88 'correct' 'float *'
| |         |     |             |           |   |         `-UnaryOperator 0x561674f06f30 'float' prefix '-'
| |         |     |             |           |   |           `-ImplicitCastExpr 0x561674f06f18 'float' <LValueToRValue>
| |         |     |             |           |   |             `-ParenExpr 0x561674f06ef8 'float' lvalue
| |         |     |             |           |   |               `-UnaryOperator 0x561674f06ee0 'float' lvalue prefix '*' cannot overflow
| |         |     |             |           |   |                 `-ImplicitCastExpr 0x561674f06ec8 'float *' <LValueToRValue>
| |         |     |             |           |   |                   `-DeclRefExpr 0x561674f06ea8 'float *' lvalue Var 0x561674f05d88 'correct' 'float *'
| |         |     |             |           |   `-ParenExpr 0x561674f07030 'float'
| |         |     |             |           |     `-FloatingLiteral 0x561674f07010 'float' 3.402823e+38
| |         |     |             |           |-ParenExpr 0x561674f070b0 'float'
| |         |     |             |           | `-FloatingLiteral 0x561674f07090 'float' 3.402823e+38
| |         |     |             |           `-ParenExpr 0x561674f075c0 'float'
| |         |     |             |             `-ParenExpr 0x561674f075a0 'float'
| |         |     |             |               `-BinaryOperator 0x561674f07580 'float' '+'
| |         |     |             |                 |-ParenExpr 0x561674f07308 'float'
| |         |     |             |                 | `-ConditionalOperator 0x561674f072d8 'float'
| |         |     |             |                 |   |-BinaryOperator 0x561674f07190 '_Bool' '>'
| |         |     |             |                 |   | |-ImplicitCastExpr 0x561674f07160 'float' <LValueToRValue>
| |         |     |             |                 |   | | `-ParenExpr 0x561674f07120 'float' lvalue
| |         |     |             |                 |   | |   `-UnaryOperator 0x561674f07108 'float' lvalue prefix '*' cannot overflow
| |         |     |             |                 |   | |     `-ImplicitCastExpr 0x561674f070f0 'float *' <LValueToRValue>
| |         |     |             |                 |   | |       `-DeclRefExpr 0x561674f070d0 'float *' lvalue Var 0x561674f05d08 'el' 'float *'
| |         |     |             |                 |   | `-ImplicitCastExpr 0x561674f07178 'float' <IntegralToFloating>
| |         |     |             |                 |   |   `-IntegerLiteral 0x561674f07140 'int' 0
| |         |     |             |                 |   |-ImplicitCastExpr 0x561674f072c0 'float' <LValueToRValue>
| |         |     |             |                 |   | `-ParenExpr 0x561674f07200 'float' lvalue
| |         |     |             |                 |   |   `-UnaryOperator 0x561674f071e8 'float' lvalue prefix '*' cannot overflow
| |         |     |             |                 |   |     `-ImplicitCastExpr 0x561674f071d0 'float *' <LValueToRValue>
| |         |     |             |                 |   |       `-DeclRefExpr 0x561674f071b0 'float *' lvalue Var 0x561674f05d08 'el' 'float *'
| |         |     |             |                 |   `-UnaryOperator 0x561674f072a8 'float' prefix '-'
| |         |     |             |                 |     `-ImplicitCastExpr 0x561674f07290 'float' <LValueToRValue>
| |         |     |             |                 |       `-ParenExpr 0x561674f07270 'float' lvalue
| |         |     |             |                 |         `-UnaryOperator 0x561674f07258 'float' lvalue prefix '*' cannot overflow
| |         |     |             |                 |           `-ImplicitCastExpr 0x561674f07240 'float *' <LValueToRValue>
| |         |     |             |                 |             `-DeclRefExpr 0x561674f07220 'float *' lvalue Var 0x561674f05d08 'el' 'float *'
| |         |     |             |                 `-ParenExpr 0x561674f07560 'float'
| |         |     |             |                   `-ConditionalOperator 0x561674f07530 'float'
| |         |     |             |                     |-BinaryOperator 0x561674f073e8 '_Bool' '>'
| |         |     |             |                     | |-ImplicitCastExpr 0x561674f073b8 'float' <LValueToRValue>
| |         |     |             |                     | | `-ParenExpr 0x561674f07378 'float' lvalue
| |         |     |             |                     | |   `-UnaryOperator 0x561674f07360 'float' lvalue prefix '*' cannot overflow
| |         |     |             |                     | |     `-ImplicitCastExpr 0x561674f07348 'float *' <LValueToRValue>
| |         |     |             |                     | |       `-DeclRefExpr 0x561674f07328 'float *' lvalue Var 0x561674f05d88 'correct' 'float *'
| |         |     |             |                     | `-ImplicitCastExpr 0x561674f073d0 'float' <IntegralToFloating>
| |         |     |             |                     |   `-IntegerLiteral 0x561674f07398 'int' 0
| |         |     |             |                     |-ImplicitCastExpr 0x561674f07518 'float' <LValueToRValue>
| |         |     |             |                     | `-ParenExpr 0x561674f07458 'float' lvalue
| |         |     |             |                     |   `-UnaryOperator 0x561674f07440 'float' lvalue prefix '*' cannot overflow
| |         |     |             |                     |     `-ImplicitCastExpr 0x561674f07428 'float *' <LValueToRValue>
| |         |     |             |                     |       `-DeclRefExpr 0x561674f07408 'float *' lvalue Var 0x561674f05d88 'correct' 'float *'
| |         |     |             |                     `-UnaryOperator 0x561674f07500 'float' prefix '-'
| |         |     |             |                       `-ImplicitCastExpr 0x561674f074e8 'float' <LValueToRValue>
| |         |     |             |                         `-ParenExpr 0x561674f074c8 'float' lvalue
| |         |     |             |                           `-UnaryOperator 0x561674f074b0 'float' lvalue prefix '*' cannot overflow
| |         |     |             |                             `-ImplicitCastExpr 0x561674f07498 'float *' <LValueToRValue>
| |         |     |             |                               `-DeclRefExpr 0x561674f07478 'float *' lvalue Var 0x561674f05d88 'correct' 'float *'
| |         |     |             |-ParenExpr 0x561674f076f0 'float'
| |         |     |             | `-ParenExpr 0x561674f076d0 'float'
| |         |     |             |   `-FloatingLiteral 0x561674f076b0 'float' 1.175494e-38
| |         |     |             `-ParenExpr 0x561674f08318 'float'
| |         |     |               `-BinaryOperator 0x561674f082f8 'float' '*'
| |         |     |                 |-ParenExpr 0x561674f077a8 'float'
| |         |     |                 | `-ParenExpr 0x561674f07788 'float'
| |         |     |                 |   `-BinaryOperator 0x561674f07768 'float' '*'
| |         |     |                 |     |-FloatingLiteral 0x561674f07710 'float' 1.192093e-07
| |         |     |                 |     `-ImplicitCastExpr 0x561674f07750 'float' <IntegralToFloating>
| |         |     |                 |       `-IntegerLiteral 0x561674f07730 'int' 256
| |         |     |                 `-ParenExpr 0x561674f082d8 'float'
| |         |     |                   `-ConditionalOperator 0x561674f082a8 'float'
| |         |     |                     |-ParenExpr 0x561674f07d38 '_Bool'
| |         |     |                     | `-BinaryOperator 0x561674f07d18 '_Bool' '>'
| |         |     |                     |   |-ParenExpr 0x561674f07cb8 'float'
| |         |     |                     |   | `-ParenExpr 0x561674f07c98 'float'
| |         |     |                     |   |   `-BinaryOperator 0x561674f07c78 'float' '+'
| |         |     |                     |   |     |-ParenExpr 0x561674f07a00 'float'
| |         |     |                     |   |     | `-ConditionalOperator 0x561674f079d0 'float'
| |         |     |                     |   |     |   |-BinaryOperator 0x561674f07888 '_Bool' '>'
| |         |     |                     |   |     |   | |-ImplicitCastExpr 0x561674f07858 'float' <LValueToRValue>
| |         |     |                     |   |     |   | | `-ParenExpr 0x561674f07818 'float' lvalue
| |         |     |                     |   |     |   | |   `-UnaryOperator 0x561674f07800 'float' lvalue prefix '*' cannot overflow
| |         |     |                     |   |     |   | |     `-ImplicitCastExpr 0x561674f077e8 'float *' <LValueToRValue>
| |         |     |                     |   |     |   | |       `-DeclRefExpr 0x561674f077c8 'float *' lvalue Var 0x561674f05d08 'el' 'float *'
| |         |     |                     |   |     |   | `-ImplicitCastExpr 0x561674f07870 'float' <IntegralToFloating>
| |         |     |                     |   |     |   |   `-IntegerLiteral 0x561674f07838 'int' 0
| |         |     |                     |   |     |   |-ImplicitCastExpr 0x561674f079b8 'float' <LValueToRValue>
| |         |     |                     |   |     |   | `-ParenExpr 0x561674f078f8 'float' lvalue
| |         |     |                     |   |     |   |   `-UnaryOperator 0x561674f078e0 'float' lvalue prefix '*' cannot overflow
| |         |     |                     |   |     |   |     `-ImplicitCastExpr 0x561674f078c8 'float *' <LValueToRValue>
| |         |     |                     |   |     |   |       `-DeclRefExpr 0x561674f078a8 'float *' lvalue Var 0x561674f05d08 'el' 'float *'
| |         |     |                     |   |     |   `-UnaryOperator 0x561674f079a0 'float' prefix '-'
| |         |     |                     |   |     |     `-ImplicitCastExpr 0x561674f07988 'float' <LValueToRValue>
| |         |     |                     |   |     |       `-ParenExpr 0x561674f07968 'float' lvalue
| |         |     |                     |   |     |         `-UnaryOperator 0x561674f07950 'float' lvalue prefix '*' cannot overflow
| |         |     |                     |   |     |           `-ImplicitCastExpr 0x561674f07938 'float *' <LValueToRValue>
| |         |     |                     |   |     |             `-DeclRefExpr 0x561674f07918 'float *' lvalue Var 0x561674f05d08 'el' 'float *'
| |         |     |                     |   |     `-ParenExpr 0x561674f07c58 'float'
| |         |     |                     |   |       `-ConditionalOperator 0x561674f07c28 'float'
| |         |     |                     |   |         |-BinaryOperator 0x561674f07ae0 '_Bool' '>'
| |         |     |                     |   |         | |-ImplicitCastExpr 0x561674f07ab0 'float' <LValueToRValue>
| |         |     |                     |   |         | | `-ParenExpr 0x561674f07a70 'float' lvalue
| |         |     |                     |   |         | |   `-UnaryOperator 0x561674f07a58 'float' lvalue prefix '*' cannot overflow
| |         |     |                     |   |         | |     `-ImplicitCastExpr 0x561674f07a40 'float *' <LValueToRValue>
| |         |     |                     |   |         | |       `-DeclRefExpr 0x561674f07a20 'float *' lvalue Var 0x561674f05d88 'correct' 'float *'
| |         |     |                     |   |         | `-ImplicitCastExpr 0x561674f07ac8 'float' <IntegralToFloating>
| |         |     |                     |   |         |   `-IntegerLiteral 0x561674f07a90 'int' 0
| |         |     |                     |   |         |-ImplicitCastExpr 0x561674f07c10 'float' <LValueToRValue>
| |         |     |                     |   |         | `-ParenExpr 0x561674f07b50 'float' lvalue
| |         |     |                     |   |         |   `-UnaryOperator 0x561674f07b38 'float' lvalue prefix '*' cannot overflow
| |         |     |                     |   |         |     `-ImplicitCastExpr 0x561674f07b20 'float *' <LValueToRValue>
| |         |     |                     |   |         |       `-DeclRefExpr 0x561674f07b00 'float *' lvalue Var 0x561674f05d88 'correct' 'float *'
| |         |     |                     |   |         `-UnaryOperator 0x561674f07bf8 'float' prefix '-'
| |         |     |                     |   |           `-ImplicitCastExpr 0x561674f07be0 'float' <LValueToRValue>
| |         |     |                     |   |             `-ParenExpr 0x561674f07bc0 'float' lvalue
| |         |     |                     |   |               `-UnaryOperator 0x561674f07ba8 'float' lvalue prefix '*' cannot overflow
| |         |     |                     |   |                 `-ImplicitCastExpr 0x561674f07b90 'float *' <LValueToRValue>
| |         |     |                     |   |                   `-DeclRefExpr 0x561674f07b70 'float *' lvalue Var 0x561674f05d88 'correct' 'float *'
| |         |     |                     |   `-ParenExpr 0x561674f07cf8 'float'
| |         |     |                     |     `-FloatingLiteral 0x561674f07cd8 'float' 3.402823e+38
| |         |     |                     |-ParenExpr 0x561674f07d78 'float'
| |         |     |                     | `-FloatingLiteral 0x561674f07d58 'float' 3.402823e+38
| |         |     |                     `-ParenExpr 0x561674f08288 'float'
| |         |     |                       `-ParenExpr 0x561674f08268 'float'
| |         |     |                         `-BinaryOperator 0x561674f08248 'float' '+'
| |         |     |                           |-ParenExpr 0x561674f07fd0 'float'
| |         |     |                           | `-ConditionalOperator 0x561674f07fa0 'float'
| |         |     |                           |   |-BinaryOperator 0x561674f07e58 '_Bool' '>'
| |         |     |                           |   | |-ImplicitCastExpr 0x561674f07e28 'float' <LValueToRValue>
| |         |     |                           |   | | `-ParenExpr 0x561674f07de8 'float' lvalue
| |         |     |                           |   | |   `-UnaryOperator 0x561674f07dd0 'float' lvalue prefix '*' cannot overflow
| |         |     |                           |   | |     `-ImplicitCastExpr 0x561674f07db8 'float *' <LValueToRValue>
| |         |     |                           |   | |       `-DeclRefExpr 0x561674f07d98 'float *' lvalue Var 0x561674f05d08 'el' 'float *'
| |         |     |                           |   | `-ImplicitCastExpr 0x561674f07e40 'float' <IntegralToFloating>
| |         |     |                           |   |   `-IntegerLiteral 0x561674f07e08 'int' 0
| |         |     |                           |   |-ImplicitCastExpr 0x561674f07f88 'float' <LValueToRValue>
| |         |     |                           |   | `-ParenExpr 0x561674f07ec8 'float' lvalue
| |         |     |                           |   |   `-UnaryOperator 0x561674f07eb0 'float' lvalue prefix '*' cannot overflow
| |         |     |                           |   |     `-ImplicitCastExpr 0x561674f07e98 'float *' <LValueToRValue>
| |         |     |                           |   |       `-DeclRefExpr 0x561674f07e78 'float *' lvalue Var 0x561674f05d08 'el' 'float *'
| |         |     |                           |   `-UnaryOperator 0x561674f07f70 'float' prefix '-'
| |         |     |                           |     `-ImplicitCastExpr 0x561674f07f58 'float' <LValueToRValue>
| |         |     |                           |       `-ParenExpr 0x561674f07f38 'float' lvalue
| |         |     |                           |         `-UnaryOperator 0x561674f07f20 'float' lvalue prefix '*' cannot overflow
| |         |     |                           |           `-ImplicitCastExpr 0x561674f07f08 'float *' <LValueToRValue>
| |         |     |                           |             `-DeclRefExpr 0x561674f07ee8 'float *' lvalue Var 0x561674f05d08 'el' 'float *'
| |         |     |                           `-ParenExpr 0x561674f08228 'float'
| |         |     |                             `-ConditionalOperator 0x561674f081f8 'float'
| |         |     |                               |-BinaryOperator 0x561674f080b0 '_Bool' '>'
| |         |     |                               | |-ImplicitCastExpr 0x561674f08080 'float' <LValueToRValue>
| |         |     |                               | | `-ParenExpr 0x561674f08040 'float' lvalue
| |         |     |                               | |   `-UnaryOperator 0x561674f08028 'float' lvalue prefix '*' cannot overflow
| |         |     |                               | |     `-ImplicitCastExpr 0x561674f08010 'float *' <LValueToRValue>
| |         |     |                               | |       `-DeclRefExpr 0x561674f07ff0 'float *' lvalue Var 0x561674f05d88 'correct' 'float *'
| |         |     |                               | `-ImplicitCastExpr 0x561674f08098 'float' <IntegralToFloating>
| |         |     |                               |   `-IntegerLiteral 0x561674f08060 'int' 0
| |         |     |                               |-ImplicitCastExpr 0x561674f081e0 'float' <LValueToRValue>
| |         |     |                               | `-ParenExpr 0x561674f08120 'float' lvalue
| |         |     |                               |   `-UnaryOperator 0x561674f08108 'float' lvalue prefix '*' cannot overflow
| |         |     |                               |     `-ImplicitCastExpr 0x561674f080f0 'float *' <LValueToRValue>
| |         |     |                               |       `-DeclRefExpr 0x561674f080d0 'float *' lvalue Var 0x561674f05d88 'correct' 'float *'
| |         |     |                               `-UnaryOperator 0x561674f081c8 'float' prefix '-'
| |         |     |                                 `-ImplicitCastExpr 0x561674f081b0 'float' <LValueToRValue>
| |         |     |                                   `-ParenExpr 0x561674f08190 'float' lvalue
| |         |     |                                     `-UnaryOperator 0x561674f08178 'float' lvalue prefix '*' cannot overflow
| |         |     |                                       `-ImplicitCastExpr 0x561674f08160 'float *' <LValueToRValue>
| |         |     |                                         `-DeclRefExpr 0x561674f08140 'float *' lvalue Var 0x561674f05d88 'correct' 'float *'
| |         |     `-CompoundStmt 0x561674f0b258
| |         |       |-DeclStmt 0x561674f09048
| |         |       | `-VarDecl 0x561674f08438  used relative_error_nonzero 'double' cinit
| |         |       |   `-ConditionalOperator 0x561674f09018 'double'
| |         |       |     |-ParenExpr 0x561674f08610 '_Bool'
| |         |       |     | `-BinaryOperator 0x561674f085f0 '_Bool' '||'
| |         |       |     |   |-BinaryOperator 0x561674f08528 '_Bool' '<='
| |         |       |     |   | |-ImplicitCastExpr 0x561674f08510 'float' <LValueToRValue>
| |         |       |     |   | | `-UnaryOperator 0x561674f084d8 'float' lvalue prefix '*' cannot overflow
| |         |       |     |   | |   `-ImplicitCastExpr 0x561674f084c0 'float *' <LValueToRValue>
| |         |       |     |   | |     `-DeclRefExpr 0x561674f084a0 'float *' lvalue Var 0x561674f05d08 'el' 'float *'
| |         |       |     |   | `-FloatingLiteral 0x561674f084f0 'float' 1.175494e-38
| |         |       |     |   `-BinaryOperator 0x561674f085d0 '_Bool' '<='
| |         |       |     |     |-ImplicitCastExpr 0x561674f085b8 'float' <LValueToRValue>
| |         |       |     |     | `-UnaryOperator 0x561674f08580 'float' lvalue prefix '*' cannot overflow
| |         |       |     |     |   `-ImplicitCastExpr 0x561674f08568 'float *' <LValueToRValue>
| |         |       |     |     |     `-DeclRefExpr 0x561674f08548 'float *' lvalue Var 0x561674f05d88 'correct' 'float *'
| |         |       |     |     `-FloatingLiteral 0x561674f08598 'float' 1.175494e-38
| |         |       |     |-ImplicitCastExpr 0x561674f09000 'double' <IntegralToFloating>
| |         |       |     | `-IntegerLiteral 0x561674f08630 'int' 0
| |         |       |     `-BinaryOperator 0x561674f08fe0 'double' '/'
| |         |       |       |-ParenExpr 0x561674f08ab8 'double'
| |         |       |       | `-CStyleCastExpr 0x561674f08a90 'double' <NoOp>
| |         |       |       |   `-ImplicitCastExpr 0x561674f08a78 'double' <FloatingCast> part_of_explicit_cast
| |         |       |       |     `-ParenExpr 0x561674f08a58 'float'
| |         |       |       |       `-ConditionalOperator 0x561674f089f0 'float'
| |         |       |       |         |-BinaryOperator 0x561674f08798 '_Bool' '>'
| |         |       |       |         | |-ParenExpr 0x561674f08740 'float'
| |         |       |       |         | | `-BinaryOperator 0x561674f08720 'float' '-'
| |         |       |       |         | |   |-ImplicitCastExpr 0x561674f086f0 'float' <LValueToRValue>
| |         |       |       |         | |   | `-UnaryOperator 0x561674f08688 'float' lvalue prefix '*' cannot overflow
| |         |       |       |         | |   |   `-ImplicitCastExpr 0x561674f08670 'float *' <LValueToRValue>
| |         |       |       |         | |   |     `-DeclRefExpr 0x561674f08650 'float *' lvalue Var 0x561674f05d08 'el' 'float *'
| |         |       |       |         | |   `-ImplicitCastExpr 0x561674f08708 'float' <LValueToRValue>
| |         |       |       |         | |     `-UnaryOperator 0x561674f086d8 'float' lvalue prefix '*' cannot overflow
| |         |       |       |         | |       `-ImplicitCastExpr 0x561674f086c0 'float *' <LValueToRValue>
| |         |       |       |         | |         `-DeclRefExpr 0x561674f086a0 'float *' lvalue Var 0x561674f05d88 'correct' 'float *'
| |         |       |       |         | `-ImplicitCastExpr 0x561674f08780 'float' <IntegralToFloating>
| |         |       |       |         |   `-IntegerLiteral 0x561674f08760 'int' 0
| |         |       |       |         |-ParenExpr 0x561674f088a8 'float'
| |         |       |       |         | `-BinaryOperator 0x561674f08888 'float' '-'
| |         |       |       |         |   |-ImplicitCastExpr 0x561674f08858 'float' <LValueToRValue>
| |         |       |       |         |   | `-UnaryOperator 0x561674f087f0 'float' lvalue prefix '*' cannot overflow
| |         |       |       |         |   |   `-ImplicitCastExpr 0x561674f087d8 'float *' <LValueToRValue>
| |         |       |       |         |   |     `-DeclRefExpr 0x561674f087b8 'float *' lvalue Var 0x561674f05d08 'el' 'float *'
| |         |       |       |         |   `-ImplicitCastExpr 0x561674f08870 'float' <LValueToRValue>
| |         |       |       |         |     `-UnaryOperator 0x561674f08840 'float' lvalue prefix '*' cannot overflow
| |         |       |       |         |       `-ImplicitCastExpr 0x561674f08828 'float *' <LValueToRValue>
| |         |       |       |         |         `-DeclRefExpr 0x561674f08808 'float *' lvalue Var 0x561674f05d88 'correct' 'float *'
| |         |       |       |         `-UnaryOperator 0x561674f089d8 'float' prefix '-'
| |         |       |       |           `-ParenExpr 0x561674f089b8 'float'
| |         |       |       |             `-BinaryOperator 0x561674f08998 'float' '-'
| |         |       |       |               |-ImplicitCastExpr 0x561674f08968 'float' <LValueToRValue>
| |         |       |       |               | `-UnaryOperator 0x561674f08900 'float' lvalue prefix '*' cannot overflow
| |         |       |       |               |   `-ImplicitCastExpr 0x561674f088e8 'float *' <LValueToRValue>
| |         |       |       |               |     `-DeclRefExpr 0x561674f088c8 'float *' lvalue Var 0x561674f05d08 'el' 'float *'
| |         |       |       |               `-ImplicitCastExpr 0x561674f08980 'float' <LValueToRValue>
| |         |       |       |                 `-UnaryOperator 0x561674f08950 'float' lvalue prefix '*' cannot overflow
| |         |       |       |                   `-ImplicitCastExpr 0x561674f08938 'float *' <LValueToRValue>
| |         |       |       |                     `-DeclRefExpr 0x561674f08918 'float *' lvalue Var 0x561674f05d88 'correct' 'float *'
| |         |       |       `-ImplicitCastExpr 0x561674f08fc8 'double' <FloatingCast>
| |         |       |         `-ParenExpr 0x561674f08fa8 'float'
| |         |       |           `-BinaryOperator 0x561674f08f88 'float' '+'
| |         |       |             |-ParenExpr 0x561674f08d10 'float'
| |         |       |             | `-ConditionalOperator 0x561674f08ce0 'float'
| |         |       |             |   |-BinaryOperator 0x561674f08b98 '_Bool' '>'
| |         |       |             |   | |-ImplicitCastExpr 0x561674f08b68 'float' <LValueToRValue>
| |         |       |             |   | | `-ParenExpr 0x561674f08b28 'float' lvalue
| |         |       |             |   | |   `-UnaryOperator 0x561674f08b10 'float' lvalue prefix '*' cannot overflow
| |         |       |             |   | |     `-ImplicitCastExpr 0x561674f08af8 'float *' <LValueToRValue>
| |         |       |             |   | |       `-DeclRefExpr 0x561674f08ad8 'float *' lvalue Var 0x561674f05d08 'el' 'float *'
| |         |       |             |   | `-ImplicitCastExpr 0x561674f08b80 'float' <IntegralToFloating>
| |         |       |             |   |   `-IntegerLiteral 0x561674f08b48 'int' 0
| |         |       |             |   |-ImplicitCastExpr 0x561674f08cc8 'float' <LValueToRValue>
| |         |       |             |   | `-ParenExpr 0x561674f08c08 'float' lvalue
| |         |       |             |   |   `-UnaryOperator 0x561674f08bf0 'float' lvalue prefix '*' cannot overflow
| |         |       |             |   |     `-ImplicitCastExpr 0x561674f08bd8 'float *' <LValueToRValue>
| |         |       |             |   |       `-DeclRefExpr 0x561674f08bb8 'float *' lvalue Var 0x561674f05d08 'el' 'float *'
| |         |       |             |   `-UnaryOperator 0x561674f08cb0 'float' prefix '-'
| |         |       |             |     `-ImplicitCastExpr 0x561674f08c98 'float' <LValueToRValue>
| |         |       |             |       `-ParenExpr 0x561674f08c78 'float' lvalue
| |         |       |             |         `-UnaryOperator 0x561674f08c60 'float' lvalue prefix '*' cannot overflow
| |         |       |             |           `-ImplicitCastExpr 0x561674f08c48 'float *' <LValueToRValue>
| |         |       |             |             `-DeclRefExpr 0x561674f08c28 'float *' lvalue Var 0x561674f05d08 'el' 'float *'
| |         |       |             `-ParenExpr 0x561674f08f68 'float'
| |         |       |               `-ConditionalOperator 0x561674f08f38 'float'
| |         |       |                 |-BinaryOperator 0x561674f08df0 '_Bool' '>'
| |         |       |                 | |-ImplicitCastExpr 0x561674f08dc0 'float' <LValueToRValue>
| |         |       |                 | | `-ParenExpr 0x561674f08d80 'float' lvalue
| |         |       |                 | |   `-UnaryOperator 0x561674f08d68 'float' lvalue prefix '*' cannot overflow
| |         |       |                 | |     `-ImplicitCastExpr 0x561674f08d50 'float *' <LValueToRValue>
| |         |       |                 | |       `-DeclRefExpr 0x561674f08d30 'float *' lvalue Var 0x561674f05d88 'correct' 'float *'
| |         |       |                 | `-ImplicitCastExpr 0x561674f08dd8 'float' <IntegralToFloating>
| |         |       |                 |   `-IntegerLiteral 0x561674f08da0 'int' 0
| |         |       |                 |-ImplicitCastExpr 0x561674f08f20 'float' <LValueToRValue>
| |         |       |                 | `-ParenExpr 0x561674f08e60 'float' lvalue
| |         |       |                 |   `-UnaryOperator 0x561674f08e48 'float' lvalue prefix '*' cannot overflow
| |         |       |                 |     `-ImplicitCastExpr 0x561674f08e30 'float *' <LValueToRValue>
| |         |       |                 |       `-DeclRefExpr 0x561674f08e10 'float *' lvalue Var 0x561674f05d88 'correct' 'float *'
| |         |       |                 `-UnaryOperator 0x561674f08f08 'float' prefix '-'
| |         |       |                   `-ImplicitCastExpr 0x561674f08ef0 'float' <LValueToRValue>
| |         |       |                     `-ParenExpr 0x561674f08ed0 'float' lvalue
| |         |       |                       `-UnaryOperator 0x561674f08eb8 'float' lvalue prefix '*' cannot overflow
| |         |       |                         `-ImplicitCastExpr 0x561674f08ea0 'float *' <LValueToRValue>
| |         |       |                           `-DeclRefExpr 0x561674f08e80 'float *' lvalue Var 0x561674f05d88 'correct' 'float *'
| |         |       |-BinaryOperator 0x561674f09258 'double' lvalue '='
| |         |       | |-DeclRefExpr 0x561674f09060 'double' lvalue Var 0x561674f05fa8 'largest_relative_error_nonzero' 'double'
| |         |       | `-ImplicitCastExpr 0x561674f09240 'double' <LValueToRValue>
| |         |       |   `-ParenExpr 0x561674f09220 'double' lvalue
| |         |       |     `-ConditionalOperator 0x561674f091f0 'double' lvalue
| |         |       |       |-ParenExpr 0x561674f09150 '_Bool'
| |         |       |       | `-BinaryOperator 0x561674f09130 '_Bool' '>'
| |         |       |       |   |-ImplicitCastExpr 0x561674f09100 'double' <LValueToRValue>
| |         |       |       |   | `-ParenExpr 0x561674f090a0 'double' lvalue
| |         |       |       |   |   `-DeclRefExpr 0x561674f09080 'double' lvalue Var 0x561674f08438 'relative_error_nonzero' 'double'
| |         |       |       |   `-ImplicitCastExpr 0x561674f09118 'double' <LValueToRValue>
| |         |       |       |     `-ParenExpr 0x561674f090e0 'double' lvalue
| |         |       |       |       `-DeclRefExpr 0x561674f090c0 'double' lvalue Var 0x561674f05fa8 'largest_relative_error_nonzero' 'double'
| |         |       |       |-ParenExpr 0x561674f09190 'double' lvalue
| |         |       |       | `-DeclRefExpr 0x561674f09170 'double' lvalue Var 0x561674f08438 'relative_error_nonzero' 'double'
| |         |       |       `-ParenExpr 0x561674f091d0 'double' lvalue
| |         |       |         `-DeclRefExpr 0x561674f091b0 'double' lvalue Var 0x561674f05fa8 'largest_relative_error_nonzero' 'double'
| |         |       |-DeclStmt 0x561674f09ca8
| |         |       | `-VarDecl 0x561674f09290  used relative_error 'double' cinit
| |         |       |   `-BinaryOperator 0x561674f09c88 'double' '/'
| |         |       |     |-ParenExpr 0x561674f09760 'double'
| |         |       |     | `-CStyleCastExpr 0x561674f09738 'double' <NoOp>
| |         |       |     |   `-ImplicitCastExpr 0x561674f09720 'double' <FloatingCast> part_of_explicit_cast
| |         |       |     |     `-ParenExpr 0x561674f09700 'float'
| |         |       |     |       `-ConditionalOperator 0x561674f09698 'float'
| |         |       |     |         |-BinaryOperator 0x561674f09440 '_Bool' '>'
| |         |       |     |         | |-ParenExpr 0x561674f093e8 'float'
| |         |       |     |         | | `-BinaryOperator 0x561674f093c8 'float' '-'
| |         |       |     |         | |   |-ImplicitCastExpr 0x561674f09398 'float' <LValueToRValue>
| |         |       |     |         | |   | `-UnaryOperator 0x561674f09330 'float' lvalue prefix '*' cannot overflow
| |         |       |     |         | |   |   `-ImplicitCastExpr 0x561674f09318 'float *' <LValueToRValue>
| |         |       |     |         | |   |     `-DeclRefExpr 0x561674f092f8 'float *' lvalue Var 0x561674f05d08 'el' 'float *'
| |         |       |     |         | |   `-ImplicitCastExpr 0x561674f093b0 'float' <LValueToRValue>
| |         |       |     |         | |     `-UnaryOperator 0x561674f09380 'float' lvalue prefix '*' cannot overflow
| |         |       |     |         | |       `-ImplicitCastExpr 0x561674f09368 'float *' <LValueToRValue>
| |         |       |     |         | |         `-DeclRefExpr 0x561674f09348 'float *' lvalue Var 0x561674f05d88 'correct' 'float *'
| |         |       |     |         | `-ImplicitCastExpr 0x561674f09428 'float' <IntegralToFloating>
| |         |       |     |         |   `-IntegerLiteral 0x561674f09408 'int' 0
| |         |       |     |         |-ParenExpr 0x561674f09550 'float'
| |         |       |     |         | `-BinaryOperator 0x561674f09530 'float' '-'
| |         |       |     |         |   |-ImplicitCastExpr 0x561674f09500 'float' <LValueToRValue>
| |         |       |     |         |   | `-UnaryOperator 0x561674f09498 'float' lvalue prefix '*' cannot overflow
| |         |       |     |         |   |   `-ImplicitCastExpr 0x561674f09480 'float *' <LValueToRValue>
| |         |       |     |         |   |     `-DeclRefExpr 0x561674f09460 'float *' lvalue Var 0x561674f05d08 'el' 'float *'
| |         |       |     |         |   `-ImplicitCastExpr 0x561674f09518 'float' <LValueToRValue>
| |         |       |     |         |     `-UnaryOperator 0x561674f094e8 'float' lvalue prefix '*' cannot overflow
| |         |       |     |         |       `-ImplicitCastExpr 0x561674f094d0 'float *' <LValueToRValue>
| |         |       |     |         |         `-DeclRefExpr 0x561674f094b0 'float *' lvalue Var 0x561674f05d88 'correct' 'float *'
| |         |       |     |         `-UnaryOperator 0x561674f09680 'float' prefix '-'
| |         |       |     |           `-ParenExpr 0x561674f09660 'float'
| |         |       |     |             `-BinaryOperator 0x561674f09640 'float' '-'
| |         |       |     |               |-ImplicitCastExpr 0x561674f09610 'float' <LValueToRValue>
| |         |       |     |               | `-UnaryOperator 0x561674f095a8 'float' lvalue prefix '*' cannot overflow
| |         |       |     |               |   `-ImplicitCastExpr 0x561674f09590 'float *' <LValueToRValue>
| |         |       |     |               |     `-DeclRefExpr 0x561674f09570 'float *' lvalue Var 0x561674f05d08 'el' 'float *'
| |         |       |     |               `-ImplicitCastExpr 0x561674f09628 'float' <LValueToRValue>
| |         |       |     |                 `-UnaryOperator 0x561674f095f8 'float' lvalue prefix '*' cannot overflow
| |         |       |     |                   `-ImplicitCastExpr 0x561674f095e0 'float *' <LValueToRValue>
| |         |       |     |                     `-DeclRefExpr 0x561674f095c0 'float *' lvalue Var 0x561674f05d88 'correct' 'float *'
| |         |       |     `-ImplicitCastExpr 0x561674f09c70 'double' <FloatingCast>
| |         |       |       `-ParenExpr 0x561674f09c50 'float'
| |         |       |         `-BinaryOperator 0x561674f09c30 'float' '+'
| |         |       |           |-ParenExpr 0x561674f099b8 'float'
| |         |       |           | `-ConditionalOperator 0x561674f09988 'float'
| |         |       |           |   |-BinaryOperator 0x561674f09840 '_Bool' '>'
| |         |       |           |   | |-ImplicitCastExpr 0x561674f09810 'float' <LValueToRValue>
| |         |       |           |   | | `-ParenExpr 0x561674f097d0 'float' lvalue
| |         |       |           |   | |   `-UnaryOperator 0x561674f097b8 'float' lvalue prefix '*' cannot overflow
| |         |       |           |   | |     `-ImplicitCastExpr 0x561674f097a0 'float *' <LValueToRValue>
| |         |       |           |   | |       `-DeclRefExpr 0x561674f09780 'float *' lvalue Var 0x561674f05d08 'el' 'float *'
| |         |       |           |   | `-ImplicitCastExpr 0x561674f09828 'float' <IntegralToFloating>
| |         |       |           |   |   `-IntegerLiteral 0x561674f097f0 'int' 0
| |         |       |           |   |-ImplicitCastExpr 0x561674f09970 'float' <LValueToRValue>
| |         |       |           |   | `-ParenExpr 0x561674f098b0 'float' lvalue
| |         |       |           |   |   `-UnaryOperator 0x561674f09898 'float' lvalue prefix '*' cannot overflow
| |         |       |           |   |     `-ImplicitCastExpr 0x561674f09880 'float *' <LValueToRValue>
| |         |       |           |   |       `-DeclRefExpr 0x561674f09860 'float *' lvalue Var 0x561674f05d08 'el' 'float *'
| |         |       |           |   `-UnaryOperator 0x561674f09958 'float' prefix '-'
| |         |       |           |     `-ImplicitCastExpr 0x561674f09940 'float' <LValueToRValue>
| |         |       |           |       `-ParenExpr 0x561674f09920 'float' lvalue
| |         |       |           |         `-UnaryOperator 0x561674f09908 'float' lvalue prefix '*' cannot overflow
| |         |       |           |           `-ImplicitCastExpr 0x561674f098f0 'float *' <LValueToRValue>
| |         |       |           |             `-DeclRefExpr 0x561674f098d0 'float *' lvalue Var 0x561674f05d08 'el' 'float *'
| |         |       |           `-ParenExpr 0x561674f09c10 'float'
| |         |       |             `-ConditionalOperator 0x561674f09be0 'float'
| |         |       |               |-BinaryOperator 0x561674f09a98 '_Bool' '>'
| |         |       |               | |-ImplicitCastExpr 0x561674f09a68 'float' <LValueToRValue>
| |         |       |               | | `-ParenExpr 0x561674f09a28 'float' lvalue
| |         |       |               | |   `-UnaryOperator 0x561674f09a10 'float' lvalue prefix '*' cannot overflow
| |         |       |               | |     `-ImplicitCastExpr 0x561674f099f8 'float *' <LValueToRValue>
| |         |       |               | |       `-DeclRefExpr 0x561674f099d8 'float *' lvalue Var 0x561674f05d88 'correct' 'float *'
| |         |       |               | `-ImplicitCastExpr 0x561674f09a80 'float' <IntegralToFloating>
| |         |       |               |   `-IntegerLiteral 0x561674f09a48 'int' 0
| |         |       |               |-ImplicitCastExpr 0x561674f09bc8 'float' <LValueToRValue>
| |         |       |               | `-ParenExpr 0x561674f09b08 'float' lvalue
| |         |       |               |   `-UnaryOperator 0x561674f09af0 'float' lvalue prefix '*' cannot overflow
| |         |       |               |     `-ImplicitCastExpr 0x561674f09ad8 'float *' <LValueToRValue>
| |         |       |               |       `-DeclRefExpr 0x561674f09ab8 'float *' lvalue Var 0x561674f05d88 'correct' 'float *'
| |         |       |               `-UnaryOperator 0x561674f09bb0 'float' prefix '-'
| |         |       |                 `-ImplicitCastExpr 0x561674f09b98 'float' <LValueToRValue>
| |         |       |                   `-ParenExpr 0x561674f09b78 'float' lvalue
| |         |       |                     `-UnaryOperator 0x561674f09b60 'float' lvalue prefix '*' cannot overflow
| |         |       |                       `-ImplicitCastExpr 0x561674f09b48 'float *' <LValueToRValue>
| |         |       |                         `-DeclRefExpr 0x561674f09b28 'float *' lvalue Var 0x561674f05d88 'correct' 'float *'
| |         |       |-BinaryOperator 0x561674f09eb8 'double' lvalue '='
| |         |       | |-DeclRefExpr 0x561674f09cc0 'double' lvalue Var 0x561674f05ef0 'largest_relative_error' 'double'
| |         |       | `-ImplicitCastExpr 0x561674f09ea0 'double' <LValueToRValue>
| |         |       |   `-ParenExpr 0x561674f09e80 'double' lvalue
| |         |       |     `-ConditionalOperator 0x561674f09e50 'double' lvalue
| |         |       |       |-ParenExpr 0x561674f09db0 '_Bool'
| |         |       |       | `-BinaryOperator 0x561674f09d90 '_Bool' '>'
| |         |       |       |   |-ImplicitCastExpr 0x561674f09d60 'double' <LValueToRValue>
| |         |       |       |   | `-ParenExpr 0x561674f09d00 'double' lvalue
| |         |       |       |   |   `-DeclRefExpr 0x561674f09ce0 'double' lvalue Var 0x561674f09290 'relative_error' 'double'
| |         |       |       |   `-ImplicitCastExpr 0x561674f09d78 'double' <LValueToRValue>
| |         |       |       |     `-ParenExpr 0x561674f09d40 'double' lvalue
| |         |       |       |       `-DeclRefExpr 0x561674f09d20 'double' lvalue Var 0x561674f05ef0 'largest_relative_error' 'double'
| |         |       |       |-ParenExpr 0x561674f09df0 'double' lvalue
| |         |       |       | `-DeclRefExpr 0x561674f09dd0 'double' lvalue Var 0x561674f09290 'relative_error' 'double'
| |         |       |       `-ParenExpr 0x561674f09e30 'double' lvalue
| |         |       |         `-DeclRefExpr 0x561674f09e10 'double' lvalue Var 0x561674f05ef0 'largest_relative_error' 'double'
| |         |       |-DeclStmt 0x561674f0a360
| |         |       | `-VarDecl 0x561674f09ef0  used absolute_error 'double' cinit
| |         |       |   `-ImplicitCastExpr 0x561674f0a348 'double' <FloatingCast>
| |         |       |     `-ParenExpr 0x561674f0a328 'float'
| |         |       |       `-ConditionalOperator 0x561674f0a2f8 'float'
| |         |       |         |-BinaryOperator 0x561674f0a0a0 '_Bool' '>'
| |         |       |         | |-ParenExpr 0x561674f0a048 'float'
| |         |       |         | | `-BinaryOperator 0x561674f0a028 'float' '-'
| |         |       |         | |   |-ImplicitCastExpr 0x561674f09ff8 'float' <LValueToRValue>
| |         |       |         | |   | `-UnaryOperator 0x561674f09f90 'float' lvalue prefix '*' cannot overflow
| |         |       |         | |   |   `-ImplicitCastExpr 0x561674f09f78 'float *' <LValueToRValue>
| |         |       |         | |   |     `-DeclRefExpr 0x561674f09f58 'float *' lvalue Var 0x561674f05d08 'el' 'float *'
| |         |       |         | |   `-ImplicitCastExpr 0x561674f0a010 'float' <LValueToRValue>
| |         |       |         | |     `-UnaryOperator 0x561674f09fe0 'float' lvalue prefix '*' cannot overflow
| |         |       |         | |       `-ImplicitCastExpr 0x561674f09fc8 'float *' <LValueToRValue>
| |         |       |         | |         `-DeclRefExpr 0x561674f09fa8 'float *' lvalue Var 0x561674f05d88 'correct' 'float *'
| |         |       |         | `-ImplicitCastExpr 0x561674f0a088 'float' <IntegralToFloating>
| |         |       |         |   `-IntegerLiteral 0x561674f0a068 'int' 0
| |         |       |         |-ParenExpr 0x561674f0a1b0 'float'
| |         |       |         | `-BinaryOperator 0x561674f0a190 'float' '-'
| |         |       |         |   |-ImplicitCastExpr 0x561674f0a160 'float' <LValueToRValue>
| |         |       |         |   | `-UnaryOperator 0x561674f0a0f8 'float' lvalue prefix '*' cannot overflow
| |         |       |         |   |   `-ImplicitCastExpr 0x561674f0a0e0 'float *' <LValueToRValue>
| |         |       |         |   |     `-DeclRefExpr 0x561674f0a0c0 'float *' lvalue Var 0x561674f05d08 'el' 'float *'
| |         |       |         |   `-ImplicitCastExpr 0x561674f0a178 'float' <LValueToRValue>
| |         |       |         |     `-UnaryOperator 0x561674f0a148 'float' lvalue prefix '*' cannot overflow
| |         |       |         |       `-ImplicitCastExpr 0x561674f0a130 'float *' <LValueToRValue>
| |         |       |         |         `-DeclRefExpr 0x561674f0a110 'float *' lvalue Var 0x561674f05d88 'correct' 'float *'
| |         |       |         `-UnaryOperator 0x561674f0a2e0 'float' prefix '-'
| |         |       |           `-ParenExpr 0x561674f0a2c0 'float'
| |         |       |             `-BinaryOperator 0x561674f0a2a0 'float' '-'
| |         |       |               |-ImplicitCastExpr 0x561674f0a270 'float' <LValueToRValue>
| |         |       |               | `-UnaryOperator 0x561674f0a208 'float' lvalue prefix '*' cannot overflow
| |         |       |               |   `-ImplicitCastExpr 0x561674f0a1f0 'float *' <LValueToRValue>
| |         |       |               |     `-DeclRefExpr 0x561674f0a1d0 'float *' lvalue Var 0x561674f05d08 'el' 'float *'
| |         |       |               `-ImplicitCastExpr 0x561674f0a288 'float' <LValueToRValue>
| |         |       |                 `-UnaryOperator 0x561674f0a258 'float' lvalue prefix '*' cannot overflow
| |         |       |                   `-ImplicitCastExpr 0x561674f0a240 'float *' <LValueToRValue>
| |         |       |                     `-DeclRefExpr 0x561674f0a220 'float *' lvalue Var 0x561674f05d88 'correct' 'float *'
| |         |       |-BinaryOperator 0x561674f0a570 'double' lvalue '='
| |         |       | |-DeclRefExpr 0x561674f0a378 'double' lvalue Var 0x561674f05e38 'largest_absolute_error' 'double'
| |         |       | `-ImplicitCastExpr 0x561674f0a558 'double' <LValueToRValue>
| |         |       |   `-ParenExpr 0x561674f0a538 'double' lvalue
| |         |       |     `-ConditionalOperator 0x561674f0a508 'double' lvalue
| |         |       |       |-ParenExpr 0x561674f0a468 '_Bool'
| |         |       |       | `-BinaryOperator 0x561674f0a448 '_Bool' '>'
| |         |       |       |   |-ImplicitCastExpr 0x561674f0a418 'double' <LValueToRValue>
| |         |       |       |   | `-ParenExpr 0x561674f0a3b8 'double' lvalue
| |         |       |       |   |   `-DeclRefExpr 0x561674f0a398 'double' lvalue Var 0x561674f09ef0 'absolute_error' 'double'
| |         |       |       |   `-ImplicitCastExpr 0x561674f0a430 'double' <LValueToRValue>
| |         |       |       |     `-ParenExpr 0x561674f0a3f8 'double' lvalue
| |         |       |       |       `-DeclRefExpr 0x561674f0a3d8 'double' lvalue Var 0x561674f05e38 'largest_absolute_error' 'double'
| |         |       |       |-ParenExpr 0x561674f0a4a8 'double' lvalue
| |         |       |       | `-DeclRefExpr 0x561674f0a488 'double' lvalue Var 0x561674f09ef0 'absolute_error' 'double'
| |         |       |       `-ParenExpr 0x561674f0a4e8 'double' lvalue
| |         |       |         `-DeclRefExpr 0x561674f0a4c8 'double' lvalue Var 0x561674f05e38 'largest_absolute_error' 'double'
| |         |       |-CallExpr 0x561674f0a910 'int'
| |         |       | |-ImplicitCastExpr 0x561674f0a8f8 'int (*)(FILE *__restrict, const char *__restrict, ...)' <FunctionToPointerDecay>
| |         |       | | `-DeclRefExpr 0x561674f0a8d8 'int (FILE *__restrict, const char *__restrict, ...)' lvalue Function 0x561674a2fda8 'fprintf' 'int (FILE *__restrict, const char *__restrict, ...)'
| |         |       | |-ImplicitCastExpr 0x561674f0a960 'struct _IO_FILE *' <LValueToRValue>
| |         |       | | `-DeclRefExpr 0x561674f0a5d8 'struct _IO_FILE *' lvalue Var 0x561674a17050 'stderr' 'struct _IO_FILE *'
| |         |       | |-ImplicitCastExpr 0x561674f0a978 'const char *' <ArrayToPointerDecay>
| |         |       | | `-StringLiteral 0x561674f0a678 'const char[43]' lvalue "Verification of %s failed at %s:%s, el %d\n"
| |         |       | |-ImplicitCastExpr 0x561674f0a990 'const char *' <ArrayToPointerDecay>
| |         |       | | `-StringLiteral 0x561674f0a6c0 'const char[10]' lvalue "distances"
| |         |       | |-ImplicitCastExpr 0x561674f0a9a8 'const char *' <ArrayToPointerDecay>
| |         |       | | `-StringLiteral 0x561674f0a6e8 'const char[11]' lvalue "nn_cuda.cu"
| |         |       | |-ImplicitCastExpr 0x561674f0a9c0 'const char *' <ArrayToPointerDecay>
| |         |       | | `-StringLiteral 0x561674f0a710 'const char[4]' lvalue "182"
| |         |       | `-CStyleCastExpr 0x561674f0a8b0 'int' <NoOp>
| |         |       |   `-ImplicitCastExpr 0x561674f0a898 'int' <IntegralCast> part_of_explicit_cast
| |         |       |     `-ParenExpr 0x561674f0a878 'long'
| |         |       |       `-BinaryOperator 0x561674f0a820 'long' '-'
| |         |       |         |-CStyleCastExpr 0x561674f0a780 'float *' <NoOp>
| |         |       |         | `-ImplicitCastExpr 0x561674f0a768 'float *' <LValueToRValue> part_of_explicit_cast
| |         |       |         |   `-DeclRefExpr 0x561674f0a730 'float *' lvalue Var 0x561674f05d08 'el' 'float *'
| |         |       |         `-CStyleCastExpr 0x561674f0a7f8 'float *' <NoOp>
| |         |       |           `-ImplicitCastExpr 0x561674f0a7e0 'float *' <LValueToRValue> part_of_explicit_cast
| |         |       |             `-DeclRefExpr 0x561674f0a7a8 'float *' lvalue Var 0x561674f024e8 'array' 'float *'
| |         |       |-CallExpr 0x561674f0ab58 'int'
| |         |       | |-ImplicitCastExpr 0x561674f0ab40 'int (*)(FILE *__restrict, const char *__restrict, ...)' <FunctionToPointerDecay>
| |         |       | | `-DeclRefExpr 0x561674f0ab20 'int (FILE *__restrict, const char *__restrict, ...)' lvalue Function 0x561674a2fda8 'fprintf' 'int (FILE *__restrict, const char *__restrict, ...)'
| |         |       | |-ImplicitCastExpr 0x561674f0ab98 'struct _IO_FILE *' <LValueToRValue>
| |         |       | | `-DeclRefExpr 0x561674f0aa20 'struct _IO_FILE *' lvalue Var 0x561674a17050 'stderr' 'struct _IO_FILE *'
| |         |       | |-ImplicitCastExpr 0x561674f0abb0 'const char *' <ArrayToPointerDecay>
| |         |       | | `-StringLiteral 0x561674f0aa40 'const char[23]' lvalue "%.9g != %.9g expected\n"
| |         |       | |-ImplicitCastExpr 0x561674f0abe0 'double' <FloatingCast>
| |         |       | | `-ImplicitCastExpr 0x561674f0abc8 'float' <LValueToRValue>
| |         |       | |   `-UnaryOperator 0x561674f0aab8 'float' lvalue prefix '*' cannot overflow
| |         |       | |     `-ImplicitCastExpr 0x561674f0aaa0 'float *' <LValueToRValue>
| |         |       | |       `-DeclRefExpr 0x561674f0aa80 'float *' lvalue Var 0x561674f05d08 'el' 'float *'
| |         |       | `-ImplicitCastExpr 0x561674f0ac10 'double' <FloatingCast>
| |         |       |   `-ImplicitCastExpr 0x561674f0abf8 'float' <LValueToRValue>
| |         |       |     `-UnaryOperator 0x561674f0ab08 'float' lvalue prefix '*' cannot overflow
| |         |       |       `-ImplicitCastExpr 0x561674f0aaf0 'float *' <LValueToRValue>
| |         |       |         `-DeclRefExpr 0x561674f0aad0 'float *' lvalue Var 0x561674f05d88 'correct' 'float *'
| |         |       |-CallExpr 0x561674f0ad88 'int'
| |         |       | |-ImplicitCastExpr 0x561674f0ad70 'int (*)(FILE *__restrict, const char *__restrict, ...)' <FunctionToPointerDecay>
| |         |       | | `-DeclRefExpr 0x561674f0ad50 'int (FILE *__restrict, const char *__restrict, ...)' lvalue Function 0x561674a2fda8 'fprintf' 'int (FILE *__restrict, const char *__restrict, ...)'
| |         |       | |-ImplicitCastExpr 0x561674f0add0 'struct _IO_FILE *' <LValueToRValue>
| |         |       | | `-DeclRefExpr 0x561674f0ac70 'struct _IO_FILE *' lvalue Var 0x561674a17050 'stderr' 'struct _IO_FILE *'
| |         |       | |-ImplicitCastExpr 0x561674f0ade8 'const char *' <ArrayToPointerDecay>
| |         |       | | `-StringLiteral 0x561674f0ac90 'const char[71]' lvalue "relative error: %.17g, between non-zero: %.17g, absolute_error: %.17g\n"
| |         |       | |-ImplicitCastExpr 0x561674f0ae00 'double' <LValueToRValue>
| |         |       | | `-DeclRefExpr 0x561674f0acf0 'double' lvalue Var 0x561674f09290 'relative_error' 'double'
| |         |       | |-ImplicitCastExpr 0x561674f0ae18 'double' <LValueToRValue>
| |         |       | | `-DeclRefExpr 0x561674f0ad10 'double' lvalue Var 0x561674f08438 'relative_error_nonzero' 'double'
| |         |       | `-ImplicitCastExpr 0x561674f0ae30 'double' <LValueToRValue>
| |         |       |   `-DeclRefExpr 0x561674f0ad30 'double' lvalue Var 0x561674f09ef0 'absolute_error' 'double'
| |         |       |-BinaryOperator 0x561674f0ae88 'int' lvalue '='
| |         |       | |-DeclRefExpr 0x561674f0ae48 'int' lvalue Var 0x561674f05c50 'pass' 'int'
| |         |       | `-IntegerLiteral 0x561674f0ae68 'int' 0
| |         |       `-IfStmt 0x561674f0b238
| |         |         |-ImplicitCastExpr 0x561674f0aee0 '_Bool' <PointerToBoolean>
| |         |         | `-ImplicitCastExpr 0x561674f0aec8 'char *' <LValueToRValue>
| |         |         |   `-DeclRefExpr 0x561674f0aea8 'char *' lvalue Var 0x561674f02060 'halt_when_incorrect' 'char *'
| |         |         `-CompoundStmt 0x561674f0b210
| |         |           |-CallExpr 0x561674f0afc0 'int'
| |         |           | |-ImplicitCastExpr 0x561674f0afa8 'int (*)(FILE *__restrict, const char *__restrict, ...)' <FunctionToPointerDecay>
| |         |           | | `-DeclRefExpr 0x561674f0af88 'int (FILE *__restrict, const char *__restrict, ...)' lvalue Function 0x561674a2fda8 'fprintf' 'int (FILE *__restrict, const char *__restrict, ...)'
| |         |           | |-ImplicitCastExpr 0x561674f0aff0 'struct _IO_FILE *' <LValueToRValue>
| |         |           | | `-DeclRefExpr 0x561674f0af40 'struct _IO_FILE *' lvalue Var 0x561674a17050 'stderr' 'struct _IO_FILE *'
| |         |           | `-ImplicitCastExpr 0x561674f0b008 'const char *' <ArrayToPointerDecay>
| |         |           |   `-StringLiteral 0x561674f0af60 'const char[14]' lvalue "result: FAIL\n"
| |         |           |-CallExpr 0x561674f0b0e0 'int'
| |         |           | |-ImplicitCastExpr 0x561674f0b0c8 'int (*)(FILE *__restrict, const char *__restrict, ...)' <FunctionToPointerDecay>
| |         |           | | `-DeclRefExpr 0x561674f0b0a8 'int (FILE *__restrict, const char *__restrict, ...)' lvalue Function 0x561674a2fda8 'fprintf' 'int (FILE *__restrict, const char *__restrict, ...)'
| |         |           | |-ImplicitCastExpr 0x561674f0b110 'struct _IO_FILE *' <LValueToRValue>
| |         |           | | `-DeclRefExpr 0x561674f0b068 'struct _IO_FILE *' lvalue Var 0x561674a17050 'stderr' 'struct _IO_FILE *'
| |         |           | `-ImplicitCastExpr 0x561674f0b128 'const char *' <ArrayToPointerDecay>
| |         |           |   `-StringLiteral 0x561674f0b088 'const char[9]' lvalue "Halting\n"
| |         |           `-CallExpr 0x561674f0b1e8 'void'
| |         |             |-ImplicitCastExpr 0x561674f0b1d0 'void (*)(int) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
| |         |             | `-DeclRefExpr 0x561674f0b1a8 'void (int) __attribute__((noreturn)) throw()' lvalue Function 0x5616741764c0 'exit' 'void (int) __attribute__((noreturn)) throw()' (UsingShadow 0x561674215210 'exit')
| |         |             `-IntegerLiteral 0x561674f0b188 'int' 1
| |         |-DeclStmt 0x561674f0b3b0
| |         | `-VarDecl 0x561674f0b348  used pass_string 'const char *'
| |         |-IfStmt 0x561674f0b588 has_else
| |         | |-ImplicitCastExpr 0x561674f0b400 '_Bool' <IntegralToBoolean>
| |         | | `-ImplicitCastExpr 0x561674f0b3e8 'int' <LValueToRValue>
| |         | |   `-DeclRefExpr 0x561674f0b3c8 'int' lvalue Var 0x561674f05c50 'pass' 'int'
| |         | |-BinaryOperator 0x561674f0b4f0 'const char *' lvalue '='
| |         | | |-DeclRefExpr 0x561674f0b418 'const char *' lvalue Var 0x561674f0b348 'pass_string' 'const char *'
| |         | | `-ImplicitCastExpr 0x561674f0b4d8 'const char *' <ArrayToPointerDecay>
| |         | |   `-StringLiteral 0x561674f0b4b8 'const char[5]' lvalue "PASS"
| |         | `-BinaryOperator 0x561674f0b568 'const char *' lvalue '='
| |         |   |-DeclRefExpr 0x561674f0b510 'const char *' lvalue Var 0x561674f0b348 'pass_string' 'const char *'
| |         |   `-ImplicitCastExpr 0x561674f0b550 'const char *' <ArrayToPointerDecay>
| |         |     `-StringLiteral 0x561674f0b530 'const char[5]' lvalue "FAIL"
| |         |-CallExpr 0x561674f0b828 'int'
| |         | |-ImplicitCastExpr 0x561674f0b810 'int (*)(FILE *__restrict, const char *__restrict, ...)' <FunctionToPointerDecay>
| |         | | `-DeclRefExpr 0x561674f0b7f0 'int (FILE *__restrict, const char *__restrict, ...)' lvalue Function 0x561674a2fda8 'fprintf' 'int (FILE *__restrict, const char *__restrict, ...)'
| |         | |-ImplicitCastExpr 0x561674f0b880 'struct _IO_FILE *' <LValueToRValue>
| |         | | `-DeclRefExpr 0x561674f0b600 'struct _IO_FILE *' lvalue Var 0x561674a17050 'stderr' 'struct _IO_FILE *'
| |         | |-ImplicitCastExpr 0x561674f0b898 'const char *' <ArrayToPointerDecay>
| |         | | `-StringLiteral 0x561674f0b698 'const char[146]' lvalue "Verification of %s ended\nresult: %s\nlargest absolute error: %.17g\nlargest relative error: %.17g\nlargest relative error (between non-zero): %.17g\n"
| |         | |-ImplicitCastExpr 0x561674f0b8b0 'const char *' <ArrayToPointerDecay>
| |         | | `-StringLiteral 0x561674f0b748 'const char[10]' lvalue "distances"
| |         | |-ImplicitCastExpr 0x561674f0b8c8 'const char *' <LValueToRValue>
| |         | | `-DeclRefExpr 0x561674f0b770 'const char *' lvalue Var 0x561674f0b348 'pass_string' 'const char *'
| |         | |-ImplicitCastExpr 0x561674f0b8e0 'double' <LValueToRValue>
| |         | | `-DeclRefExpr 0x561674f0b790 'double' lvalue Var 0x561674f05e38 'largest_absolute_error' 'double'
| |         | |-ImplicitCastExpr 0x561674f0b8f8 'double' <LValueToRValue>
| |         | | `-DeclRefExpr 0x561674f0b7b0 'double' lvalue Var 0x561674f05ef0 'largest_relative_error' 'double'
| |         | `-ImplicitCastExpr 0x561674f0b910 'double' <LValueToRValue>
| |         |   `-DeclRefExpr 0x561674f0b7d0 'double' lvalue Var 0x561674f05fa8 'largest_relative_error_nonzero' 'double'
| |         |-CallExpr 0x561674f0ba00 'void'
| |         | |-ImplicitCastExpr 0x561674f0b9e8 'void (*)(void *) throw()' <FunctionToPointerDecay>
| |         | | `-DeclRefExpr 0x561674f0b998 'void (void *) throw()' lvalue Function 0x561674174980 'free' 'void (void *) throw()' (UsingShadow 0x561674216060 'free')
| |         | `-ImplicitCastExpr 0x561674f0ba28 'void *' <LValueToRValue>
| |         |   `-DeclRefExpr 0x561674f0b978 'void *' lvalue Var 0x561674f05888 'data' 'void *'
| |         `-CallExpr 0x561674f0bae0 'int'
| |           |-ImplicitCastExpr 0x561674f0bac8 'int (*)(FILE *)' <FunctionToPointerDecay>
| |           | `-DeclRefExpr 0x561674f0baa8 'int (FILE *)' lvalue Function 0x561674a2d830 'fclose' 'int (FILE *)'
| |           `-ImplicitCastExpr 0x561674f0bb08 'FILE *' <LValueToRValue>
| |             `-DeclRefExpr 0x561674f0ba88 'FILE *' lvalue Var 0x561674f05128 'f' 'FILE *'
| `-ImplicitCastExpr 0x561674f0bcd8 '_Bool' <IntegralToBoolean>
|   `-IntegerLiteral 0x561674f0bcb8 'int' 0
|-CallExpr 0x561674f0be70 'void'
| |-ImplicitCastExpr 0x561674f0be58 'void (*)(std::vector<Record> &, float *, int, int)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x561674f0bdd8 'void (std::vector<Record> &, float *, int, int)' lvalue Function 0x561674e7a878 'findLowest' 'void (std::vector<Record> &, float *, int, int)'
| |-DeclRefExpr 0x561674f0bd58 'std::vector<Record>':'class std::vector<struct record>' lvalue Var 0x561674e7d478 'records' 'std::vector<Record>':'class std::vector<struct record>'
| |-ImplicitCastExpr 0x561674f0beb0 'float *' <LValueToRValue>
| | `-DeclRefExpr 0x561674f0bd78 'float *' lvalue Var 0x561674edf268 'distances' 'float *'
| |-ImplicitCastExpr 0x561674f0bec8 'int' <LValueToRValue>
| | `-DeclRefExpr 0x561674f0bd98 'int' lvalue Var 0x561674edef18 'numRecords' 'int'
| `-ImplicitCastExpr 0x561674f0bee0 'int' <LValueToRValue>
|   `-DeclRefExpr 0x561674f0bdb8 'int' lvalue Var 0x561674eddf70 'resultsCount' 'int'
|-DoStmt 0x561674f0c810
| |-CompoundStmt 0x561674f0c7a0
| | |-CallExpr 0x561674f0bf80 'cudaError_t':'enum cudaError'
| | | `-ImplicitCastExpr 0x561674f0bf68 'cudaError_t (*)(void)' <FunctionToPointerDecay>
| | |   `-DeclRefExpr 0x561674f0bf48 'cudaError_t (void)' lvalue Function 0x5616743de7d0 'cudaDeviceSynchronize' 'cudaError_t (void)'
| | |-CallExpr 0x561674f0c078 'int'
| | | |-ImplicitCastExpr 0x561674f0c060 'int (*)(clockid_t, struct timespec *) throw()' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x561674f0c040 'int (clockid_t, struct timespec *) throw()' lvalue Function 0x561674a52830 'clock_gettime' 'int (clockid_t, struct timespec *) throw()'
| | | |-IntegerLiteral 0x561674f0bfe8 'int' 1
| | | `-UnaryOperator 0x561674f0c028 'struct timespec *' prefix '&' cannot overflow
| | |   `-DeclRefExpr 0x561674f0c008 'struct timespec':'struct timespec' lvalue Var 0x561674edeb98 '___my_clock_endtotal' 'struct timespec':'struct timespec'
| | |-DeclStmt 0x561674f0c3b0
| | | `-VarDecl 0x561674f0c0c8  used ___my_clock_tmptotal 'struct timespec':'struct timespec' cinit
| | |   `-InitListExpr 0x561674f0c360 'struct timespec':'struct timespec'
| | |     |-BinaryOperator 0x561674f0c200 'long' '-'
| | |     | |-ImplicitCastExpr 0x561674f0c1d0 '__time_t':'long' <LValueToRValue>
| | |     | | `-MemberExpr 0x561674f0c150 '__time_t':'long' lvalue .tv_sec 0x561674144408
| | |     | |   `-DeclRefExpr 0x561674f0c130 'struct timespec':'struct timespec' lvalue Var 0x561674edeb98 '___my_clock_endtotal' 'struct timespec':'struct timespec'
| | |     | `-ImplicitCastExpr 0x561674f0c1e8 '__time_t':'long' <LValueToRValue>
| | |     |   `-MemberExpr 0x561674f0c1a0 '__time_t':'long' lvalue .tv_sec 0x561674144408
| | |     |     `-DeclRefExpr 0x561674f0c180 'struct timespec':'struct timespec' lvalue Var 0x561674ede4d0 '___my_clock_starttotal' 'struct timespec':'struct timespec'
| | |     `-BinaryOperator 0x561674f0c2f0 'long' '-'
| | |       |-ImplicitCastExpr 0x561674f0c2c0 '__syscall_slong_t':'long' <LValueToRValue>
| | |       | `-MemberExpr 0x561674f0c240 '__syscall_slong_t':'long' lvalue .tv_nsec 0x561674144490
| | |       |   `-DeclRefExpr 0x561674f0c220 'struct timespec':'struct timespec' lvalue Var 0x561674edeb98 '___my_clock_endtotal' 'struct timespec':'struct timespec'
| | |       `-ImplicitCastExpr 0x561674f0c2d8 '__syscall_slong_t':'long' <LValueToRValue>
| | |         `-MemberExpr 0x561674f0c290 '__syscall_slong_t':'long' lvalue .tv_nsec 0x561674144490
| | |           `-DeclRefExpr 0x561674f0c270 'struct timespec':'struct timespec' lvalue Var 0x561674ede4d0 '___my_clock_starttotal' 'struct timespec':'struct timespec'
| | |-DeclStmt 0x561674f0c628
| | | `-VarDecl 0x561674f0c3e0  used ___my_clock_elapsedtotal 'double' cinit
| | |   `-ParenExpr 0x561674f0c608 'double'
| | |     `-BinaryOperator 0x561674f0c5e8 'double' '+'
| | |       |-ImplicitCastExpr 0x561674f0c5d0 'double' <IntegralToFloating>
| | |       | `-ImplicitCastExpr 0x561674f0c5b8 '__time_t':'long' <LValueToRValue>
| | |       |   `-MemberExpr 0x561674f0c468 '__time_t':'long' lvalue .tv_sec 0x561674144408
| | |       |     `-DeclRefExpr 0x561674f0c448 'struct timespec':'struct timespec' lvalue Var 0x561674f0c0c8 '___my_clock_tmptotal' 'struct timespec':'struct timespec'
| | |       `-BinaryOperator 0x561674f0c598 'double' '*'
| | |         |-ParenExpr 0x561674f0c558 'double'
| | |         | `-CStyleCastExpr 0x561674f0c530 'double' <NoOp>
| | |         |   `-ImplicitCastExpr 0x561674f0c518 'double' <IntegralToFloating> part_of_explicit_cast
| | |         |     `-ImplicitCastExpr 0x561674f0c500 '__syscall_slong_t':'long' <LValueToRValue> part_of_explicit_cast
| | |         |       `-MemberExpr 0x561674f0c4b8 '__syscall_slong_t':'long' lvalue .tv_nsec 0x561674144490
| | |         |         `-DeclRefExpr 0x561674f0c498 'struct timespec':'struct timespec' lvalue Var 0x561674f0c0c8 '___my_clock_tmptotal' 'struct timespec':'struct timespec'
| | |         `-FloatingLiteral 0x561674f0c578 'double' 1.000000e-09
| | `-CallExpr 0x561674f0c720 'void'
| |   |-ImplicitCastExpr 0x561674f0c708 'void (*)(const char *, const char *, double)' <FunctionToPointerDecay>
| |   | `-DeclRefExpr 0x561674f0c6e8 'void (const char *, const char *, double)' lvalue Function 0x561674a874a8 'MY_WRITE_TIME_TO_FILE' 'void (const char *, const char *, double)'
| |   |-ImplicitCastExpr 0x561674f0c758 'const char *' <ArrayToPointerDecay>
| |   | `-StringLiteral 0x561674f0c688 'const char[3]' lvalue "nn"
| |   |-ImplicitCastExpr 0x561674f0c770 'const char *' <ArrayToPointerDecay>
| |   | `-StringLiteral 0x561674f0c6a8 'const char[6]' lvalue "total"
| |   `-ImplicitCastExpr 0x561674f0c788 'double' <LValueToRValue>
| |     `-DeclRefExpr 0x561674f0c6c8 'double' lvalue Var 0x561674f0c3e0 '___my_clock_elapsedtotal' 'double'
| `-ImplicitCastExpr 0x561674f0c7f8 '_Bool' <IntegralToBoolean>
|   `-IntegerLiteral 0x561674f0c7d8 'int' 0
|-IfStmt 0x561674f0cdd8
| |-UnaryOperator 0x561674f0c880 '_Bool' prefix '!' cannot overflow
| | `-ImplicitCastExpr 0x561674f0c868 '_Bool' <IntegralToBoolean>
| |   `-ImplicitCastExpr 0x561674f0c850 'int' <LValueToRValue>
| |     `-DeclRefExpr 0x561674f0c830 'int' lvalue Var 0x561674e7d030 'quiet' 'int'
| `-ForStmt 0x561674f0cda0
|   |-BinaryOperator 0x561674f0c8d8 'int' lvalue '='
|   | |-DeclRefExpr 0x561674f0c898 'int' lvalue Var 0x561674e7ce48 'i' 'int'
|   | `-IntegerLiteral 0x561674f0c8b8 'int' 0
|   |-<<<NULL>>>
|   |-BinaryOperator 0x561674f0c968 '_Bool' '<'
|   | |-ImplicitCastExpr 0x561674f0c938 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x561674f0c8f8 'int' lvalue Var 0x561674e7ce48 'i' 'int'
|   | `-ImplicitCastExpr 0x561674f0c950 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x561674f0c918 'int' lvalue Var 0x561674eddf70 'resultsCount' 'int'
|   |-UnaryOperator 0x561674f0c9a8 'int' postfix '++'
|   | `-DeclRefExpr 0x561674f0c988 'int' lvalue Var 0x561674e7ce48 'i' 'int'
|   `-CompoundStmt 0x561674f0cd88
|     `-CallExpr 0x561674f0ccf0 'int'
|       |-ImplicitCastExpr 0x561674f0ccd8 'int (*)(const char *__restrict, ...)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x561674f0ccb8 'int (const char *__restrict, ...)' lvalue Function 0x561674a30018 'printf' 'int (const char *__restrict, ...)'
|       |-ImplicitCastExpr 0x561674f0cd28 'const char *' <ArrayToPointerDecay>
|       | `-StringLiteral 0x561674f0ca10 'const char[20]' lvalue "%s --> Distance=%f\n"
|       |-ImplicitCastExpr 0x561674f0cd40 'char *' <ArrayToPointerDecay>
|       | `-MemberExpr 0x561674f0cb78 'char[53]' lvalue .recString 0x561674e79678
|       |   `-CXXOperatorCallExpr 0x561674f0cb40 '__gnu_cxx::__alloc_traits<class std::allocator<struct record> >::value_type':'struct record' lvalue '[]'
|       |     |-ImplicitCastExpr 0x561674f0cb28 'std::vector<struct record>::reference (*)(std::vector::size_type) noexcept' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x561674f0cab0 'std::vector<struct record>::reference (std::vector::size_type) noexcept' lvalue CXXMethod 0x561674e9b410 'operator[]' 'std::vector<struct record>::reference (std::vector::size_type) noexcept'
|       |     |-DeclRefExpr 0x561674f0ca40 'std::vector<Record>':'class std::vector<struct record>' lvalue Var 0x561674e7d478 'records' 'std::vector<Record>':'class std::vector<struct record>'
|       |     `-ImplicitCastExpr 0x561674f0ca98 'std::vector::size_type':'unsigned long' <IntegralCast>
|       |       `-ImplicitCastExpr 0x561674f0ca80 'int' <LValueToRValue>
|       |         `-DeclRefExpr 0x561674f0ca60 'int' lvalue Var 0x561674e7ce48 'i' 'int'
|       `-ImplicitCastExpr 0x561674f0cd70 'double' <FloatingCast>
|         `-ImplicitCastExpr 0x561674f0cd58 'float' <LValueToRValue>
|           `-MemberExpr 0x561674f0cc88 'float' lvalue .distance 0x561674e796e0
|             `-CXXOperatorCallExpr 0x561674f0cc50 '__gnu_cxx::__alloc_traits<class std::allocator<struct record> >::value_type':'struct record' lvalue '[]'
|               |-ImplicitCastExpr 0x561674f0cc38 'std::vector<struct record>::reference (*)(std::vector::size_type) noexcept' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x561674f0cc18 'std::vector<struct record>::reference (std::vector::size_type) noexcept' lvalue CXXMethod 0x561674e9b410 'operator[]' 'std::vector<struct record>::reference (std::vector::size_type) noexcept'
|               |-DeclRefExpr 0x561674f0cba8 'std::vector<Record>':'class std::vector<struct record>' lvalue Var 0x561674e7d478 'records' 'std::vector<Record>':'class std::vector<struct record>'
|               `-ImplicitCastExpr 0x561674f0cc00 'std::vector::size_type':'unsigned long' <IntegralCast>
|                 `-ImplicitCastExpr 0x561674f0cbe8 'int' <LValueToRValue>
|                   `-DeclRefExpr 0x561674f0cbc8 'int' lvalue Var 0x561674e7ce48 'i' 'int'
|-CallExpr 0x561674f0cea8 'void'
| |-ImplicitCastExpr 0x561674f0ce90 'void (*)(void *) throw()' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x561674f0ce68 'void (void *) throw()' lvalue Function 0x561674174980 'free' 'void (void *) throw()' (UsingShadow 0x561674216060 'free')
| `-ImplicitCastExpr 0x561674f0cee8 'void *' <BitCast>
|   `-ImplicitCastExpr 0x561674f0ced0 'float *' <LValueToRValue>
|     `-DeclRefExpr 0x561674f0ce48 'float *' lvalue Var 0x561674edf268 'distances' 'float *'
|-CallExpr 0x561674f0d000 'cudaError_t':'enum cudaError'
| |-ImplicitCastExpr 0x561674f0cfe8 'cudaError_t (*)(void *)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x561674f0cf70 'cudaError_t (void *)' lvalue Function 0x561674401600 'cudaFree' 'cudaError_t (void *)'
| `-ImplicitCastExpr 0x561674f0d040 'void *' <BitCast>
|   `-ImplicitCastExpr 0x561674f0d028 'LatLong *' <LValueToRValue>
|     `-DeclRefExpr 0x561674f0cf50 'LatLong *' lvalue Var 0x561674edf2f8 'd_locations' 'LatLong *'
`-CallExpr 0x561674f0d100 'cudaError_t':'enum cudaError'
  |-ImplicitCastExpr 0x561674f0d0e8 'cudaError_t (*)(void *)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x561674f0d0c8 'cudaError_t (void *)' lvalue Function 0x561674401600 'cudaFree' 'cudaError_t (void *)'
  `-ImplicitCastExpr 0x561674f0d140 'void *' <BitCast>
    `-ImplicitCastExpr 0x561674f0d128 'float *' <LValueToRValue>
      `-DeclRefExpr 0x561674f0d0a8 'float *' lvalue Var 0x561674edf390 'd_distances' 'float *'
CUDAKernelCallExpr 0x561674f00e00 'void'
|-ImplicitCastExpr 0x561674f00de8 'void (*)(LatLong *, float *, int, float, float)' <FunctionToPointerDecay>
| `-DeclRefExpr 0x561674ee3bc8 'void (LatLong *, float *, int, float, float)' lvalue Function 0x561674e7b5b8 'euclid' 'void (LatLong *, float *, int, float, float)'
|-CallExpr 0x561674f00b10 'unsigned int'
| |-ImplicitCastExpr 0x561674f00af8 'unsigned int (*)(dim3, dim3, size_t, void *)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x561674ee3c28 'unsigned int (dim3, dim3, size_t, void *)' lvalue Function 0x561674a10870 '__cudaPushCallConfiguration' 'unsigned int (dim3, dim3, size_t, void *)'
| |-CXXConstructExpr 0x561674f00b68 'dim3':'struct dim3' 'void (const struct dim3 &) noexcept'
| | `-ImplicitCastExpr 0x561674f00b50 'const struct dim3' lvalue <NoOp>
| |   `-DeclRefExpr 0x561674ee3be8 'dim3':'struct dim3' lvalue Var 0x561674ee1b80 'gridDim' 'dim3':'struct dim3'
| |-CXXConstructExpr 0x561674f00c78 'dim3':'struct dim3' 'void (struct dim3 &&) noexcept' elidable
| | `-MaterializeTemporaryExpr 0x561674f00c60 'dim3':'struct dim3' xvalue
| |   `-ImplicitCastExpr 0x561674f00c48 'dim3':'struct dim3' <ConstructorConversion>
| |     `-CXXConstructExpr 0x561674f00c08 'dim3':'struct dim3' 'void (unsigned int, unsigned int, unsigned int)'
| |       |-ImplicitCastExpr 0x561674f00bb0 'unsigned int' <IntegralCast>
| |       | `-ImplicitCastExpr 0x561674f00b98 'unsigned long' <LValueToRValue>
| |       |   `-DeclRefExpr 0x561674ee3c08 'unsigned long' lvalue Var 0x561674ee0a88 'threadsPerBlock' 'unsigned long'
| |       |-CXXDefaultArgExpr 0x561674f00bc8 'unsigned int'
| |       `-CXXDefaultArgExpr 0x561674f00be8 'unsigned int'
| |-CXXDefaultArgExpr 0x561674f00ca8 'size_t':'unsigned long'
| `-CXXDefaultArgExpr 0x561674f00cc8 'void *'
|-ImplicitCastExpr 0x561674f00e50 'LatLong *' <LValueToRValue>
| `-DeclRefExpr 0x561674f00ce8 'LatLong *' lvalue Var 0x561674edf2f8 'd_locations' 'LatLong *'
|-ImplicitCastExpr 0x561674f00e68 'float *' <LValueToRValue>
| `-DeclRefExpr 0x561674f00d08 'float *' lvalue Var 0x561674edf390 'd_distances' 'float *'
|-ImplicitCastExpr 0x561674f00e80 'int' <LValueToRValue>
| `-DeclRefExpr 0x561674f00d28 'int' lvalue Var 0x561674edef18 'numRecords' 'int'
|-ImplicitCastExpr 0x561674f00e98 'float' <LValueToRValue>
| `-DeclRefExpr 0x561674f00d48 'float' lvalue Var 0x561674e7cf00 'lat' 'float'
`-ImplicitCastExpr 0x561674f00eb0 'float' <LValueToRValue>
  `-DeclRefExpr 0x561674f00d68 'float' lvalue Var 0x561674e7cf80 'lng' 'float'
cleanup not handled
VarDecl 0x561674f01b20 </mnt/Data/git/Polygeist/proj/rodinia/common/my_verification.h:70:5, col:23> col:16 used done 'int' static cinit
`-IntegerLiteral 0x561674f01b88 <col:23> 'int' 0
IntegerLiteral 0x561674f01b88 'int' 0
 warning not initializing global: main@static@_ZZ4mainE4done - %c0_i32 = arith.constant 0 : i32
warning: one-time initialization of static variable, not implemented yet
Emitting fn: _ZN4dim3C1Ejjj
dim3
FieldDecl 0x56167416e038 </usr/local/cuda-11.2//include/vector_types.h:418:5, col:18> col:18 referenced x 'unsigned int'
ImplicitCastExpr 0x56167416ea98 'unsigned int' <LValueToRValue>
`-DeclRefExpr 0x56167416ea58 'unsigned int' lvalue ParmVar 0x56167416e190 'vx' 'unsigned int'
FieldDecl 0x56167416e0a0 </usr/local/cuda-11.2//include/vector_types.h:418:5, col:21> col:21 referenced y 'unsigned int'
ImplicitCastExpr 0x56167416eb10 'unsigned int' <LValueToRValue>
`-DeclRefExpr 0x56167416ead0 'unsigned int' lvalue ParmVar 0x56167416e210 'vy' 'unsigned int'
FieldDecl 0x56167416e108 </usr/local/cuda-11.2//include/vector_types.h:418:5, col:24> col:24 referenced z 'unsigned int'
ImplicitCastExpr 0x56167416eb88 'unsigned int' <LValueToRValue>
`-DeclRefExpr 0x56167416eb48 'unsigned int' lvalue ParmVar 0x56167416e290 'vz' 'unsigned int'
CompoundStmt 0x56167416ebd8
Emitting fn: _ZN4dim3C1ERKS_
dim3
FieldDecl 0x56167416e038 </usr/local/cuda-11.2//include/vector_types.h:418:5, col:18> col:18 referenced x 'unsigned int'
ImplicitCastExpr 0x5616744ac8f0 'unsigned int' <LValueToRValue>
`-MemberExpr 0x5616744ac8c0 'const unsigned int' lvalue .x 0x56167416e038
  `-DeclRefExpr 0x5616744ac8a0 'const struct dim3' lvalue ParmVar 0x5616744aa1c8 '' 'const struct dim3 &'
FieldDecl 0x56167416e0a0 </usr/local/cuda-11.2//include/vector_types.h:418:5, col:21> col:21 referenced y 'unsigned int'
ImplicitCastExpr 0x5616744ac978 'unsigned int' <LValueToRValue>
`-MemberExpr 0x5616744ac948 'const unsigned int' lvalue .y 0x56167416e0a0
  `-DeclRefExpr 0x5616744ac928 'const struct dim3' lvalue ParmVar 0x5616744aa1c8 '' 'const struct dim3 &'
FieldDecl 0x56167416e108 </usr/local/cuda-11.2//include/vector_types.h:418:5, col:24> col:24 referenced z 'unsigned int'
ImplicitCastExpr 0x5616744aca00 'unsigned int' <LValueToRValue>
`-MemberExpr 0x5616744ac9d0 'const unsigned int' lvalue .z 0x56167416e108
  `-DeclRefExpr 0x5616744ac9b0 'const struct dim3' lvalue ParmVar 0x5616744aa1c8 '' 'const struct dim3 &'
CompoundStmt 0x5616744aca50
Emitting fn: _ZN4dim3C1EOS_
dim3
FieldDecl 0x56167416e038 </usr/local/cuda-11.2//include/vector_types.h:418:5, col:18> col:18 referenced x 'unsigned int'
ImplicitCastExpr 0x561674896e70 'unsigned int' <LValueToRValue>
`-MemberExpr 0x561674896e40 'unsigned int' xvalue .x 0x56167416e038
  `-CXXStaticCastExpr 0x561674896e10 'struct dim3' xvalue static_cast<struct dim3 &&> <NoOp>
    `-DeclRefExpr 0x561674896de0 'struct dim3' lvalue ParmVar 0x5616744aa408 '' 'struct dim3 &&'
FieldDecl 0x56167416e0a0 </usr/local/cuda-11.2//include/vector_types.h:418:5, col:21> col:21 referenced y 'unsigned int'
ImplicitCastExpr 0x561674896f38 'unsigned int' <LValueToRValue>
`-MemberExpr 0x561674896f08 'unsigned int' xvalue .y 0x56167416e0a0
  `-CXXStaticCastExpr 0x561674896ed8 'struct dim3' xvalue static_cast<struct dim3 &&> <NoOp>
    `-DeclRefExpr 0x561674896ea8 'struct dim3' lvalue ParmVar 0x5616744aa408 '' 'struct dim3 &&'
FieldDecl 0x56167416e108 </usr/local/cuda-11.2//include/vector_types.h:418:5, col:24> col:24 referenced z 'unsigned int'
ImplicitCastExpr 0x561674897000 'unsigned int' <LValueToRValue>
`-MemberExpr 0x561674896fd0 'unsigned int' xvalue .z 0x56167416e108
  `-CXXStaticCastExpr 0x561674896fa0 'struct dim3' xvalue static_cast<struct dim3 &&> <NoOp>
    `-DeclRefExpr 0x561674896f70 'struct dim3' lvalue ParmVar 0x5616744aa408 '' 'struct dim3 &&'
CompoundStmt 0x561674897050
Emitting fn: _ZL21MY_WRITE_TIME_TO_FILEPKcS0_d
MY_WRITE_TIME_TO_FILE
CompoundStmt 0x561674a892f0
|-DeclStmt 0x561674a87730
| `-VarDecl 0x561674a87578  used output 'char *' cinit
|   `-CallExpr 0x561674a876f0 'char *'
|     |-ImplicitCastExpr 0x561674a876d8 'char *(*)(const char *) throw()' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x561674a87650 'char *(const char *) throw()' lvalue Function 0x561674176a08 'getenv' 'char *(const char *) throw()' (UsingShadow 0x561674216130 'getenv')
|     `-ImplicitCastExpr 0x561674a87718 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x561674a87628 'const char[15]' lvalue "MY_TIMING_FILE"
|-DeclStmt 0x561674a877c0
| `-VarDecl 0x561674a87758  used f 'FILE *'
|-IfStmt 0x561674a87e28 has_else
| |-BinaryOperator 0x561674a87bc0 '_Bool' '||'
| | |-BinaryOperator 0x561674a87a28 '_Bool' '||'
| | | |-BinaryOperator 0x561674a87840 '_Bool' '=='
| | | | |-ImplicitCastExpr 0x561674a87810 'char *' <LValueToRValue>
| | | | | `-DeclRefExpr 0x561674a877d8 'char *' lvalue Var 0x561674a87578 'output' 'char *'
| | | | `-ImplicitCastExpr 0x561674a87828 'char *' <NullToPointer>
| | | |   `-GNUNullExpr 0x561674a877f8 'long'
| | | `-BinaryOperator 0x561674a87a08 '_Bool' '=='
| | |   |-CallExpr 0x561674a87970 'int'
| | |   | |-ImplicitCastExpr 0x561674a87958 'int (*)(const char *, const char *) throw()' <FunctionToPointerDecay>
| | |   | | `-DeclRefExpr 0x561674a878e0 'int (const char *, const char *) throw()' lvalue Function 0x561674219c68 'strcmp' 'int (const char *, const char *) throw()'
| | |   | |-ImplicitCastExpr 0x561674a879b8 'const char *' <NoOp>
| | |   | | `-ImplicitCastExpr 0x561674a879a0 'char *' <LValueToRValue>
| | |   | |   `-DeclRefExpr 0x561674a878a8 'char *' lvalue Var 0x561674a87578 'output' 'char *'
| | |   | `-ImplicitCastExpr 0x561674a879d0 'const char *' <ArrayToPointerDecay>
| | |   |   `-StringLiteral 0x561674a878c8 'const char[1]' lvalue ""
| | |   `-IntegerLiteral 0x561674a879e8 'int' 0
| | `-BinaryOperator 0x561674a87ba0 '_Bool' '=='
| |   |-CallExpr 0x561674a87b08 'int'
| |   | |-ImplicitCastExpr 0x561674a87af0 'int (*)(const char *, const char *) throw()' <FunctionToPointerDecay>
| |   | | `-DeclRefExpr 0x561674a87ad0 'int (const char *, const char *) throw()' lvalue Function 0x561674219c68 'strcmp' 'int (const char *, const char *) throw()'
| |   | |-ImplicitCastExpr 0x561674a87b50 'const char *' <NoOp>
| |   | | `-ImplicitCastExpr 0x561674a87b38 'char *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x561674a87a90 'char *' lvalue Var 0x561674a87578 'output' 'char *'
| |   | `-ImplicitCastExpr 0x561674a87b68 'const char *' <ArrayToPointerDecay>
| |   |   `-StringLiteral 0x561674a87ab0 'const char[2]' lvalue "-"
| |   `-IntegerLiteral 0x561674a87b80 'int' 0
| |-BinaryOperator 0x561674a87c38 'FILE *' lvalue '='
| | |-DeclRefExpr 0x561674a87be0 'FILE *' lvalue Var 0x561674a87758 'f' 'FILE *'
| | `-ImplicitCastExpr 0x561674a87c20 'struct _IO_FILE *' <LValueToRValue>
| |   `-DeclRefExpr 0x561674a87c00 'struct _IO_FILE *' lvalue Var 0x561674a16fc0 'stdout' 'struct _IO_FILE *'
| `-BinaryOperator 0x561674a87e08 'FILE *' lvalue '='
|   |-DeclRefExpr 0x561674a87c58 'FILE *' lvalue Var 0x561674a87758 'f' 'FILE *'
|   `-CallExpr 0x561674a87d90 'FILE *'
|     |-ImplicitCastExpr 0x561674a87d78 'FILE *(*)(const char *__restrict, const char *__restrict)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x561674a87d00 'FILE *(const char *__restrict, const char *__restrict)' lvalue Function 0x561674a2de68 'fopen' 'FILE *(const char *__restrict, const char *__restrict)'
|     |-ImplicitCastExpr 0x561674a87dd8 'const char *' <NoOp>
|     | `-ImplicitCastExpr 0x561674a87dc0 'char *' <LValueToRValue>
|     |   `-DeclRefExpr 0x561674a87cc0 'char *' lvalue Var 0x561674a87578 'output' 'char *'
|     `-ImplicitCastExpr 0x561674a87df0 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x561674a87ce0 'const char[2]' lvalue "a"
|-IfStmt 0x561674a88778
| |-UnaryOperator 0x561674a87ea8 '_Bool' prefix '!' cannot overflow
| | `-ImplicitCastExpr 0x561674a87e90 '_Bool' <PointerToBoolean>
| |   `-ImplicitCastExpr 0x561674a87e78 'FILE *' <LValueToRValue>
| |     `-DeclRefExpr 0x561674a87e58 'FILE *' lvalue Var 0x561674a87758 'f' 'FILE *'
| `-CompoundStmt 0x561674a88758
|   |-CallExpr 0x561674a883d0 'int'
|   | |-ImplicitCastExpr 0x561674a883b8 'int (*)(FILE *__restrict, const char *__restrict, ...)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x561674a88340 'int (FILE *__restrict, const char *__restrict, ...)' lvalue Function 0x561674a2fda8 'fprintf' 'int (FILE *__restrict, const char *__restrict, ...)'
|   | |-ImplicitCastExpr 0x561674a88418 'struct _IO_FILE *' <LValueToRValue>
|   | | `-DeclRefExpr 0x561674a87f08 'struct _IO_FILE *' lvalue Var 0x561674a17050 'stderr' 'struct _IO_FILE *'
|   | |-ImplicitCastExpr 0x561674a88430 'const char *' <ArrayToPointerDecay>
|   | | `-StringLiteral 0x561674a87fa8 'const char[45]' lvalue "Could not open timing file %s, errno %d, %s\n"
|   | |-ImplicitCastExpr 0x561674a88448 'char *' <LValueToRValue>
|   | | `-DeclRefExpr 0x561674a87ff0 'char *' lvalue Var 0x561674a87578 'output' 'char *'
|   | |-ImplicitCastExpr 0x561674a88460 'int' <LValueToRValue>
|   | | `-ParenExpr 0x561674a88128 'int' lvalue
|   | |   `-UnaryOperator 0x561674a88110 'int' lvalue prefix '*' cannot overflow
|   | |     `-CallExpr 0x561674a880f0 'int *'
|   | |       `-ImplicitCastExpr 0x561674a880d8 'int *(*)(void) throw()' <FunctionToPointerDecay>
|   | |         `-DeclRefExpr 0x561674a88058 'int *(void) throw()' lvalue Function 0x561674a87048 '__errno_location' 'int *(void) throw()'
|   | `-CallExpr 0x561674a88300 'char *'
|   |   |-ImplicitCastExpr 0x561674a882e8 'char *(*)(int) throw()' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x561674a88268 'char *(int) throw()' lvalue Function 0x56167421e8e0 'strerror' 'char *(int) throw()'
|   |   `-ImplicitCastExpr 0x561674a88328 'int' <LValueToRValue>
|   |     `-ParenExpr 0x561674a88248 'int' lvalue
|   |       `-UnaryOperator 0x561674a88230 'int' lvalue prefix '*' cannot overflow
|   |         `-CallExpr 0x561674a88210 'int *'
|   |           `-ImplicitCastExpr 0x561674a881f8 'int *(*)(void) throw()' <FunctionToPointerDecay>
|   |             `-DeclRefExpr 0x561674a881d8 'int *(void) throw()' lvalue Function 0x561674a87048 '__errno_location' 'int *(void) throw()'
|   `-CallExpr 0x561674a88730 'void'
|     |-ImplicitCastExpr 0x561674a88718 'void (*)(int) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x561674a88698 'void (int) __attribute__((noreturn)) throw()' lvalue Function 0x5616741764c0 'exit' 'void (int) __attribute__((noreturn)) throw()' (UsingShadow 0x561674215210 'exit')
|     `-IntegerLiteral 0x561674a88678 'int' 1
|-DeclStmt 0x561674a88878
| `-VarDecl 0x561674a887f8  used empty 'char[1]' cinit
|   `-StringLiteral 0x561674a88860 'char[1]' ""
|-DeclStmt 0x561674a889f8
| `-VarDecl 0x561674a888a8  used hostname 'char *' cinit
|   `-CallExpr 0x561674a889b8 'char *'
|     |-ImplicitCastExpr 0x561674a889a0 'char *(*)(const char *) throw()' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x561674a88978 'char *(const char *) throw()' lvalue Function 0x561674176a08 'getenv' 'char *(const char *) throw()' (UsingShadow 0x561674216130 'getenv')
|     `-ImplicitCastExpr 0x561674a889e0 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x561674a88958 'const char[9]' lvalue "HOSTNAME"
|-IfStmt 0x561674a88af0
| |-UnaryOperator 0x561674a88a60 '_Bool' prefix '!' cannot overflow
| | `-ImplicitCastExpr 0x561674a88a48 '_Bool' <PointerToBoolean>
| |   `-ImplicitCastExpr 0x561674a88a30 'char *' <LValueToRValue>
| |     `-DeclRefExpr 0x561674a88a10 'char *' lvalue Var 0x561674a888a8 'hostname' 'char *'
| `-BinaryOperator 0x561674a88ad0 'char *' lvalue '='
|   |-DeclRefExpr 0x561674a88a78 'char *' lvalue Var 0x561674a888a8 'hostname' 'char *'
|   `-ImplicitCastExpr 0x561674a88ab8 'char *' <ArrayToPointerDecay>
|     `-DeclRefExpr 0x561674a88a98 'char[1]' lvalue Var 0x561674a887f8 'empty' 'char[1]'
|-DeclStmt 0x561674a88c30
| `-VarDecl 0x561674a88b28  used omp_threads 'int' cinit
|   `-CallExpr 0x561674a88c10 'int'
|     `-ImplicitCastExpr 0x561674a88bf8 'int (*)(void)' <FunctionToPointerDecay>
|       `-DeclRefExpr 0x561674a88bd8 'int (void)' lvalue Function 0x561674a558c8 'omp_get_max_threads' 'int (void)'
|-DeclStmt 0x561674a88d88
| `-VarDecl 0x561674a88c60  used compilername 'const char *' cinit
|   `-ImplicitCastExpr 0x561674a88d70 'const char *' <ArrayToPointerDecay>
|     `-StringLiteral 0x561674a88d48 'const char[10]' lvalue "polygeist"
|-CallExpr 0x561674a88f38 'int'
| |-ImplicitCastExpr 0x561674a88f20 'int (*)(FILE *__restrict, const char *__restrict, ...)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x561674a88f00 'int (FILE *__restrict, const char *__restrict, ...)' lvalue Function 0x561674a2fda8 'fprintf' 'int (FILE *__restrict, const char *__restrict, ...)'
| |-ImplicitCastExpr 0x561674a88f98 'FILE *' <LValueToRValue>
| | `-DeclRefExpr 0x561674a88de8 'FILE *' lvalue Var 0x561674a87758 'f' 'FILE *'
| |-ImplicitCastExpr 0x561674a88fb0 'const char *' <ArrayToPointerDecay>
| | `-StringLiteral 0x561674a88e08 'const char[28]' lvalue "%s, %s, %.17g, %s, %s, %d,\n"
| |-ImplicitCastExpr 0x561674a88fc8 'const char *' <LValueToRValue>
| | `-DeclRefExpr 0x561674a88e40 'const char *' lvalue ParmVar 0x561674a872c8 'app_id' 'const char *'
| |-ImplicitCastExpr 0x561674a88fe0 'const char *' <LValueToRValue>
| | `-DeclRefExpr 0x561674a88e60 'const char *' lvalue ParmVar 0x561674a87348 'clock_id' 'const char *'
| |-ImplicitCastExpr 0x561674a88ff8 'double' <LValueToRValue>
| | `-DeclRefExpr 0x561674a88e80 'double' lvalue ParmVar 0x561674a873c8 'elapsed' 'double'
| |-ImplicitCastExpr 0x561674a89010 'char *' <LValueToRValue>
| | `-DeclRefExpr 0x561674a88ea0 'char *' lvalue Var 0x561674a888a8 'hostname' 'char *'
| |-ImplicitCastExpr 0x561674a89028 'const char *' <LValueToRValue>
| | `-DeclRefExpr 0x561674a88ec0 'const char *' lvalue Var 0x561674a88c60 'compilername' 'const char *'
| `-ImplicitCastExpr 0x561674a89040 'int' <LValueToRValue>
|   `-DeclRefExpr 0x561674a88ee0 'int' lvalue Var 0x561674a88b28 'omp_threads' 'int'
`-IfStmt 0x561674a892d0
  |-BinaryOperator 0x561674a89178 '_Bool' '&&'
  | |-BinaryOperator 0x561674a890c8 '_Bool' '!='
  | | |-ImplicitCastExpr 0x561674a89098 'FILE *' <LValueToRValue>
  | | | `-DeclRefExpr 0x561674a89058 'FILE *' lvalue Var 0x561674a87758 'f' 'FILE *'
  | | `-ImplicitCastExpr 0x561674a890b0 'struct _IO_FILE *' <LValueToRValue>
  | |   `-DeclRefExpr 0x561674a89078 'struct _IO_FILE *' lvalue Var 0x561674a16fc0 'stdout' 'struct _IO_FILE *'
  | `-BinaryOperator 0x561674a89158 '_Bool' '!='
  |   |-ImplicitCastExpr 0x561674a89128 'FILE *' <LValueToRValue>
  |   | `-DeclRefExpr 0x561674a890e8 'FILE *' lvalue Var 0x561674a87758 'f' 'FILE *'
  |   `-ImplicitCastExpr 0x561674a89140 'struct _IO_FILE *' <LValueToRValue>
  |     `-DeclRefExpr 0x561674a89108 'struct _IO_FILE *' lvalue Var 0x561674a17050 'stderr' 'struct _IO_FILE *'
  `-CallExpr 0x561674a89290 'int'
    |-ImplicitCastExpr 0x561674a89278 'int (*)(FILE *)' <FunctionToPointerDecay>
    | `-DeclRefExpr 0x561674a89200 'int (FILE *)' lvalue Function 0x561674a2d830 'fclose' 'int (FILE *)'
    `-ImplicitCastExpr 0x561674a892b8 'FILE *' <LValueToRValue>
      `-DeclRefExpr 0x561674a891e0 'FILE *' lvalue Var 0x561674a87758 'f' 'FILE *'
Emitting fn: _Z8loadDataPcRSt6vectorI6recordSaIS1_EERS0_I7latLongSaIS5_EE
loadData
CompoundStmt 0x561674fe2358
|-DeclStmt 0x561674f0e0e0
| |-VarDecl 0x561674f0dfe8  used flist 'FILE *'
| `-VarDecl 0x561674f0e060  used fp 'FILE *'
|-DeclStmt 0x561674f0e198
| `-VarDecl 0x561674f0e110  used i 'int' cinit
|   `-IntegerLiteral 0x561674f0e178 'int' 0
|-DeclStmt 0x561674f0e278
| `-VarDecl 0x561674f0e210  used dbname 'char[64]'
|-DeclStmt 0x561674f0e358
| `-VarDecl 0x561674f0e2a8  used recNum 'int' cinit
|   `-IntegerLiteral 0x561674f0e310 'int' 0
|-BinaryOperator 0x561674f0e4c8 'FILE *' lvalue '='
| |-DeclRefExpr 0x561674f0e370 'FILE *' lvalue Var 0x561674f0dfe8 'flist' 'FILE *'
| `-CallExpr 0x561674f0e450 'FILE *'
|   |-ImplicitCastExpr 0x561674f0e438 'FILE *(*)(const char *__restrict, const char *__restrict)' <FunctionToPointerDecay>
|   | `-DeclRefExpr 0x561674f0e418 'FILE *(const char *__restrict, const char *__restrict)' lvalue Function 0x561674a2de68 'fopen' 'FILE *(const char *__restrict, const char *__restrict)'
|   |-ImplicitCastExpr 0x561674f0e498 'const char *' <NoOp>
|   | `-ImplicitCastExpr 0x561674f0e480 'char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x561674f0e3d8 'char *' lvalue ParmVar 0x561674f0d9b0 'filename' 'char *'
|   `-ImplicitCastExpr 0x561674f0e4b0 'const char *' <ArrayToPointerDecay>
|     `-StringLiteral 0x561674f0e3f8 'const char[2]' lvalue "r"
|-WhileStmt 0x561674fe2210
| |-UnaryOperator 0x561674f0e608 '_Bool' prefix '!' cannot overflow
| | `-ImplicitCastExpr 0x561674f0e5f0 '_Bool' <IntegralToBoolean>
| |   `-CallExpr 0x561674f0e5b0 'int'
| |     |-ImplicitCastExpr 0x561674f0e598 'int (*)(FILE *) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x561674f0e550 'int (FILE *) throw()' lvalue Function 0x561674a3b568 'feof' 'int (FILE *) throw()'
| |     `-ImplicitCastExpr 0x561674f0e5d8 'FILE *' <LValueToRValue>
| |       `-DeclRefExpr 0x561674f0e530 'FILE *' lvalue Var 0x561674f0dfe8 'flist' 'FILE *'
| `-CompoundStmt 0x561674fe21d8
|   |-IfStmt 0x561674f0ea08
|   | |-BinaryOperator 0x561674f0e7c8 '_Bool' '!='
|   | | |-CallExpr 0x561674f0e728 'int'
|   | | | |-ImplicitCastExpr 0x561674f0e710 'int (*)(FILE *__restrict, const char *__restrict, ...)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x561674f0e6f0 'int (FILE *__restrict, const char *__restrict, ...)' lvalue Function 0x561674a32830 'fscanf' 'int (FILE *__restrict, const char *__restrict, ...)'
|   | | | |-ImplicitCastExpr 0x561674f0e760 'FILE *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x561674f0e690 'FILE *' lvalue Var 0x561674f0dfe8 'flist' 'FILE *'
|   | | | |-ImplicitCastExpr 0x561674f0e778 'const char *' <ArrayToPointerDecay>
|   | | | | `-StringLiteral 0x561674f0e6b0 'const char[4]' lvalue "%s\n"
|   | | | `-ImplicitCastExpr 0x561674f0e790 'char *' <ArrayToPointerDecay>
|   | | |   `-DeclRefExpr 0x561674f0e6d0 'char[64]' lvalue Var 0x561674f0e210 'dbname' 'char[64]'
|   | | `-IntegerLiteral 0x561674f0e7a8 'int' 1
|   | `-CompoundStmt 0x561674f0e9e8
|   |   |-CallExpr 0x561674f0e8b8 'int'
|   |   | |-ImplicitCastExpr 0x561674f0e8a0 'int (*)(FILE *__restrict, const char *__restrict, ...)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x561674f0e880 'int (FILE *__restrict, const char *__restrict, ...)' lvalue Function 0x561674a2fda8 'fprintf' 'int (FILE *__restrict, const char *__restrict, ...)'
|   |   | |-ImplicitCastExpr 0x561674f0e8e8 'struct _IO_FILE *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x561674f0e830 'struct _IO_FILE *' lvalue Var 0x561674a17050 'stderr' 'struct _IO_FILE *'
|   |   | `-ImplicitCastExpr 0x561674f0e900 'const char *' <ArrayToPointerDecay>
|   |   |   `-StringLiteral 0x561674f0e850 'const char[24]' lvalue "error reading filelist\n"
|   |   `-CallExpr 0x561674f0e9c0 'void'
|   |     |-ImplicitCastExpr 0x561674f0e9a8 'void (*)(int) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x561674f0e980 'void (int) __attribute__((noreturn)) throw()' lvalue Function 0x5616741764c0 'exit' 'void (int) __attribute__((noreturn)) throw()' (UsingShadow 0x561674215210 'exit')
|   |     `-IntegerLiteral 0x561674f0e960 'int' 0
|   |-BinaryOperator 0x561674f0eb80 'FILE *' lvalue '='
|   | |-DeclRefExpr 0x561674f0ea28 'FILE *' lvalue Var 0x561674f0e060 'fp' 'FILE *'
|   | `-CallExpr 0x561674f0eb08 'FILE *'
|   |   |-ImplicitCastExpr 0x561674f0eaf0 'FILE *(*)(const char *__restrict, const char *__restrict)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x561674f0ead0 'FILE *(const char *__restrict, const char *__restrict)' lvalue Function 0x561674a2de68 'fopen' 'FILE *(const char *__restrict, const char *__restrict)'
|   |   |-ImplicitCastExpr 0x561674f0eb50 'const char *' <NoOp>
|   |   | `-ImplicitCastExpr 0x561674f0eb38 'char *' <ArrayToPointerDecay>
|   |   |   `-DeclRefExpr 0x561674f0ea90 'char[64]' lvalue Var 0x561674f0e210 'dbname' 'char[64]'
|   |   `-ImplicitCastExpr 0x561674f0eb68 'const char *' <ArrayToPointerDecay>
|   |     `-StringLiteral 0x561674f0eab0 'const char[2]' lvalue "r"
|   |-IfStmt 0x561674f0edf0
|   | |-UnaryOperator 0x561674f0ebf0 '_Bool' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x561674f0ebd8 '_Bool' <PointerToBoolean>
|   | |   `-ImplicitCastExpr 0x561674f0ebc0 'FILE *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x561674f0eba0 'FILE *' lvalue Var 0x561674f0e060 'fp' 'FILE *'
|   | `-CompoundStmt 0x561674f0edd0
|   |   |-CallExpr 0x561674f0ecc0 'int'
|   |   | |-ImplicitCastExpr 0x561674f0eca8 'int (*)(const char *__restrict, ...)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x561674f0ec88 'int (const char *__restrict, ...)' lvalue Function 0x561674a30018 'printf' 'int (const char *__restrict, ...)'
|   |   | `-ImplicitCastExpr 0x561674f0ece8 'const char *' <ArrayToPointerDecay>
|   |   |   `-StringLiteral 0x561674f0ec58 'const char[20]' lvalue "error opening a db\n"
|   |   `-CallExpr 0x561674f0eda8 'void'
|   |     |-ImplicitCastExpr 0x561674f0ed90 'void (*)(int) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x561674f0ed68 'void (int) __attribute__((noreturn)) throw()' lvalue Function 0x5616741764c0 'exit' 'void (int) __attribute__((noreturn)) throw()' (UsingShadow 0x561674215210 'exit')
|   |     `-IntegerLiteral 0x561674f0ed48 'int' 1
|   |-WhileStmt 0x561674fe20d8
|   | |-UnaryOperator 0x561674f0ef08 '_Bool' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x561674f0eef0 '_Bool' <IntegralToBoolean>
|   | |   `-CallExpr 0x561674f0eeb0 'int'
|   | |     |-ImplicitCastExpr 0x561674f0ee98 'int (*)(FILE *) throw()' <FunctionToPointerDecay>
|   | |     | `-DeclRefExpr 0x561674f0ee78 'int (FILE *) throw()' lvalue Function 0x561674a3b568 'feof' 'int (FILE *) throw()'
|   | |     `-ImplicitCastExpr 0x561674f0eed8 'FILE *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x561674f0ee58 'FILE *' lvalue Var 0x561674f0e060 'fp' 'FILE *'
|   | `-CompoundStmt 0x561674fe2050
|   |   |-DeclStmt 0x561674f0f540
|   |   | `-VarDecl 0x561674f0ef30  used record 'Record':'struct record' callinit
|   |   |   `-CXXConstructExpr 0x561674f0f518 'Record':'struct record' 'void (void) noexcept'
|   |   |-DeclStmt 0x561674f0fb40
|   |   | `-VarDecl 0x561674f0f568  used latLong 'LatLong':'struct latLong' callinit
|   |   |   `-CXXConstructExpr 0x561674f0fb18 'LatLong':'struct latLong' 'void (void) noexcept'
|   |   |-CallExpr 0x561674f0fcc0 'char *'
|   |   | |-ImplicitCastExpr 0x561674f0fca8 'char *(*)(char *__restrict, int, FILE *__restrict)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x561674f0fc30 'char *(char *__restrict, int, FILE *__restrict)' lvalue Function 0x561674a350e0 'fgets' 'char *(char *__restrict, int, FILE *__restrict)'
|   |   | |-ImplicitCastExpr 0x561674f0fcf8 'char *' <ArrayToPointerDecay>
|   |   | | `-MemberExpr 0x561674f0fbc0 'char[53]' lvalue .recString 0x561674e79678
|   |   | |   `-DeclRefExpr 0x561674f0fba0 'Record':'struct record' lvalue Var 0x561674f0ef30 'record' 'Record':'struct record'
|   |   | |-IntegerLiteral 0x561674f0fbf0 'int' 49
|   |   | `-ImplicitCastExpr 0x561674f0fd10 'FILE *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x561674f0fc10 'FILE *' lvalue Var 0x561674f0e060 'fp' 'FILE *'
|   |   |-CallExpr 0x561674f0fdc8 'int'
|   |   | |-ImplicitCastExpr 0x561674f0fdb0 'int (*)(FILE *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x561674f0fd90 'int (FILE *)' lvalue Function 0x561674a339f0 'fgetc' 'int (FILE *)'
|   |   | `-ImplicitCastExpr 0x561674f0fdf0 'FILE *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x561674f0fd70 'FILE *' lvalue Var 0x561674f0e060 'fp' 'FILE *'
|   |   |-IfStmt 0x561674f0ff08
|   |   | |-ImplicitCastExpr 0x561674f0fee8 '_Bool' <IntegralToBoolean>
|   |   | | `-CallExpr 0x561674f0fea8 'int'
|   |   | |   |-ImplicitCastExpr 0x561674f0fe90 'int (*)(FILE *) throw()' <FunctionToPointerDecay>
|   |   | |   | `-DeclRefExpr 0x561674f0fe70 'int (FILE *) throw()' lvalue Function 0x561674a3b568 'feof' 'int (FILE *) throw()'
|   |   | |   `-ImplicitCastExpr 0x561674f0fed0 'FILE *' <LValueToRValue>
|   |   | |     `-DeclRefExpr 0x561674f0fe50 'FILE *' lvalue Var 0x561674f0e060 'fp' 'FILE *'
|   |   | `-BreakStmt 0x561674f0ff00
|   |   |-DeclStmt 0x561674f0fff0
|   |   | `-VarDecl 0x561674f0ff88  used substr 'char[6]'
|   |   |-ForStmt 0x561674f10318
|   |   | |-BinaryOperator 0x561674f10048 'int' lvalue '='
|   |   | | |-DeclRefExpr 0x561674f10008 'int' lvalue Var 0x561674f0e110 'i' 'int'
|   |   | | `-IntegerLiteral 0x561674f10028 'int' 0
|   |   | |-<<<NULL>>>
|   |   | |-BinaryOperator 0x561674f100c0 '_Bool' '<'
|   |   | | |-ImplicitCastExpr 0x561674f100a8 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x561674f10068 'int' lvalue Var 0x561674f0e110 'i' 'int'
|   |   | | `-IntegerLiteral 0x561674f10088 'int' 5
|   |   | |-UnaryOperator 0x561674f10100 'int' postfix '++'
|   |   | | `-DeclRefExpr 0x561674f100e0 'int' lvalue Var 0x561674f0e110 'i' 'int'
|   |   | `-BinaryOperator 0x561674f102f8 'char' lvalue '='
|   |   |   |-ArraySubscriptExpr 0x561674f10188 'char' lvalue
|   |   |   | |-ImplicitCastExpr 0x561674f10158 'char *' <ArrayToPointerDecay>
|   |   |   | | `-DeclRefExpr 0x561674f10118 'char[6]' lvalue Var 0x561674f0ff88 'substr' 'char[6]'
|   |   |   | `-ImplicitCastExpr 0x561674f10170 'int' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x561674f10138 'int' lvalue Var 0x561674f0e110 'i' 'int'
|   |   |   `-ImplicitCastExpr 0x561674f102e0 'char' <LValueToRValue>
|   |   |     `-UnaryOperator 0x561674f102c8 'char' lvalue prefix '*' cannot overflow
|   |   |       `-ParenExpr 0x561674f102a8 'char *'
|   |   |         `-BinaryOperator 0x561674f10288 'char *' '+'
|   |   |           |-BinaryOperator 0x561674f10248 'char *' '+'
|   |   |           | |-ImplicitCastExpr 0x561674f10218 'char *' <ArrayToPointerDecay>
|   |   |           | | `-MemberExpr 0x561674f101c8 'char[53]' lvalue .recString 0x561674e79678
|   |   |           | |   `-DeclRefExpr 0x561674f101a8 'Record':'struct record' lvalue Var 0x561674f0ef30 'record' 'Record':'struct record'
|   |   |           | `-ImplicitCastExpr 0x561674f10230 'int' <LValueToRValue>
|   |   |           |   `-DeclRefExpr 0x561674f101f8 'int' lvalue Var 0x561674f0e110 'i' 'int'
|   |   |           `-IntegerLiteral 0x561674f10268 'int' 28
|   |   |-BinaryOperator 0x561674f103e0 'char' lvalue '='
|   |   | |-ArraySubscriptExpr 0x561674f103a8 'char' lvalue
|   |   | | |-ImplicitCastExpr 0x561674f10390 'char *' <ArrayToPointerDecay>
|   |   | | | `-DeclRefExpr 0x561674f10350 'char[6]' lvalue Var 0x561674f0ff88 'substr' 'char[6]'
|   |   | | `-IntegerLiteral 0x561674f10370 'int' 5
|   |   | `-CharacterLiteral 0x561674f103c8 'char' 0
|   |   |-BinaryOperator 0x561674f10590 'float' lvalue '='
|   |   | |-MemberExpr 0x561674f10420 'float' lvalue .lat 0x561674e792d0
|   |   | | `-DeclRefExpr 0x561674f10400 'LatLong':'struct latLong' lvalue Var 0x561674f0f568 'latLong' 'LatLong':'struct latLong'
|   |   | `-ImplicitCastExpr 0x561674f10578 'float' <FloatingCast>
|   |   |   `-CallExpr 0x561674f10520 'double'
|   |   |     |-ImplicitCastExpr 0x561674f10508 'double (*)(const char *) throw()' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x561674f104b8 'double (const char *) throw()' lvalue Function 0x561674123310 'atof' 'double (const char *) throw()' (UsingShadow 0x561674215ac0 'atof')
|   |   |     `-ImplicitCastExpr 0x561674f10560 'const char *' <NoOp>
|   |   |       `-ImplicitCastExpr 0x561674f10548 'char *' <ArrayToPointerDecay>
|   |   |         `-DeclRefExpr 0x561674f10498 'char[6]' lvalue Var 0x561674f0ff88 'substr' 'char[6]'
|   |   |-ForStmt 0x561674f108c0
|   |   | |-BinaryOperator 0x561674f105f0 'int' lvalue '='
|   |   | | |-DeclRefExpr 0x561674f105b0 'int' lvalue Var 0x561674f0e110 'i' 'int'
|   |   | | `-IntegerLiteral 0x561674f105d0 'int' 0
|   |   | |-<<<NULL>>>
|   |   | |-BinaryOperator 0x561674f10668 '_Bool' '<'
|   |   | | |-ImplicitCastExpr 0x561674f10650 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x561674f10610 'int' lvalue Var 0x561674f0e110 'i' 'int'
|   |   | | `-IntegerLiteral 0x561674f10630 'int' 5
|   |   | |-UnaryOperator 0x561674f106a8 'int' postfix '++'
|   |   | | `-DeclRefExpr 0x561674f10688 'int' lvalue Var 0x561674f0e110 'i' 'int'
|   |   | `-BinaryOperator 0x561674f108a0 'char' lvalue '='
|   |   |   |-ArraySubscriptExpr 0x561674f10730 'char' lvalue
|   |   |   | |-ImplicitCastExpr 0x561674f10700 'char *' <ArrayToPointerDecay>
|   |   |   | | `-DeclRefExpr 0x561674f106c0 'char[6]' lvalue Var 0x561674f0ff88 'substr' 'char[6]'
|   |   |   | `-ImplicitCastExpr 0x561674f10718 'int' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x561674f106e0 'int' lvalue Var 0x561674f0e110 'i' 'int'
|   |   |   `-ImplicitCastExpr 0x561674f10888 'char' <LValueToRValue>
|   |   |     `-UnaryOperator 0x561674f10870 'char' lvalue prefix '*' cannot overflow
|   |   |       `-ParenExpr 0x561674f10850 'char *'
|   |   |         `-BinaryOperator 0x561674f10830 'char *' '+'
|   |   |           |-BinaryOperator 0x561674f107f0 'char *' '+'
|   |   |           | |-ImplicitCastExpr 0x561674f107c0 'char *' <ArrayToPointerDecay>
|   |   |           | | `-MemberExpr 0x561674f10770 'char[53]' lvalue .recString 0x561674e79678
|   |   |           | |   `-DeclRefExpr 0x561674f10750 'Record':'struct record' lvalue Var 0x561674f0ef30 'record' 'Record':'struct record'
|   |   |           | `-ImplicitCastExpr 0x561674f107d8 'int' <LValueToRValue>
|   |   |           |   `-DeclRefExpr 0x561674f107a0 'int' lvalue Var 0x561674f0e110 'i' 'int'
|   |   |           `-IntegerLiteral 0x561674f10810 'int' 33
|   |   |-BinaryOperator 0x561674f10988 'char' lvalue '='
|   |   | |-ArraySubscriptExpr 0x561674f10950 'char' lvalue
|   |   | | |-ImplicitCastExpr 0x561674f10938 'char *' <ArrayToPointerDecay>
|   |   | | | `-DeclRefExpr 0x561674f108f8 'char[6]' lvalue Var 0x561674f0ff88 'substr' 'char[6]'
|   |   | | `-IntegerLiteral 0x561674f10918 'int' 5
|   |   | `-CharacterLiteral 0x561674f10970 'char' 0
|   |   |-BinaryOperator 0x561674fe1d78 'float' lvalue '='
|   |   | |-MemberExpr 0x561674f109c8 'float' lvalue .lng 0x561674e79338
|   |   | | `-DeclRefExpr 0x561674f109a8 'LatLong':'struct latLong' lvalue Var 0x561674f0f568 'latLong' 'LatLong':'struct latLong'
|   |   | `-ImplicitCastExpr 0x561674fe1d60 'float' <FloatingCast>
|   |   |   `-CallExpr 0x561674f10aa0 'double'
|   |   |     |-ImplicitCastExpr 0x561674f10a88 'double (*)(const char *) throw()' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x561674f10a60 'double (const char *) throw()' lvalue Function 0x561674123310 'atof' 'double (const char *) throw()' (UsingShadow 0x561674215ac0 'atof')
|   |   |     `-ImplicitCastExpr 0x561674fe1d48 'const char *' <NoOp>
|   |   |       `-ImplicitCastExpr 0x561674fe1d30 'char *' <ArrayToPointerDecay>
|   |   |         `-DeclRefExpr 0x561674f10a40 'char[6]' lvalue Var 0x561674f0ff88 'substr' 'char[6]'
|   |   |-CXXMemberCallExpr 0x561674fe1e68 'void'
|   |   | |-MemberExpr 0x561674fe1e38 '<bound member function type>' .push_back 0x561674ec98d8
|   |   | | `-DeclRefExpr 0x561674fe1d98 'std::vector<LatLong>':'class std::vector<struct latLong>' lvalue ParmVar 0x561674f0de30 'locations' 'std::vector<LatLong> &'
|   |   | `-ImplicitCastExpr 0x561674fe1e90 'const std::vector<struct latLong>::value_type':'const struct latLong' lvalue <NoOp>
|   |   |   `-DeclRefExpr 0x561674fe1e18 'LatLong':'struct latLong' lvalue Var 0x561674f0f568 'latLong' 'LatLong':'struct latLong'
|   |   |-CXXMemberCallExpr 0x561674fe1fa8 'void'
|   |   | |-MemberExpr 0x561674fe1f78 '<bound member function type>' .push_back 0x561674e9c368
|   |   | | `-DeclRefExpr 0x561674fe1ed8 'std::vector<Record>':'class std::vector<struct record>' lvalue ParmVar 0x561674f0dbf0 'records' 'std::vector<Record> &'
|   |   | `-ImplicitCastExpr 0x561674fe1fd0 'const std::vector<struct record>::value_type':'const struct record' lvalue <NoOp>
|   |   |   `-DeclRefExpr 0x561674fe1f58 'Record':'struct record' lvalue Var 0x561674f0ef30 'record' 'Record':'struct record'
|   |   `-UnaryOperator 0x561674fe2038 'int' postfix '++'
|   |     `-DeclRefExpr 0x561674fe2018 'int' lvalue Var 0x561674f0e2a8 'recNum' 'int'
|   `-CallExpr 0x561674fe2198 'int'
|     |-ImplicitCastExpr 0x561674fe2180 'int (*)(FILE *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x561674fe2160 'int (FILE *)' lvalue Function 0x561674a2d830 'fclose' 'int (FILE *)'
|     `-ImplicitCastExpr 0x561674fe21c0 'FILE *' <LValueToRValue>
|       `-DeclRefExpr 0x561674fe2140 'FILE *' lvalue Var 0x561674f0e060 'fp' 'FILE *'
|-CallExpr 0x561674fe22d0 'int'
| |-ImplicitCastExpr 0x561674fe22b8 'int (*)(FILE *)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x561674fe2298 'int (FILE *)' lvalue Function 0x561674a2d830 'fclose' 'int (FILE *)'
| `-ImplicitCastExpr 0x561674fe22f8 'FILE *' <LValueToRValue>
|   `-DeclRefExpr 0x561674fe2278 'FILE *' lvalue Var 0x561674f0dfe8 'flist' 'FILE *'
`-ReturnStmt 0x561674fe2348
  `-ImplicitCastExpr 0x561674fe2330 'int' <LValueToRValue>
    `-DeclRefExpr 0x561674fe2310 'int' lvalue Var 0x561674f0e2a8 'recNum' 'int'
Emitting fn: _Z10findLowestRSt6vectorI6recordSaIS0_EEPfii
findLowest
CompoundStmt 0x561674fe4660
|-DeclStmt 0x561674fe2b80
| |-VarDecl 0x561674fe2a80  used i 'int'
| `-VarDecl 0x561674fe2b00  used j 'int'
|-DeclStmt 0x561674fe2c18
| `-VarDecl 0x561674fe2bb0  used val 'float'
|-DeclStmt 0x561674fe2cb0
| `-VarDecl 0x561674fe2c48  used minLoc 'int'
|-DeclStmt 0x561674fe2d40
| `-VarDecl 0x561674fe2cd8  used tempRec 'Record *'
|-DeclStmt 0x561674fe2dd8
| `-VarDecl 0x561674fe2d70  used tempDist 'float'
`-ForStmt 0x561674fe4628
  |-BinaryOperator 0x561674fe2e30 'int' lvalue '='
  | |-DeclRefExpr 0x561674fe2df0 'int' lvalue Var 0x561674fe2a80 'i' 'int'
  | `-IntegerLiteral 0x561674fe2e10 'int' 0
  |-<<<NULL>>>
  |-BinaryOperator 0x561674fe2ec0 '_Bool' '<'
  | |-ImplicitCastExpr 0x561674fe2e90 'int' <LValueToRValue>
  | | `-DeclRefExpr 0x561674fe2e50 'int' lvalue Var 0x561674fe2a80 'i' 'int'
  | `-ImplicitCastExpr 0x561674fe2ea8 'int' <LValueToRValue>
  |   `-DeclRefExpr 0x561674fe2e70 'int' lvalue ParmVar 0x561674fe28b0 'topN' 'int'
  |-UnaryOperator 0x561674fe2f00 'int' postfix '++'
  | `-DeclRefExpr 0x561674fe2ee0 'int' lvalue Var 0x561674fe2a80 'i' 'int'
  `-CompoundStmt 0x561674fe45d0
    |-BinaryOperator 0x561674fe2f70 'int' lvalue '='
    | |-DeclRefExpr 0x561674fe2f18 'int' lvalue Var 0x561674fe2c48 'minLoc' 'int'
    | `-ImplicitCastExpr 0x561674fe2f58 'int' <LValueToRValue>
    |   `-DeclRefExpr 0x561674fe2f38 'int' lvalue Var 0x561674fe2a80 'i' 'int'
    |-ForStmt 0x561674fe3370
    | |-BinaryOperator 0x561674fe2fe8 'int' lvalue '='
    | | |-DeclRefExpr 0x561674fe2f90 'int' lvalue Var 0x561674fe2b00 'j' 'int'
    | | `-ImplicitCastExpr 0x561674fe2fd0 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x561674fe2fb0 'int' lvalue Var 0x561674fe2a80 'i' 'int'
    | |-<<<NULL>>>
    | |-BinaryOperator 0x561674fe3078 '_Bool' '<'
    | | |-ImplicitCastExpr 0x561674fe3048 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x561674fe3008 'int' lvalue Var 0x561674fe2b00 'j' 'int'
    | | `-ImplicitCastExpr 0x561674fe3060 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x561674fe3028 'int' lvalue ParmVar 0x561674fe2830 'numRecords' 'int'
    | |-UnaryOperator 0x561674fe30b8 'int' postfix '++'
    | | `-DeclRefExpr 0x561674fe3098 'int' lvalue Var 0x561674fe2b00 'j' 'int'
    | `-CompoundStmt 0x561674fe3350
    |   |-BinaryOperator 0x561674fe3198 'float' lvalue '='
    |   | |-DeclRefExpr 0x561674fe30d0 'float' lvalue Var 0x561674fe2bb0 'val' 'float'
    |   | `-ImplicitCastExpr 0x561674fe3180 'float' <LValueToRValue>
    |   |   `-ArraySubscriptExpr 0x561674fe3160 'float' lvalue
    |   |     |-ImplicitCastExpr 0x561674fe3130 'float *' <LValueToRValue>
    |   |     | `-DeclRefExpr 0x561674fe30f0 'float *' lvalue ParmVar 0x561674fe27b0 'distances' 'float *'
    |   |     `-ImplicitCastExpr 0x561674fe3148 'int' <LValueToRValue>
    |   |       `-DeclRefExpr 0x561674fe3110 'int' lvalue Var 0x561674fe2b00 'j' 'int'
    |   `-IfStmt 0x561674fe3330
    |     |-BinaryOperator 0x561674fe3298 '_Bool' '<'
    |     | |-ImplicitCastExpr 0x561674fe3268 'float' <LValueToRValue>
    |     | | `-DeclRefExpr 0x561674fe31b8 'float' lvalue Var 0x561674fe2bb0 'val' 'float'
    |     | `-ImplicitCastExpr 0x561674fe3280 'float' <LValueToRValue>
    |     |   `-ArraySubscriptExpr 0x561674fe3248 'float' lvalue
    |     |     |-ImplicitCastExpr 0x561674fe3218 'float *' <LValueToRValue>
    |     |     | `-DeclRefExpr 0x561674fe31d8 'float *' lvalue ParmVar 0x561674fe27b0 'distances' 'float *'
    |     |     `-ImplicitCastExpr 0x561674fe3230 'int' <LValueToRValue>
    |     |       `-DeclRefExpr 0x561674fe31f8 'int' lvalue Var 0x561674fe2c48 'minLoc' 'int'
    |     `-BinaryOperator 0x561674fe3310 'int' lvalue '='
    |       |-DeclRefExpr 0x561674fe32b8 'int' lvalue Var 0x561674fe2c48 'minLoc' 'int'
    |       `-ImplicitCastExpr 0x561674fe32f8 'int' <LValueToRValue>
    |         `-DeclRefExpr 0x561674fe32d8 'int' lvalue Var 0x561674fe2b00 'j' 'int'
    |-BinaryOperator 0x561674fe3520 'Record *' lvalue '='
    | |-DeclRefExpr 0x561674fe33a8 'Record *' lvalue Var 0x561674fe2cd8 'tempRec' 'Record *'
    | `-UnaryOperator 0x561674fe3508 '__gnu_cxx::__alloc_traits<class std::allocator<struct record> >::value_type *' prefix '&' cannot overflow
    |   `-CXXOperatorCallExpr 0x561674fe3470 '__gnu_cxx::__alloc_traits<class std::allocator<struct record> >::value_type':'struct record' lvalue '[]'
    |     |-ImplicitCastExpr 0x561674fe3458 'std::vector<struct record>::reference (*)(std::vector::size_type) noexcept' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x561674fe3438 'std::vector<struct record>::reference (std::vector::size_type) noexcept' lvalue CXXMethod 0x561674e9b410 'operator[]' 'std::vector<struct record>::reference (std::vector::size_type) noexcept'
    |     |-DeclRefExpr 0x561674fe33c8 'std::vector<Record>':'class std::vector<struct record>' lvalue ParmVar 0x561674fe2730 'records' 'std::vector<Record> &'
    |     `-ImplicitCastExpr 0x561674fe3420 'std::vector::size_type':'unsigned long' <IntegralCast>
    |       `-ImplicitCastExpr 0x561674fe3408 'int' <LValueToRValue>
    |         `-DeclRefExpr 0x561674fe33e8 'int' lvalue Var 0x561674fe2a80 'i' 'int'
    |-CXXOperatorCallExpr 0x561674fe3ee0 'struct record' lvalue '='
    | |-ImplicitCastExpr 0x561674fe3ec8 'struct record &(*)(const struct record &) noexcept' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x561674fe3b20 'struct record &(const struct record &) noexcept' lvalue CXXMethod 0x561674fe3700 'operator=' 'struct record &(const struct record &) noexcept'
    | |-CXXOperatorCallExpr 0x561674fe35e8 '__gnu_cxx::__alloc_traits<class std::allocator<struct record> >::value_type':'struct record' lvalue '[]'
    | | |-ImplicitCastExpr 0x561674fe35d0 'std::vector<struct record>::reference (*)(std::vector::size_type) noexcept' <FunctionToPointerDecay>
    | | | `-DeclRefExpr 0x561674fe35b0 'std::vector<struct record>::reference (std::vector::size_type) noexcept' lvalue CXXMethod 0x561674e9b410 'operator[]' 'std::vector<struct record>::reference (std::vector::size_type) noexcept'
    | | |-DeclRefExpr 0x561674fe3540 'std::vector<Record>':'class std::vector<struct record>' lvalue ParmVar 0x561674fe2730 'records' 'std::vector<Record> &'
    | | `-ImplicitCastExpr 0x561674fe3598 'std::vector::size_type':'unsigned long' <IntegralCast>
    | |   `-ImplicitCastExpr 0x561674fe3580 'int' <LValueToRValue>
    | |     `-DeclRefExpr 0x561674fe3560 'int' lvalue Var 0x561674fe2a80 'i' 'int'
    | `-ImplicitCastExpr 0x561674fe3b08 'const struct record' lvalue <NoOp>
    |   `-CXXOperatorCallExpr 0x561674fe36c8 '__gnu_cxx::__alloc_traits<class std::allocator<struct record> >::value_type':'struct record' lvalue '[]'
    |     |-ImplicitCastExpr 0x561674fe36b0 'std::vector<struct record>::reference (*)(std::vector::size_type) noexcept' <FunctionToPointerDecay>
    |     | `-DeclRefExpr 0x561674fe3690 'std::vector<struct record>::reference (std::vector::size_type) noexcept' lvalue CXXMethod 0x561674e9b410 'operator[]' 'std::vector<struct record>::reference (std::vector::size_type) noexcept'
    |     |-DeclRefExpr 0x561674fe3620 'std::vector<Record>':'class std::vector<struct record>' lvalue ParmVar 0x561674fe2730 'records' 'std::vector<Record> &'
    |     `-ImplicitCastExpr 0x561674fe3678 'std::vector::size_type':'unsigned long' <IntegralCast>
    |       `-ImplicitCastExpr 0x561674fe3660 'int' <LValueToRValue>
    |         `-DeclRefExpr 0x561674fe3640 'int' lvalue Var 0x561674fe2c48 'minLoc' 'int'
    |-CXXOperatorCallExpr 0x561674fe4098 'struct record' lvalue '='
    | |-ImplicitCastExpr 0x561674fe4080 'struct record &(*)(const struct record &) noexcept' <FunctionToPointerDecay>
    | | `-DeclRefExpr 0x561674fe4060 'struct record &(const struct record &) noexcept' lvalue CXXMethod 0x561674fe3700 'operator=' 'struct record &(const struct record &) noexcept'
    | |-CXXOperatorCallExpr 0x561674fe3fc0 '__gnu_cxx::__alloc_traits<class std::allocator<struct record> >::value_type':'struct record' lvalue '[]'
    | | |-ImplicitCastExpr 0x561674fe3fa8 'std::vector<struct record>::reference (*)(std::vector::size_type) noexcept' <FunctionToPointerDecay>
    | | | `-DeclRefExpr 0x561674fe3f88 'std::vector<struct record>::reference (std::vector::size_type) noexcept' lvalue CXXMethod 0x561674e9b410 'operator[]' 'std::vector<struct record>::reference (std::vector::size_type) noexcept'
    | | |-DeclRefExpr 0x561674fe3f18 'std::vector<Record>':'class std::vector<struct record>' lvalue ParmVar 0x561674fe2730 'records' 'std::vector<Record> &'
    | | `-ImplicitCastExpr 0x561674fe3f70 'std::vector::size_type':'unsigned long' <IntegralCast>
    | |   `-ImplicitCastExpr 0x561674fe3f58 'int' <LValueToRValue>
    | |     `-DeclRefExpr 0x561674fe3f38 'int' lvalue Var 0x561674fe2c48 'minLoc' 'int'
    | `-ImplicitCastExpr 0x561674fe4048 'const struct record' lvalue <NoOp>
    |   `-UnaryOperator 0x561674fe4030 'Record':'struct record' lvalue prefix '*' cannot overflow
    |     `-ImplicitCastExpr 0x561674fe4018 'Record *' <LValueToRValue>
    |       `-DeclRefExpr 0x561674fe3ff8 'Record *' lvalue Var 0x561674fe2cd8 'tempRec' 'Record *'
    |-BinaryOperator 0x561674fe4198 'float' lvalue '='
    | |-DeclRefExpr 0x561674fe40d0 'float' lvalue Var 0x561674fe2d70 'tempDist' 'float'
    | `-ImplicitCastExpr 0x561674fe4180 'float' <LValueToRValue>
    |   `-ArraySubscriptExpr 0x561674fe4160 'float' lvalue
    |     |-ImplicitCastExpr 0x561674fe4130 'float *' <LValueToRValue>
    |     | `-DeclRefExpr 0x561674fe40f0 'float *' lvalue ParmVar 0x561674fe27b0 'distances' 'float *'
    |     `-ImplicitCastExpr 0x561674fe4148 'int' <LValueToRValue>
    |       `-DeclRefExpr 0x561674fe4110 'int' lvalue Var 0x561674fe2a80 'i' 'int'
    |-BinaryOperator 0x561674fe42f0 'float' lvalue '='
    | |-ArraySubscriptExpr 0x561674fe4228 'float' lvalue
    | | |-ImplicitCastExpr 0x561674fe41f8 'float *' <LValueToRValue>
    | | | `-DeclRefExpr 0x561674fe41b8 'float *' lvalue ParmVar 0x561674fe27b0 'distances' 'float *'
    | | `-ImplicitCastExpr 0x561674fe4210 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x561674fe41d8 'int' lvalue Var 0x561674fe2a80 'i' 'int'
    | `-ImplicitCastExpr 0x561674fe42d8 'float' <LValueToRValue>
    |   `-ArraySubscriptExpr 0x561674fe42b8 'float' lvalue
    |     |-ImplicitCastExpr 0x561674fe4288 'float *' <LValueToRValue>
    |     | `-DeclRefExpr 0x561674fe4248 'float *' lvalue ParmVar 0x561674fe27b0 'distances' 'float *'
    |     `-ImplicitCastExpr 0x561674fe42a0 'int' <LValueToRValue>
    |       `-DeclRefExpr 0x561674fe4268 'int' lvalue Var 0x561674fe2c48 'minLoc' 'int'
    |-BinaryOperator 0x561674fe43d8 'float' lvalue '='
    | |-ArraySubscriptExpr 0x561674fe4380 'float' lvalue
    | | |-ImplicitCastExpr 0x561674fe4350 'float *' <LValueToRValue>
    | | | `-DeclRefExpr 0x561674fe4310 'float *' lvalue ParmVar 0x561674fe27b0 'distances' 'float *'
    | | `-ImplicitCastExpr 0x561674fe4368 'int' <LValueToRValue>
    | |   `-DeclRefExpr 0x561674fe4330 'int' lvalue Var 0x561674fe2c48 'minLoc' 'int'
    | `-ImplicitCastExpr 0x561674fe43c0 'float' <LValueToRValue>
    |   `-DeclRefExpr 0x561674fe43a0 'float' lvalue Var 0x561674fe2d70 'tempDist' 'float'
    `-BinaryOperator 0x561674fe45b0 'float' lvalue '='
      |-MemberExpr 0x561674fe44d8 'float' lvalue .distance 0x561674e796e0
      | `-CXXOperatorCallExpr 0x561674fe44a0 '__gnu_cxx::__alloc_traits<class std::allocator<struct record> >::value_type':'struct record' lvalue '[]'
      |   |-ImplicitCastExpr 0x561674fe4488 'std::vector<struct record>::reference (*)(std::vector::size_type) noexcept' <FunctionToPointerDecay>
      |   | `-DeclRefExpr 0x561674fe4468 'std::vector<struct record>::reference (std::vector::size_type) noexcept' lvalue CXXMethod 0x561674e9b410 'operator[]' 'std::vector<struct record>::reference (std::vector::size_type) noexcept'
      |   |-DeclRefExpr 0x561674fe43f8 'std::vector<Record>':'class std::vector<struct record>' lvalue ParmVar 0x561674fe2730 'records' 'std::vector<Record> &'
      |   `-ImplicitCastExpr 0x561674fe4450 'std::vector::size_type':'unsigned long' <IntegralCast>
      |     `-ImplicitCastExpr 0x561674fe4438 'int' <LValueToRValue>
      |       `-DeclRefExpr 0x561674fe4418 'int' lvalue Var 0x561674fe2a80 'i' 'int'
      `-ImplicitCastExpr 0x561674fe4598 'float' <LValueToRValue>
        `-ArraySubscriptExpr 0x561674fe4578 'float' lvalue
          |-ImplicitCastExpr 0x561674fe4548 'float *' <LValueToRValue>
          | `-DeclRefExpr 0x561674fe4508 'float *' lvalue ParmVar 0x561674fe27b0 'distances' 'float *'
          `-ImplicitCastExpr 0x561674fe4560 'int' <LValueToRValue>
            `-DeclRefExpr 0x561674fe4528 'int' lvalue Var 0x561674fe2a80 'i' 'int'
Emitting fn: _ZN6recordaSERKS_
operator=
CompoundStmt 0x561674fe3e40
|-CallExpr 0x561674fe3cd8 'void *'
| |-ImplicitCastExpr 0x561674fe3cc0 'void *(*)(void *, const void *, unsigned long) noexcept' <BuiltinFnToFnPtr>
| | `-DeclRefExpr 0x561674fe3c80 '<builtin fn type>' Function 0x56167459ca30 '__builtin_memcpy' 'void *(void *, const void *, unsigned long) noexcept'
| |-ImplicitCastExpr 0x561674fe3d10 'void *' <BitCast>
| | `-UnaryOperator 0x561674fe3c68 'char (*)[53]' prefix '&' cannot overflow
| |   `-MemberExpr 0x561674fe3c10 'char[53]' lvalue ->recString 0x561674e79678
| |     `-CXXThisExpr 0x561674fe3c00 'struct record *' this
| |-ImplicitCastExpr 0x561674fe3d28 'const void *' <BitCast>
| | `-UnaryOperator 0x561674fe3be8 'const char (*)[53]' prefix '&' cannot overflow
| |   `-MemberExpr 0x561674fe3b90 'const char[53]' lvalue .recString 0x561674e79678
| |     `-DeclRefExpr 0x561674fe3b70 'const struct record' lvalue ParmVar 0x561674fe3888 '' 'const struct record &'
| `-IntegerLiteral 0x561674fe3ca0 'unsigned long' 53
|-BinaryOperator 0x561674fe3de8 'float' lvalue '='
| |-MemberExpr 0x561674fe3da0 'float' lvalue ->distance 0x561674e796e0
| | `-CXXThisExpr 0x561674fe3d90 'struct record *' this
| `-ImplicitCastExpr 0x561674fe3dd0 'float' <LValueToRValue>
|   `-MemberExpr 0x561674fe3d60 'const float' lvalue .distance 0x561674e796e0
|     `-DeclRefExpr 0x561674fe3d40 'const struct record' lvalue ParmVar 0x561674fe3888 '' 'const struct record &'
`-ReturnStmt 0x561674fe3e30
  `-UnaryOperator 0x561674fe3e18 'struct record' lvalue prefix '*' cannot overflow
    `-CXXThisExpr 0x561674fe3e08 'struct record *' this
Emitting fn: _Z16parseCommandlineiPPcS_PiPfS2_S1_S1_S1_S1_
parseCommandline
CompoundStmt 0x561674fe6cc0
|-DeclStmt 0x561674fe4e50
| `-VarDecl 0x561674fe4de8  used i 'int'
|-IfStmt 0x561674fe4f10
| |-BinaryOperator 0x561674fe4ec0 '_Bool' '<'
| | |-ImplicitCastExpr 0x561674fe4ea8 'int' <LValueToRValue>
| | | `-DeclRefExpr 0x561674fe4e68 'int' lvalue ParmVar 0x561674fe4770 'argc' 'int'
| | `-IntegerLiteral 0x561674fe4e88 'int' 2
| `-ReturnStmt 0x561674fe4f00
|   `-IntegerLiteral 0x561674fe4ee0 'int' 1
|-CallExpr 0x561674fe50c0 'char *'
| |-ImplicitCastExpr 0x561674fe50a8 'char *(*)(char *__restrict, const char *__restrict, size_t) throw()' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x561674fe5030 'char *(char *__restrict, const char *__restrict, size_t) throw()' lvalue Function 0x5616742192f8 'strncpy' 'char *(char *__restrict, const char *__restrict, size_t) throw()'
| |-ImplicitCastExpr 0x561674fe50f8 'char *' <LValueToRValue>
| | `-DeclRefExpr 0x561674fe4f78 'char *' lvalue ParmVar 0x561674fe4880 'filename' 'char *'
| |-ImplicitCastExpr 0x561674fe5128 'const char *' <NoOp>
| | `-ImplicitCastExpr 0x561674fe5110 'char *' <LValueToRValue>
| |   `-ArraySubscriptExpr 0x561674fe4ff0 'char *' lvalue
| |     |-ImplicitCastExpr 0x561674fe4fd8 'char **':'char **' <LValueToRValue>
| |     | `-DeclRefExpr 0x561674fe4f98 'char **':'char **' lvalue ParmVar 0x561674fe4800 'argv' 'char **':'char **'
| |     `-IntegerLiteral 0x561674fe4fb8 'int' 1
| `-ImplicitCastExpr 0x561674fe5140 'size_t':'unsigned long' <IntegralCast>
|   `-IntegerLiteral 0x561674fe5010 'int' 100
|-DeclStmt 0x561674fe51d0
| `-VarDecl 0x561674fe5168  used flag 'char'
|-ForStmt 0x561674fe68c8
| |-BinaryOperator 0x561674fe5228 'int' lvalue '='
| | |-DeclRefExpr 0x561674fe51e8 'int' lvalue Var 0x561674fe4de8 'i' 'int'
| | `-IntegerLiteral 0x561674fe5208 'int' 1
| |-<<<NULL>>>
| |-BinaryOperator 0x561674fe52b8 '_Bool' '<'
| | |-ImplicitCastExpr 0x561674fe5288 'int' <LValueToRValue>
| | | `-DeclRefExpr 0x561674fe5248 'int' lvalue Var 0x561674fe4de8 'i' 'int'
| | `-ImplicitCastExpr 0x561674fe52a0 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x561674fe5268 'int' lvalue ParmVar 0x561674fe4770 'argc' 'int'
| |-UnaryOperator 0x561674fe52f8 'int' postfix '++'
| | `-DeclRefExpr 0x561674fe52d8 'int' lvalue Var 0x561674fe4de8 'i' 'int'
| `-CompoundStmt 0x561674fe68b0
|   `-IfStmt 0x561674fe6890
|     |-BinaryOperator 0x561674fe5458 '_Bool' '=='
|     | |-ImplicitCastExpr 0x561674fe5428 'int' <IntegralCast>
|     | | `-ImplicitCastExpr 0x561674fe5410 'char' <LValueToRValue>
|     | |   `-ArraySubscriptExpr 0x561674fe53d8 'char' lvalue
|     | |     |-ImplicitCastExpr 0x561674fe53c0 'char *' <LValueToRValue>
|     | |     | `-ArraySubscriptExpr 0x561674fe5380 'char *' lvalue
|     | |     |   |-ImplicitCastExpr 0x561674fe5350 'char **':'char **' <LValueToRValue>
|     | |     |   | `-DeclRefExpr 0x561674fe5310 'char **':'char **' lvalue ParmVar 0x561674fe4800 'argv' 'char **':'char **'
|     | |     |   `-ImplicitCastExpr 0x561674fe5368 'int' <LValueToRValue>
|     | |     |     `-DeclRefExpr 0x561674fe5330 'int' lvalue Var 0x561674fe4de8 'i' 'int'
|     | |     `-IntegerLiteral 0x561674fe53a0 'int' 0
|     | `-ImplicitCastExpr 0x561674fe5440 'int' <IntegralCast>
|     |   `-CharacterLiteral 0x561674fe53f8 'char' 45
|     `-CompoundStmt 0x561674fe6870
|       |-BinaryOperator 0x561674fe5598 'char' lvalue '='
|       | |-DeclRefExpr 0x561674fe5478 'char' lvalue Var 0x561674fe5168 'flag' 'char'
|       | `-ImplicitCastExpr 0x561674fe5580 'char' <LValueToRValue>
|       |   `-ArraySubscriptExpr 0x561674fe5560 'char' lvalue
|       |     |-ImplicitCastExpr 0x561674fe5548 'char *' <LValueToRValue>
|       |     | `-ArraySubscriptExpr 0x561674fe5508 'char *' lvalue
|       |     |   |-ImplicitCastExpr 0x561674fe54d8 'char **':'char **' <LValueToRValue>
|       |     |   | `-DeclRefExpr 0x561674fe5498 'char **':'char **' lvalue ParmVar 0x561674fe4800 'argv' 'char **':'char **'
|       |     |   `-ImplicitCastExpr 0x561674fe54f0 'int' <LValueToRValue>
|       |     |     `-DeclRefExpr 0x561674fe54b8 'int' lvalue Var 0x561674fe4de8 'i' 'int'
|       |     `-IntegerLiteral 0x561674fe5528 'int' 1
|       `-SwitchStmt 0x561674fe5608
|         |-ImplicitCastExpr 0x561674fe55f0 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x561674fe55d8 'char' <LValueToRValue>
|         |   `-DeclRefExpr 0x561674fe55b8 'char' lvalue Var 0x561674fe5168 'flag' 'char'
|         `-CompoundStmt 0x561674fe67d8
|           |-CaseStmt 0x561674fe5680
|           | |-ConstantExpr 0x561674fe5660 'int'
|           | | |-value: Int 114
|           | | `-ImplicitCastExpr 0x561674fe5648 'int' <IntegralCast>
|           | |   `-CharacterLiteral 0x561674fe5630 'char' 114
|           | `-UnaryOperator 0x561674fe56c8 'int' postfix '++'
|           |   `-DeclRefExpr 0x561674fe56a8 'int' lvalue Var 0x561674fe4de8 'i' 'int'
|           |-BinaryOperator 0x561674fe58c8 'int' lvalue '='
|           | |-UnaryOperator 0x561674fe5718 'int' lvalue prefix '*' cannot overflow
|           | | `-ImplicitCastExpr 0x561674fe5700 'int *' <LValueToRValue>
|           | |   `-DeclRefExpr 0x561674fe56e0 'int *' lvalue ParmVar 0x561674fe4900 'r' 'int *'
|           | `-CallExpr 0x561674fe5870 'int'
|           |   |-ImplicitCastExpr 0x561674fe5858 'int (*)(const char *) throw()' <FunctionToPointerDecay>
|           |   | `-DeclRefExpr 0x561674fe5808 'int (const char *) throw()' lvalue Function 0x561674123588 'atoi' 'int (const char *) throw()' (UsingShadow 0x561674215b90 'atoi')
|           |   `-ImplicitCastExpr 0x561674fe58b0 'const char *' <NoOp>
|           |     `-ImplicitCastExpr 0x561674fe5898 'char *' <LValueToRValue>
|           |       `-ArraySubscriptExpr 0x561674fe57e8 'char *' lvalue
|           |         |-ImplicitCastExpr 0x561674fe57b8 'char **':'char **' <LValueToRValue>
|           |         | `-DeclRefExpr 0x561674fe5778 'char **':'char **' lvalue ParmVar 0x561674fe4800 'argv' 'char **':'char **'
|           |         `-ImplicitCastExpr 0x561674fe57d0 'int' <LValueToRValue>
|           |           `-DeclRefExpr 0x561674fe5798 'int' lvalue Var 0x561674fe4de8 'i' 'int'
|           |-BreakStmt 0x561674fe58e8
|           |-CaseStmt 0x561674fe5940
|           | |-ConstantExpr 0x561674fe5920 'int'
|           | | |-value: Int 108
|           | | `-ImplicitCastExpr 0x561674fe5908 'int' <IntegralCast>
|           | |   `-CharacterLiteral 0x561674fe58f0 'char' 108
|           | `-IfStmt 0x561674fe5f70 has_else
|           |   |-BinaryOperator 0x561674fe5ab0 '_Bool' '=='
|           |   | |-ImplicitCastExpr 0x561674fe5a80 'int' <IntegralCast>
|           |   | | `-ImplicitCastExpr 0x561674fe5a68 'char' <LValueToRValue>
|           |   | |   `-ArraySubscriptExpr 0x561674fe5a30 'char' lvalue
|           |   | |     |-ImplicitCastExpr 0x561674fe5a18 'char *' <LValueToRValue>
|           |   | |     | `-ArraySubscriptExpr 0x561674fe59d8 'char *' lvalue
|           |   | |     |   |-ImplicitCastExpr 0x561674fe59a8 'char **':'char **' <LValueToRValue>
|           |   | |     |   | `-DeclRefExpr 0x561674fe5968 'char **':'char **' lvalue ParmVar 0x561674fe4800 'argv' 'char **':'char **'
|           |   | |     |   `-ImplicitCastExpr 0x561674fe59c0 'int' <LValueToRValue>
|           |   | |     |     `-DeclRefExpr 0x561674fe5988 'int' lvalue Var 0x561674fe4de8 'i' 'int'
|           |   | |     `-IntegerLiteral 0x561674fe59f8 'int' 2
|           |   | `-ImplicitCastExpr 0x561674fe5a98 'int' <IntegralCast>
|           |   |   `-CharacterLiteral 0x561674fe5a50 'char' 97
|           |   |-CompoundStmt 0x561674fe5d08
|           |   | `-BinaryOperator 0x561674fe5ce8 'float' lvalue '='
|           |   |   |-UnaryOperator 0x561674fe5b08 'float' lvalue prefix '*' cannot overflow
|           |   |   | `-ImplicitCastExpr 0x561674fe5af0 'float *' <LValueToRValue>
|           |   |   |   `-DeclRefExpr 0x561674fe5ad0 'float *' lvalue ParmVar 0x561674fe4980 'lat' 'float *'
|           |   |   `-ImplicitCastExpr 0x561674fe5cd0 'float' <FloatingCast>
|           |   |     `-CallExpr 0x561674fe5c78 'double'
|           |   |       |-ImplicitCastExpr 0x561674fe5c60 'double (*)(const char *) throw()' <FunctionToPointerDecay>
|           |   |       | `-DeclRefExpr 0x561674fe5c38 'double (const char *) throw()' lvalue Function 0x561674123310 'atof' 'double (const char *) throw()' (UsingShadow 0x561674215ac0 'atof')
|           |   |       `-ImplicitCastExpr 0x561674fe5cb8 'const char *' <NoOp>
|           |   |         `-ImplicitCastExpr 0x561674fe5ca0 'char *' <LValueToRValue>
|           |   |           `-ArraySubscriptExpr 0x561674fe5c18 'char *' lvalue
|           |   |             |-ImplicitCastExpr 0x561674fe5c00 'char **':'char **' <LValueToRValue>
|           |   |             | `-DeclRefExpr 0x561674fe5b68 'char **':'char **' lvalue ParmVar 0x561674fe4800 'argv' 'char **':'char **'
|           |   |             `-BinaryOperator 0x561674fe5be0 'int' '+'
|           |   |               |-ImplicitCastExpr 0x561674fe5bc8 'int' <LValueToRValue>
|           |   |               | `-DeclRefExpr 0x561674fe5b88 'int' lvalue Var 0x561674fe4de8 'i' 'int'
|           |   |               `-IntegerLiteral 0x561674fe5ba8 'int' 1
|           |   `-CompoundStmt 0x561674fe5f58
|           |     `-BinaryOperator 0x561674fe5f38 'float' lvalue '='
|           |       |-UnaryOperator 0x561674fe5d58 'float' lvalue prefix '*' cannot overflow
|           |       | `-ImplicitCastExpr 0x561674fe5d40 'float *' <LValueToRValue>
|           |       |   `-DeclRefExpr 0x561674fe5d20 'float *' lvalue ParmVar 0x561674fe4a00 'lng' 'float *'
|           |       `-ImplicitCastExpr 0x561674fe5f20 'float' <FloatingCast>
|           |         `-CallExpr 0x561674fe5ec8 'double'
|           |           |-ImplicitCastExpr 0x561674fe5eb0 'double (*)(const char *) throw()' <FunctionToPointerDecay>
|           |           | `-DeclRefExpr 0x561674fe5e88 'double (const char *) throw()' lvalue Function 0x561674123310 'atof' 'double (const char *) throw()' (UsingShadow 0x561674215ac0 'atof')
|           |           `-ImplicitCastExpr 0x561674fe5f08 'const char *' <NoOp>
|           |             `-ImplicitCastExpr 0x561674fe5ef0 'char *' <LValueToRValue>
|           |               `-ArraySubscriptExpr 0x561674fe5e68 'char *' lvalue
|           |                 |-ImplicitCastExpr 0x561674fe5e50 'char **':'char **' <LValueToRValue>
|           |                 | `-DeclRefExpr 0x561674fe5db8 'char **':'char **' lvalue ParmVar 0x561674fe4800 'argv' 'char **':'char **'
|           |                 `-BinaryOperator 0x561674fe5e30 'int' '+'
|           |                   |-ImplicitCastExpr 0x561674fe5e18 'int' <LValueToRValue>
|           |                   | `-DeclRefExpr 0x561674fe5dd8 'int' lvalue Var 0x561674fe4de8 'i' 'int'
|           |                   `-IntegerLiteral 0x561674fe5df8 'int' 1
|           |-UnaryOperator 0x561674fe5fc0 'int' postfix '++'
|           | `-DeclRefExpr 0x561674fe5fa0 'int' lvalue Var 0x561674fe4de8 'i' 'int'
|           |-BreakStmt 0x561674fe5fd8
|           |-CaseStmt 0x561674fe6030
|           | |-ConstantExpr 0x561674fe6010 'int'
|           | | |-value: Int 104
|           | | `-ImplicitCastExpr 0x561674fe5ff8 'int' <IntegralCast>
|           | |   `-CharacterLiteral 0x561674fe5fe0 'char' 104
|           | `-ReturnStmt 0x561674fe6078
|           |   `-IntegerLiteral 0x561674fe6058 'int' 1
|           |-CaseStmt 0x561674fe60d8
|           | |-ConstantExpr 0x561674fe60b8 'int'
|           | | |-value: Int 113
|           | | `-ImplicitCastExpr 0x561674fe60a0 'int' <IntegralCast>
|           | |   `-CharacterLiteral 0x561674fe6088 'char' 113
|           | `-BinaryOperator 0x561674fe6170 'int' lvalue '='
|           |   |-UnaryOperator 0x561674fe6138 'int' lvalue prefix '*' cannot overflow
|           |   | `-ImplicitCastExpr 0x561674fe6120 'int *' <LValueToRValue>
|           |   |   `-DeclRefExpr 0x561674fe6100 'int *' lvalue ParmVar 0x561674fe4a80 'q' 'int *'
|           |   `-IntegerLiteral 0x561674fe6150 'int' 1
|           |-BreakStmt 0x561674fe6190
|           |-CaseStmt 0x561674fe61e8
|           | |-ConstantExpr 0x561674fe61c8 'int'
|           | | |-value: Int 116
|           | | `-ImplicitCastExpr 0x561674fe61b0 'int' <IntegralCast>
|           | |   `-CharacterLiteral 0x561674fe6198 'char' 116
|           | `-BinaryOperator 0x561674fe6280 'int' lvalue '='
|           |   |-UnaryOperator 0x561674fe6248 'int' lvalue prefix '*' cannot overflow
|           |   | `-ImplicitCastExpr 0x561674fe6230 'int *' <LValueToRValue>
|           |   |   `-DeclRefExpr 0x561674fe6210 'int *' lvalue ParmVar 0x561674fe4b00 't' 'int *'
|           |   `-IntegerLiteral 0x561674fe6260 'int' 1
|           |-BreakStmt 0x561674fe62a0
|           |-CaseStmt 0x561674fe62f8
|           | |-ConstantExpr 0x561674fe62d8 'int'
|           | | |-value: Int 112
|           | | `-ImplicitCastExpr 0x561674fe62c0 'int' <IntegralCast>
|           | |   `-CharacterLiteral 0x561674fe62a8 'char' 112
|           | `-UnaryOperator 0x561674fe6340 'int' postfix '++'
|           |   `-DeclRefExpr 0x561674fe6320 'int' lvalue Var 0x561674fe4de8 'i' 'int'
|           |-BinaryOperator 0x561674fe6518 'int' lvalue '='
|           | |-UnaryOperator 0x561674fe6390 'int' lvalue prefix '*' cannot overflow
|           | | `-ImplicitCastExpr 0x561674fe6378 'int *' <LValueToRValue>
|           | |   `-DeclRefExpr 0x561674fe6358 'int *' lvalue ParmVar 0x561674fe4b80 'p' 'int *'
|           | `-CallExpr 0x561674fe64c0 'int'
|           |   |-ImplicitCastExpr 0x561674fe64a8 'int (*)(const char *) throw()' <FunctionToPointerDecay>
|           |   | `-DeclRefExpr 0x561674fe6480 'int (const char *) throw()' lvalue Function 0x561674123588 'atoi' 'int (const char *) throw()' (UsingShadow 0x561674215b90 'atoi')
|           |   `-ImplicitCastExpr 0x561674fe6500 'const char *' <NoOp>
|           |     `-ImplicitCastExpr 0x561674fe64e8 'char *' <LValueToRValue>
|           |       `-ArraySubscriptExpr 0x561674fe6460 'char *' lvalue
|           |         |-ImplicitCastExpr 0x561674fe6430 'char **':'char **' <LValueToRValue>
|           |         | `-DeclRefExpr 0x561674fe63f0 'char **':'char **' lvalue ParmVar 0x561674fe4800 'argv' 'char **':'char **'
|           |         `-ImplicitCastExpr 0x561674fe6448 'int' <LValueToRValue>
|           |           `-DeclRefExpr 0x561674fe6410 'int' lvalue Var 0x561674fe4de8 'i' 'int'
|           |-BreakStmt 0x561674fe6538
|           |-CaseStmt 0x561674fe6590
|           | |-ConstantExpr 0x561674fe6570 'int'
|           | | |-value: Int 100
|           | | `-ImplicitCastExpr 0x561674fe6558 'int' <IntegralCast>
|           | |   `-CharacterLiteral 0x561674fe6540 'char' 100
|           | `-UnaryOperator 0x561674fe65d8 'int' postfix '++'
|           |   `-DeclRefExpr 0x561674fe65b8 'int' lvalue Var 0x561674fe4de8 'i' 'int'
|           |-BinaryOperator 0x561674fe67b0 'int' lvalue '='
|           | |-UnaryOperator 0x561674fe6628 'int' lvalue prefix '*' cannot overflow
|           | | `-ImplicitCastExpr 0x561674fe6610 'int *' <LValueToRValue>
|           | |   `-DeclRefExpr 0x561674fe65f0 'int *' lvalue ParmVar 0x561674fe4c00 'd' 'int *'
|           | `-CallExpr 0x561674fe6758 'int'
|           |   |-ImplicitCastExpr 0x561674fe6740 'int (*)(const char *) throw()' <FunctionToPointerDecay>
|           |   | `-DeclRefExpr 0x561674fe6718 'int (const char *) throw()' lvalue Function 0x561674123588 'atoi' 'int (const char *) throw()' (UsingShadow 0x561674215b90 'atoi')
|           |   `-ImplicitCastExpr 0x561674fe6798 'const char *' <NoOp>
|           |     `-ImplicitCastExpr 0x561674fe6780 'char *' <LValueToRValue>
|           |       `-ArraySubscriptExpr 0x561674fe66f8 'char *' lvalue
|           |         |-ImplicitCastExpr 0x561674fe66c8 'char **':'char **' <LValueToRValue>
|           |         | `-DeclRefExpr 0x561674fe6688 'char **':'char **' lvalue ParmVar 0x561674fe4800 'argv' 'char **':'char **'
|           |         `-ImplicitCastExpr 0x561674fe66e0 'int' <LValueToRValue>
|           |           `-DeclRefExpr 0x561674fe66a8 'int' lvalue Var 0x561674fe4de8 'i' 'int'
|           `-BreakStmt 0x561674fe67d0
|-IfStmt 0x561674fe6c70
| |-BinaryOperator 0x561674fe6c20 '_Bool' '||'
| | |-ParenExpr 0x561674fe6a70 '_Bool'
| | | `-BinaryOperator 0x561674fe6a50 '_Bool' '&&'
| | |   |-BinaryOperator 0x561674fe6988 '_Bool' '>='
| | |   | |-ImplicitCastExpr 0x561674fe6970 'int' <LValueToRValue>
| | |   | | `-UnaryOperator 0x561674fe6938 'int' lvalue prefix '*' cannot overflow
| | |   | |   `-ImplicitCastExpr 0x561674fe6920 'int *' <LValueToRValue>
| | |   | |     `-DeclRefExpr 0x561674fe6900 'int *' lvalue ParmVar 0x561674fe4c00 'd' 'int *'
| | |   | `-IntegerLiteral 0x561674fe6950 'int' 0
| | |   `-BinaryOperator 0x561674fe6a30 '_Bool' '<'
| | |     |-ImplicitCastExpr 0x561674fe6a18 'int' <LValueToRValue>
| | |     | `-UnaryOperator 0x561674fe69e0 'int' lvalue prefix '*' cannot overflow
| | |     |   `-ImplicitCastExpr 0x561674fe69c8 'int *' <LValueToRValue>
| | |     |     `-DeclRefExpr 0x561674fe69a8 'int *' lvalue ParmVar 0x561674fe4b80 'p' 'int *'
| | |     `-IntegerLiteral 0x561674fe69f8 'int' 0
| | `-ParenExpr 0x561674fe6c00 '_Bool'
| |   `-BinaryOperator 0x561674fe6be0 '_Bool' '&&'
| |     |-BinaryOperator 0x561674fe6b18 '_Bool' '>='
| |     | |-ImplicitCastExpr 0x561674fe6b00 'int' <LValueToRValue>
| |     | | `-UnaryOperator 0x561674fe6ac8 'int' lvalue prefix '*' cannot overflow
| |     | |   `-ImplicitCastExpr 0x561674fe6ab0 'int *' <LValueToRValue>
| |     | |     `-DeclRefExpr 0x561674fe6a90 'int *' lvalue ParmVar 0x561674fe4b80 'p' 'int *'
| |     | `-IntegerLiteral 0x561674fe6ae0 'int' 0
| |     `-BinaryOperator 0x561674fe6bc0 '_Bool' '<'
| |       |-ImplicitCastExpr 0x561674fe6ba8 'int' <LValueToRValue>
| |       | `-UnaryOperator 0x561674fe6b70 'int' lvalue prefix '*' cannot overflow
| |       |   `-ImplicitCastExpr 0x561674fe6b58 'int *' <LValueToRValue>
| |       |     `-DeclRefExpr 0x561674fe6b38 'int *' lvalue ParmVar 0x561674fe4c00 'd' 'int *'
| |       `-IntegerLiteral 0x561674fe6b88 'int' 0
| `-ReturnStmt 0x561674fe6c60
|   `-IntegerLiteral 0x561674fe6c40 'int' 1
`-ReturnStmt 0x561674fe6cb0
  `-IntegerLiteral 0x561674fe6c90 'int' 0
Emitting fn: _Z10printUsagev
printUsage
CompoundStmt 0x561674fe86d0
|-CallExpr 0x561674fe6e80 'int'
| |-ImplicitCastExpr 0x561674fe6e68 'int (*)(const char *__restrict, ...)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x561674fe6e48 'int (const char *__restrict, ...)' lvalue Function 0x561674a30018 'printf' 'int (const char *__restrict, ...)'
| `-ImplicitCastExpr 0x561674fe6ea8 'const char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x561674fe6e18 'const char[24]' lvalue "Nearest Neighbor Usage\n"
|-CallExpr 0x561674fe6f68 'int'
| |-ImplicitCastExpr 0x561674fe6f50 'int (*)(const char *__restrict, ...)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x561674fe6f30 'int (const char *__restrict, ...)' lvalue Function 0x561674a30018 'printf' 'int (const char *__restrict, ...)'
| `-ImplicitCastExpr 0x561674fe6f90 'const char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x561674fe6f10 'const char[2]' lvalue "\n"
|-CallExpr 0x561674fe7128 'int'
| |-ImplicitCastExpr 0x561674fe7110 'int (*)(const char *__restrict, ...)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x561674fe70f0 'int (const char *__restrict, ...)' lvalue Function 0x561674a30018 'printf' 'int (const char *__restrict, ...)'
| `-ImplicitCastExpr 0x561674fe7150 'const char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x561674fe7078 'const char[90]' lvalue "nearestNeighbor [filename] -r [int] -lat [float] -lng [float] [-hqt] [-p [int] -d [int]]\n"
|-CallExpr 0x561674fe7210 'int'
| |-ImplicitCastExpr 0x561674fe71f8 'int (*)(const char *__restrict, ...)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x561674fe71d8 'int (const char *__restrict, ...)' lvalue Function 0x561674a30018 'printf' 'int (const char *__restrict, ...)'
| `-ImplicitCastExpr 0x561674fe7238 'const char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x561674fe71b8 'const char[2]' lvalue "\n"
|-CallExpr 0x561674fe7300 'int'
| |-ImplicitCastExpr 0x561674fe72e8 'int (*)(const char *__restrict, ...)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x561674fe72c8 'int (const char *__restrict, ...)' lvalue Function 0x561674a30018 'printf' 'int (const char *__restrict, ...)'
| `-ImplicitCastExpr 0x561674fe7328 'const char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x561674fe72a0 'const char[10]' lvalue "example:\n"
|-CallExpr 0x561674fe7418 'int'
| |-ImplicitCastExpr 0x561674fe7400 'int (*)(const char *__restrict, ...)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x561674fe73e0 'int (const char *__restrict, ...)' lvalue Function 0x561674a30018 'printf' 'int (const char *__restrict, ...)'
| `-ImplicitCastExpr 0x561674fe7440 'const char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x561674fe7390 'const char[55]' lvalue "$ ./nearestNeighbor filelist.txt -r 5 -lat 30 -lng 90\n"
|-CallExpr 0x561674fe7500 'int'
| |-ImplicitCastExpr 0x561674fe74e8 'int (*)(const char *__restrict, ...)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x561674fe74c8 'int (const char *__restrict, ...)' lvalue Function 0x561674a30018 'printf' 'int (const char *__restrict, ...)'
| `-ImplicitCastExpr 0x561674fe7528 'const char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x561674fe74a8 'const char[2]' lvalue "\n"
|-CallExpr 0x561674fe7698 'int'
| |-ImplicitCastExpr 0x561674fe7680 'int (*)(const char *__restrict, ...)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x561674fe7660 'int (const char *__restrict, ...)' lvalue Function 0x561674a30018 'printf' 'int (const char *__restrict, ...)'
| `-ImplicitCastExpr 0x561674fe76c0 'const char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x561674fe7608 'const char[59]' lvalue "filename     the filename that lists the data input files\n"
|-CallExpr 0x561674fe77b8 'int'
| |-ImplicitCastExpr 0x561674fe77a0 'int (*)(const char *__restrict, ...)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x561674fe7780 'int (const char *__restrict, ...)' lvalue Function 0x561674a30018 'printf' 'int (const char *__restrict, ...)'
| `-ImplicitCastExpr 0x561674fe77e0 'const char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x561674fe7728 'const char[60]' lvalue "-r [int]     the number of records to return (default: 10)\n"
|-CallExpr 0x561674fe78d8 'int'
| |-ImplicitCastExpr 0x561674fe78c0 'int (*)(const char *__restrict, ...)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x561674fe78a0 'int (const char *__restrict, ...)' lvalue Function 0x561674a30018 'printf' 'int (const char *__restrict, ...)'
| `-ImplicitCastExpr 0x561674fe7900 'const char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x561674fe7848 'const char[62]' lvalue "-lat [float] the latitude for nearest neighbors (default: 0)\n"
|-CallExpr 0x561674fe79f8 'int'
| |-ImplicitCastExpr 0x561674fe79e0 'int (*)(const char *__restrict, ...)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x561674fe79c0 'int (const char *__restrict, ...)' lvalue Function 0x561674a30018 'printf' 'int (const char *__restrict, ...)'
| `-ImplicitCastExpr 0x561674fe7a20 'const char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x561674fe7968 'const char[63]' lvalue "-lng [float] the longitude for nearest neighbors (default: 0)\n"
|-CallExpr 0x561674fe7ae0 'int'
| |-ImplicitCastExpr 0x561674fe7ac8 'int (*)(const char *__restrict, ...)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x561674fe7aa8 'int (const char *__restrict, ...)' lvalue Function 0x561674a30018 'printf' 'int (const char *__restrict, ...)'
| `-ImplicitCastExpr 0x561674fe7b08 'const char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x561674fe7a88 'const char[2]' lvalue "\n"
|-CallExpr 0x561674fe7be8 'int'
| |-ImplicitCastExpr 0x561674fe7bd0 'int (*)(const char *__restrict, ...)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x561674fe7bb0 'int (const char *__restrict, ...)' lvalue Function 0x561674a30018 'printf' 'int (const char *__restrict, ...)'
| `-ImplicitCastExpr 0x561674fe7c10 'const char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x561674fe7b70 'const char[36]' lvalue "-h, --help   Display the help file\n"
|-CallExpr 0x561674fe7d00 'int'
| |-ImplicitCastExpr 0x561674fe7ce8 'int (*)(const char *__restrict, ...)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x561674fe7cc8 'int (const char *__restrict, ...)' lvalue Function 0x561674a30018 'printf' 'int (const char *__restrict, ...)'
| `-ImplicitCastExpr 0x561674fe7d28 'const char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x561674fe7c78 'const char[52]' lvalue "-q           Quiet mode. Suppress all text output.\n"
|-CallExpr 0x561674fe7e40 'int'
| |-ImplicitCastExpr 0x561674fe7e28 'int (*)(const char *__restrict, ...)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x561674fe7e08 'int (const char *__restrict, ...)' lvalue Function 0x561674a30018 'printf' 'int (const char *__restrict, ...)'
| `-ImplicitCastExpr 0x561674fe7e68 'const char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x561674fe7dc8 'const char[40]' lvalue "-t           Print timing information.\n"
|-CallExpr 0x561674fe7f28 'int'
| |-ImplicitCastExpr 0x561674fe7f10 'int (*)(const char *__restrict, ...)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x561674fe7ef0 'int (const char *__restrict, ...)' lvalue Function 0x561674a30018 'printf' 'int (const char *__restrict, ...)'
| `-ImplicitCastExpr 0x561674fe7f50 'const char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x561674fe7ed0 'const char[2]' lvalue "\n"
|-CallExpr 0x561674fe8050 'int'
| |-ImplicitCastExpr 0x561674fe8038 'int (*)(const char *__restrict, ...)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x561674fe8018 'int (const char *__restrict, ...)' lvalue Function 0x561674a30018 'printf' 'int (const char *__restrict, ...)'
| `-ImplicitCastExpr 0x561674fe8078 'const char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x561674fe7fb8 'const char[73]' lvalue "-p [int]     Choose the platform (must choose both platform and device)\n"
|-CallExpr 0x561674fe8178 'int'
| |-ImplicitCastExpr 0x561674fe8160 'int (*)(const char *__restrict, ...)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x561674fe8140 'int (const char *__restrict, ...)' lvalue Function 0x561674a30018 'printf' 'int (const char *__restrict, ...)'
| `-ImplicitCastExpr 0x561674fe81a0 'const char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x561674fe80e0 'const char[71]' lvalue "-d [int]     Choose the device (must choose both platform and device)\n"
|-CallExpr 0x561674fe8260 'int'
| |-ImplicitCastExpr 0x561674fe8248 'int (*)(const char *__restrict, ...)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x561674fe8228 'int (const char *__restrict, ...)' lvalue Function 0x561674a30018 'printf' 'int (const char *__restrict, ...)'
| `-ImplicitCastExpr 0x561674fe8288 'const char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x561674fe8208 'const char[2]' lvalue "\n"
|-CallExpr 0x561674fe8348 'int'
| |-ImplicitCastExpr 0x561674fe8330 'int (*)(const char *__restrict, ...)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x561674fe8310 'int (const char *__restrict, ...)' lvalue Function 0x561674a30018 'printf' 'int (const char *__restrict, ...)'
| `-ImplicitCastExpr 0x561674fe8370 'const char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x561674fe82f0 'const char[2]' lvalue "\n"
|-CallExpr 0x561674fe8468 'int'
| |-ImplicitCastExpr 0x561674fe8450 'int (*)(const char *__restrict, ...)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x561674fe8430 'int (const char *__restrict, ...)' lvalue Function 0x561674a30018 'printf' 'int (const char *__restrict, ...)'
| `-ImplicitCastExpr 0x561674fe8490 'const char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x561674fe83d8 'const char[60]' lvalue "Notes: 1. The filename is required as the first parameter.\n"
|-CallExpr 0x561674fe8588 'int'
| |-ImplicitCastExpr 0x561674fe8570 'int (*)(const char *__restrict, ...)' <FunctionToPointerDecay>
| | `-DeclRefExpr 0x561674fe8550 'int (const char *__restrict, ...)' lvalue Function 0x561674a30018 'printf' 'int (const char *__restrict, ...)'
| `-ImplicitCastExpr 0x561674fe85b0 'const char *' <ArrayToPointerDecay>
|   `-StringLiteral 0x561674fe84f8 'const char[61]' lvalue "       2. If you declare either the device or the platform,\n"
`-CallExpr 0x561674fe8690 'int'
  |-ImplicitCastExpr 0x561674fe8678 'int (*)(const char *__restrict, ...)' <FunctionToPointerDecay>
  | `-DeclRefExpr 0x561674fe8658 'int (const char *__restrict, ...)' lvalue Function 0x561674a30018 'printf' 'int (const char *__restrict, ...)'
  `-ImplicitCastExpr 0x561674fe86b8 'const char *' <ArrayToPointerDecay>
    `-StringLiteral 0x561674fe8618 'const char[35]' lvalue "          you must declare both.\n\n"
Emitting fn: _Z6euclidP7latLongPfiff
euclid
CompoundStmt 0x5616745b7fb8
|-DeclStmt 0x5616745b7448
| `-VarDecl 0x5616745b6d10  used globalId 'int' cinit
|   `-ImplicitCastExpr 0x5616745b7430 'int' <IntegralCast>
|     `-BinaryOperator 0x5616745b7410 'unsigned int' '+'
|       |-BinaryOperator 0x5616745b72b8 'unsigned int' '*'
|       | |-PseudoObjectExpr 0x5616745b7290 'unsigned int'
|       | | |-MSPropertyRefExpr 0x5616745b71f0 '<pseudo-object type>' lvalue
|       | | | `-OpaqueValueExpr 0x5616745b71d8 'const struct __cuda_builtin_blockDim_t' lvalue
|       | | |   `-DeclRefExpr 0x5616745b6d78 'const struct __cuda_builtin_blockDim_t' lvalue Var 0x561673ee6810 'blockDim' 'const struct __cuda_builtin_blockDim_t'
|       | | |-OpaqueValueExpr 0x5616745b71d8 'const struct __cuda_builtin_blockDim_t' lvalue
|       | | | `-DeclRefExpr 0x5616745b6d78 'const struct __cuda_builtin_blockDim_t' lvalue Var 0x561673ee6810 'blockDim' 'const struct __cuda_builtin_blockDim_t'
|       | | `-CallExpr 0x5616745b7270 'unsigned int'
|       | |   `-ImplicitCastExpr 0x5616745b7258 'unsigned int (*)(void)' <FunctionToPointerDecay>
|       | |     `-MemberExpr 0x5616745b7228 'unsigned int (void)' lvalue .__fetch_builtin_x 0x5616747cd640
|       | |       `-OpaqueValueExpr 0x5616745b71d8 'const struct __cuda_builtin_blockDim_t' lvalue
|       | |         `-DeclRefExpr 0x5616745b6d78 'const struct __cuda_builtin_blockDim_t' lvalue Var 0x561673ee6810 'blockDim' 'const struct __cuda_builtin_blockDim_t'
|       | `-ParenExpr 0x5616745b71b8 'unsigned int'
|       |   `-BinaryOperator 0x5616745b7198 'unsigned int' '+'
|       |     |-BinaryOperator 0x5616745b7040 'unsigned int' '*'
|       |     | |-PseudoObjectExpr 0x5616745b6f38 'unsigned int'
|       |     | | |-MSPropertyRefExpr 0x5616745b6e98 '<pseudo-object type>' lvalue
|       |     | | | `-OpaqueValueExpr 0x5616745b6e80 'const struct __cuda_builtin_gridDim_t' lvalue
|       |     | | |   `-DeclRefExpr 0x5616745b6dd0 'const struct __cuda_builtin_gridDim_t' lvalue Var 0x561673ee6908 'gridDim' 'const struct __cuda_builtin_gridDim_t'
|       |     | | |-OpaqueValueExpr 0x5616745b6e80 'const struct __cuda_builtin_gridDim_t' lvalue
|       |     | | | `-DeclRefExpr 0x5616745b6dd0 'const struct __cuda_builtin_gridDim_t' lvalue Var 0x561673ee6908 'gridDim' 'const struct __cuda_builtin_gridDim_t'
|       |     | | `-CallExpr 0x5616745b6f18 'unsigned int'
|       |     | |   `-ImplicitCastExpr 0x5616745b6f00 'unsigned int (*)(void)' <FunctionToPointerDecay>
|       |     | |     `-MemberExpr 0x5616745b6ed0 'unsigned int (void)' lvalue .__fetch_builtin_x 0x5616747ceef0
|       |     | |       `-OpaqueValueExpr 0x5616745b6e80 'const struct __cuda_builtin_gridDim_t' lvalue
|       |     | |         `-DeclRefExpr 0x5616745b6dd0 'const struct __cuda_builtin_gridDim_t' lvalue Var 0x561673ee6908 'gridDim' 'const struct __cuda_builtin_gridDim_t'
|       |     | `-PseudoObjectExpr 0x5616745b7018 'unsigned int'
|       |     |   |-MSPropertyRefExpr 0x5616745b6f78 '<pseudo-object type>' lvalue
|       |     |   | `-OpaqueValueExpr 0x5616745b6f60 'const struct __cuda_builtin_blockIdx_t' lvalue
|       |     |   |   `-DeclRefExpr 0x5616745b6e28 'const struct __cuda_builtin_blockIdx_t' lvalue Var 0x561673ee6718 'blockIdx' 'const struct __cuda_builtin_blockIdx_t'
|       |     |   |-OpaqueValueExpr 0x5616745b6f60 'const struct __cuda_builtin_blockIdx_t' lvalue
|       |     |   | `-DeclRefExpr 0x5616745b6e28 'const struct __cuda_builtin_blockIdx_t' lvalue Var 0x561673ee6718 'blockIdx' 'const struct __cuda_builtin_blockIdx_t'
|       |     |   `-CallExpr 0x5616745b6ff8 'unsigned int'
|       |     |     `-ImplicitCastExpr 0x5616745b6fe0 'unsigned int (*)(void)' <FunctionToPointerDecay>
|       |     |       `-MemberExpr 0x5616745b6fb0 'unsigned int (void)' lvalue .__fetch_builtin_y 0x5616747cbfc0
|       |     |         `-OpaqueValueExpr 0x5616745b6f60 'const struct __cuda_builtin_blockIdx_t' lvalue
|       |     |           `-DeclRefExpr 0x5616745b6e28 'const struct __cuda_builtin_blockIdx_t' lvalue Var 0x561673ee6718 'blockIdx' 'const struct __cuda_builtin_blockIdx_t'
|       |     `-PseudoObjectExpr 0x5616745b7170 'unsigned int'
|       |       |-MSPropertyRefExpr 0x5616745b70d0 '<pseudo-object type>' lvalue
|       |       | `-OpaqueValueExpr 0x5616745b70b8 'const struct __cuda_builtin_blockIdx_t' lvalue
|       |       |   `-DeclRefExpr 0x5616745b7060 'const struct __cuda_builtin_blockIdx_t' lvalue Var 0x561673ee6718 'blockIdx' 'const struct __cuda_builtin_blockIdx_t'
|       |       |-OpaqueValueExpr 0x5616745b70b8 'const struct __cuda_builtin_blockIdx_t' lvalue
|       |       | `-DeclRefExpr 0x5616745b7060 'const struct __cuda_builtin_blockIdx_t' lvalue Var 0x561673ee6718 'blockIdx' 'const struct __cuda_builtin_blockIdx_t'
|       |       `-CallExpr 0x5616745b7150 'unsigned int'
|       |         `-ImplicitCastExpr 0x5616745b7138 'unsigned int (*)(void)' <FunctionToPointerDecay>
|       |           `-MemberExpr 0x5616745b7108 'unsigned int (void)' lvalue .__fetch_builtin_x 0x5616747cbd90
|       |             `-OpaqueValueExpr 0x5616745b70b8 'const struct __cuda_builtin_blockIdx_t' lvalue
|       |               `-DeclRefExpr 0x5616745b7060 'const struct __cuda_builtin_blockIdx_t' lvalue Var 0x561673ee6718 'blockIdx' 'const struct __cuda_builtin_blockIdx_t'
|       `-PseudoObjectExpr 0x5616745b73e8 'unsigned int'
|         |-MSPropertyRefExpr 0x5616745b7348 '<pseudo-object type>' lvalue
|         | `-OpaqueValueExpr 0x5616745b7330 'const struct __cuda_builtin_threadIdx_t' lvalue
|         |   `-DeclRefExpr 0x5616745b72d8 'const struct __cuda_builtin_threadIdx_t' lvalue Var 0x561673ee6620 'threadIdx' 'const struct __cuda_builtin_threadIdx_t'
|         |-OpaqueValueExpr 0x5616745b7330 'const struct __cuda_builtin_threadIdx_t' lvalue
|         | `-DeclRefExpr 0x5616745b72d8 'const struct __cuda_builtin_threadIdx_t' lvalue Var 0x561673ee6620 'threadIdx' 'const struct __cuda_builtin_threadIdx_t'
|         `-CallExpr 0x5616745b73c8 'unsigned int'
|           `-ImplicitCastExpr 0x5616745b73b0 'unsigned int (*)(void)' <FunctionToPointerDecay>
|             `-MemberExpr 0x5616745b7380 'unsigned int (void)' lvalue .__fetch_builtin_x 0x5616747ca3a0
|               `-OpaqueValueExpr 0x5616745b7330 'const struct __cuda_builtin_threadIdx_t' lvalue
|                 `-DeclRefExpr 0x5616745b72d8 'const struct __cuda_builtin_threadIdx_t' lvalue Var 0x561673ee6620 'threadIdx' 'const struct __cuda_builtin_threadIdx_t'
|-DeclStmt 0x5616745b7568
| `-VarDecl 0x5616745b7470  used latLong 'LatLong *' cinit
|   `-BinaryOperator 0x5616745b7548 'LatLong *' '+'
|     |-ImplicitCastExpr 0x5616745b7518 'LatLong *' <LValueToRValue>
|     | `-DeclRefExpr 0x5616745b74d8 'LatLong *' lvalue ParmVar 0x5616745b6888 'd_locations' 'LatLong *'
|     `-ImplicitCastExpr 0x5616745b7530 'int' <LValueToRValue>
|       `-DeclRefExpr 0x5616745b74f8 'int' lvalue Var 0x5616745b6d10 'globalId' 'int'
`-IfStmt 0x5616745b7f68
  |-BinaryOperator 0x5616745b75f0 '_Bool' '<'
  | |-ImplicitCastExpr 0x5616745b75c0 'int' <LValueToRValue>
  | | `-DeclRefExpr 0x5616745b7580 'int' lvalue Var 0x5616745b6d10 'globalId' 'int'
  | `-ImplicitCastExpr 0x5616745b75d8 'int' <LValueToRValue>
  |   `-DeclRefExpr 0x5616745b75a0 'int' lvalue ParmVar 0x5616745b6988 'numRecords' 'int'
  `-CompoundStmt 0x5616745b7f48
    |-DeclStmt 0x5616745b7720
    | `-VarDecl 0x5616745b7628  used dist 'float *' cinit
    |   `-BinaryOperator 0x5616745b7700 'float *' '+'
    |     |-ImplicitCastExpr 0x5616745b76d0 'float *' <LValueToRValue>
    |     | `-DeclRefExpr 0x5616745b7690 'float *' lvalue ParmVar 0x5616745b6908 'd_distances' 'float *'
    |     `-ImplicitCastExpr 0x5616745b76e8 'int' <LValueToRValue>
    |       `-DeclRefExpr 0x5616745b76b0 'int' lvalue Var 0x5616745b6d10 'globalId' 'int'
    `-BinaryOperator 0x5616745b7f28 'float' lvalue '='
      |-UnaryOperator 0x5616745b7770 'float' lvalue prefix '*' cannot overflow
      | `-ImplicitCastExpr 0x5616745b7758 'float *' <LValueToRValue>
      |   `-DeclRefExpr 0x5616745b7738 'float *' lvalue Var 0x5616745b7628 'dist' 'float *'
      `-CStyleCastExpr 0x5616745b7f00 'float' <NoOp>
        `-CallExpr 0x5616745b7ec0 'float'
          |-ImplicitCastExpr 0x5616745b7ea8 'float (*)(float)' <FunctionToPointerDecay>
          | `-DeclRefExpr 0x5616745b7e88 'float (float)' lvalue Function 0x5616741dce68 'sqrt' 'float (float)'
          `-BinaryOperator 0x5616745b7c08 'float' '+'
            |-BinaryOperator 0x5616745b79d8 'float' '*'
            | |-ParenExpr 0x5616745b78c0 'float'
            | | `-BinaryOperator 0x5616745b78a0 'float' '-'
            | |   |-ImplicitCastExpr 0x5616745b7870 'float' <LValueToRValue>
            | |   | `-DeclRefExpr 0x5616745b77e8 'float' lvalue ParmVar 0x5616745b6a08 'lat' 'float'
            | |   `-ImplicitCastExpr 0x5616745b7888 'float' <LValueToRValue>
            | |     `-MemberExpr 0x5616745b7840 'float' lvalue ->lat 0x5616745b48f0
            | |       `-ImplicitCastExpr 0x5616745b7828 'LatLong *' <LValueToRValue>
            | |         `-DeclRefExpr 0x5616745b7808 'LatLong *' lvalue Var 0x5616745b7470 'latLong' 'LatLong *'
            | `-ParenExpr 0x5616745b79b8 'float'
            |   `-BinaryOperator 0x5616745b7998 'float' '-'
            |     |-ImplicitCastExpr 0x5616745b7968 'float' <LValueToRValue>
            |     | `-DeclRefExpr 0x5616745b78e0 'float' lvalue ParmVar 0x5616745b6a08 'lat' 'float'
            |     `-ImplicitCastExpr 0x5616745b7980 'float' <LValueToRValue>
            |       `-MemberExpr 0x5616745b7938 'float' lvalue ->lat 0x5616745b48f0
            |         `-ImplicitCastExpr 0x5616745b7920 'LatLong *' <LValueToRValue>
            |           `-DeclRefExpr 0x5616745b7900 'LatLong *' lvalue Var 0x5616745b7470 'latLong' 'LatLong *'
            `-BinaryOperator 0x5616745b7be8 'float' '*'
              |-ParenExpr 0x5616745b7ad0 'float'
              | `-BinaryOperator 0x5616745b7ab0 'float' '-'
              |   |-ImplicitCastExpr 0x5616745b7a80 'float' <LValueToRValue>
              |   | `-DeclRefExpr 0x5616745b79f8 'float' lvalue ParmVar 0x5616745b6a88 'lng' 'float'
              |   `-ImplicitCastExpr 0x5616745b7a98 'float' <LValueToRValue>
              |     `-MemberExpr 0x5616745b7a50 'float' lvalue ->lng 0x5616745b4958
              |       `-ImplicitCastExpr 0x5616745b7a38 'LatLong *' <LValueToRValue>
              |         `-DeclRefExpr 0x5616745b7a18 'LatLong *' lvalue Var 0x5616745b7470 'latLong' 'LatLong *'
              `-ParenExpr 0x5616745b7bc8 'float'
                `-BinaryOperator 0x5616745b7ba8 'float' '-'
                  |-ImplicitCastExpr 0x5616745b7b78 'float' <LValueToRValue>
                  | `-DeclRefExpr 0x5616745b7af0 'float' lvalue ParmVar 0x5616745b6a88 'lng' 'float'
                  `-ImplicitCastExpr 0x5616745b7b90 'float' <LValueToRValue>
                    `-MemberExpr 0x5616745b7b48 'float' lvalue ->lng 0x5616745b4958
                      `-ImplicitCastExpr 0x5616745b7b30 'LatLong *' <LValueToRValue>
                        `-DeclRefExpr 0x5616745b7b10 'LatLong *' lvalue Var 0x5616745b7470 'latLong' 'LatLong *'
nn_cuda.cu:114:2: warning: 'cudaThreadSynchronize' is deprecated [-Wdeprecated-declarations]
        cudaThreadSynchronize();
        ^
/usr/local/cuda-11.2//include/cuda_runtime_api.h:1011:8: note: 'cudaThreadSynchronize' has been explicitly marked deprecated here
extern __CUDA_DEPRECATED __host__ cudaError_t CUDARTAPI cudaThreadSynchronize(void);
       ^
/usr/local/cuda-11.2//include/cuda_runtime_api.h:255:42: note: expanded from macro '__CUDA_DEPRECATED'
#define __CUDA_DEPRECATED __attribute__((deprecated))
                                         ^
nn_cuda.cu:120:2: warning: 'cudaThreadSynchronize' is deprecated [-Wdeprecated-declarations]
        cudaThreadSynchronize();
        ^
/usr/local/cuda-11.2//include/cuda_runtime_api.h:1011:8: note: 'cudaThreadSynchronize' has been explicitly marked deprecated here
extern __CUDA_DEPRECATED __host__ cudaError_t CUDARTAPI cudaThreadSynchronize(void);
       ^
/usr/local/cuda-11.2//include/cuda_runtime_api.h:255:42: note: expanded from macro '__CUDA_DEPRECATED'
#define __CUDA_DEPRECATED __attribute__((deprecated))
                                         ^
nn_cuda.cu:171:5: warning: 'cudaThreadSynchronize' is deprecated [-Wdeprecated-declarations]
    cudaThreadSynchronize();
    ^
/usr/local/cuda-11.2//include/cuda_runtime_api.h:1011:8: note: 'cudaThreadSynchronize' has been explicitly marked deprecated here
extern __CUDA_DEPRECATED __host__ cudaError_t CUDARTAPI cudaThreadSynchronize(void);
       ^
/usr/local/cuda-11.2//include/cuda_runtime_api.h:255:42: note: expanded from macro '__CUDA_DEPRECATED'
#define __CUDA_DEPRECATED __attribute__((deprecated))
                                         ^
